<?xml version="1.0"?><st-source><methods><class-id>Core.Character</class-id> <category>accessing</category><body package="Magnitude-General" selector="next">next^(self asInteger + 1) asCharacter</body></methods><do-it>Overview</do-it><do-it> nil</do-it><do-it> nil</do-it><do-it> nil</do-it><do-it>Overview </do-it><do-it>$a next</do-it><do-it>$b next </do-it><do-it>$z next  </do-it><do-it>'xyz' collect: [:each | each next]</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignments.im' 'September 12, 2013' '12:06:47 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignments.im was created at 12:06:47 PM on September 12, 2013."</do-it><remove-selector><class-id>Core.Character</class-id> <selector>next</selector></remove-selector><methods><class-id>Core.Character</class-id> <category>accessing</category><body package="Magnitude-General" selector="next">next	self = $z		ifTrue: [^$a asCharacter].	"self $Z		ifTrue: [^$Z asCharacter]."	^(self asInteger + 1) asCharacter</body></methods><do-it>$z next</do-it><methods><class-id>Core.Character</class-id> <category>accessing</category><body package="Magnitude-General" selector="next">next	self = $z		ifTrue: [^$a asCharacter].	self = $Z		ifTrue: [^$z asCharacter].	^(self asInteger + 1) asCharacter</body></methods><do-it>$Z next </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Collections-Text" selector="rotate">rotate	'xyz' collect: [:each | each next]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Collections-Text" selector="rotate">rotate	self collect: [:each | each next].</body></methods><do-it>'ab' rotate</do-it><do-it> 'ab'</do-it><do-it> 'ab'</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Collections-Text" selector="rotate">rotate	$a next "	self collect: [:each | each next]."</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Collections-Text" selector="rotate">rotate	^$a	"$a next ""	self collect: [:each | each next]."</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>rotate</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>rotate</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>rotate</do-it><methods><class-id>Core.Character</class-id> <category>accessing</category><body package="Magnitude-General" selector="next">next		self = $z		ifTrue: [^$a asCharacter].	self = $Z		ifTrue: [^$z asCharacter].	^(self asInteger + 1) asCharacter</body></methods><component-created><name>Assignment4</name> <type>package</type></component-created><component-property><name>Assignment4</name> <type>package</type><property>comment</property> <value>'""'</value></component-property><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	^self</body></methods><do-it>'12345fgh' sumSeperatedBy: $1.</do-it><do-it>'12345fgh' sumSeperatedBy: 1.</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	^aCharacter</body></methods><do-it>'12345fgh' sumSeperatedBy: 1. </do-it><do-it>'12345fgh' sumSeperatedBy: $,</do-it><do-it> $, "16r002C"</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:inspect:tokensBasedOn:">sumSeperatedBy: aCharacter	inspect:	self tokensBasedOn: aCharacter</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:inspect:tokensBasedOn:">sumSeperatedBy: aCharacter inspect: self tokensBasedOn: aCharacter	</body></methods><do-it>'12345fgh' sumSeperatedBy: $,</do-it><do-it>'1,2,3,45fgh' sumSeperatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:inspect:tokensBasedOn:">sumSeperatedBy: aCharacter inspect: self tokensBasedOn: Character</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter ^self tokensBasedOn: aCharacter.</body></methods><remove-selector><class-id>Core.String</class-id> <selector>sumSeperatedBy:inspect:tokensBasedOn:</selector></remove-selector><do-it>'1,2,3,45fgh' sumSeperatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray |  numberArray := self tokensBasedOn: aCharacter.^numberArray.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray |	numberArray := self tokensBasedOn: aCharacter.	^numberArray</body></methods><do-it>'1,2,3,45fgh' sumSeperatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	self isEmpty ifTrue: [^0].	^self fold: [:a :b | a + b]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray |	numberArray := self tokensBasedOn: aCharacter.	^numberArray sum.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0].	^self fold: [:a :b | a + b]"^10</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray |	numberArray := self tokensBasedOn: aCharacter.	^numberArray</body></methods><do-it>'1,2,3,4' sumSeperatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray |	numberArray := self tokensBasedOn: aCharacter.	^numberArray sum</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0].""	^self fold: [:a :b | a + b]"^10</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | total := total + element].	^total / numberArray size</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	numberArray := Array new.	total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | total := total + element].	^total / numberArray size</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	numberArray := Array new.	total := 0.	numberArray := self tokensBasedOn: aCharacter.	"numberArray do: [:element | total := total + element]."	^numberArray</body></methods><do-it>'1,2,3,4' sumSeperatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter.	"numberArray do: [:element | total := total + element]."	^numberArray</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | total := total + element].	^total / numberArray size</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray asNumber.	numberArray do: [:element | total := total + element].	^total / numberArray size</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter asNumber.	numberArray do: [:element | total := total + element].	^total / numberArray size</body></methods><do-it>'3.12' asNumber</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | total := total + element asNumber].	^total / numberArray size</body></methods><do-it>'1,22,3,54' sumSeperatedBy: $,</do-it><do-it>'1,22,3,54' sumSeperatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | total := total + element asNumber].	^total</body></methods><do-it>'1,22,3,54' sumSeperatedBy: $, </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter."	numberArray do: [:element | total := total + element asNumber].""	^total"	numberArray sum.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0].""	^self fold: [:a :b | a + b]"</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0].""	^self fold: [:a :b | a + b]"	| total |total := 0 .	self do: [:element | total := total + element asNumber].	^total</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0]."	"	^self fold: [:a :b | a + b]"	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0]."	"	^self fold: [:a :b | a + b]"	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0]."	"	^self fold: [:a :b | a + b]"	"| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total"^444444</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	"self isEmpty ifTrue: [^0]."	"	^self fold: [:a :b | a + b]"	"| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total"	^444444</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="mySum">mySum	"self isEmpty ifTrue: [^0]."	"	^self fold: [:a :b | a + b]"	"| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total"	^444444</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter."	numberArray do: [:element | total := total + element asNumber].""	^total"	numberArray mySum.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter."	numberArray do: [:element | total := total + element asNumber].""	^total"	numberArray sum.</body></methods><remove-selector><class-id>Core.String</class-id> <selector>mySum</selector></remove-selector><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter	| numberArray total |	total := 0.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | total := total + element asNumber].	^total	"numberArray sum."</body></methods><do-it>'1,22,3,54' sumSeperatedBy: $, </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product |	product := 1.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | product := product + element asNumber].	^product	"numberArray sum."</body></methods><do-it>'5-6-4' productSeperatedBy: $-</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product |	product := 1.	numberArray := self tokensBasedOn: aCharacter.	numberArray do: [:element | product := product * element asNumber].	^product	"numberArray sum."</body></methods><do-it>'5-6-4' productSeperatedBy: $- </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]."^ readStream upTo: aCharacter.</body></methods><do-it>'5-6-4' productSeperatedBy: $- </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]."^ readStream through: aCharacter.</body></methods><do-it>'5-6-4' productSeperatedBy: $-  </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber].""^ readStream through: aCharacter."	[readStream atEnd]		whileFalse: [product := product * readStream upTo: aCharacter]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber].""^ readStream through: aCharacter."	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter]"</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]."^ readStream through: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-   </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]."^ readStream upTo: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-    </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]." ^readStream upTo: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter.		readStream skipThrough: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-   </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]." readStream upTo: aCharacter.^readStream skipThrough: aCharacter	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter.		readStream skipThrough: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-   </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]." readStream upTo: aCharacter.readStream skipThrough: aCharacter.^readStream upTo: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter.		readStream skipThrough: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-   </do-it><do-it> '4'</do-it><do-it>'5-6-4' productSeperatedBy: $-    </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]." readStream upTo: aCharacter.readStream skipUpTo: aCharacter.^readStream upTo: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter.		readStream skipThrough: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-    </do-it><do-it>'5-6-4' productSeperatedBy: $-     </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]." readStream upTo: aCharacter.readStream skipThrough: aCharacter.^readStream upTo: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter.		readStream skipThrough: aCharacter]"</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]." readStream upTo: aCharacter."readStream skipThrough: aCharacter."^readStream upTo: aCharacter.	"[readStream atEnd]"	"	whileFalse: [product := product * readStream upTo: aCharacter.		readStream skipThrough: aCharacter]"</body></methods><do-it>'5-6-4' productSeperatedBy: $-      </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self."	numberArray do: [:element | product := product * element asNumber]."" readStream upTo: aCharacter.""readStream skipThrough: aCharacter.""^readStream upTo: aCharacter."	[readStream atEnd]	whileFalse: [product := product * readStream upTo: aCharacter.]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [product := product * readStream upTo: aCharacter]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [product := product * readStream upTo: aCharacter asNumber]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [product := product * (readStream upTo: aCharacter) asNumber]</body></methods><do-it>'5-6-4' productSeperatedBy: $-     </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [product := product * ((readStream upTo: aCharacter) asNumber)]</body></methods><do-it>'5-6-4' productSeperatedBy: $-     </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [((readStream upTo: aCharacter) )]</body></methods><do-it>'5-6-4' productSeperatedBy: $-      </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [((readStream through: aCharacter) )]</body></methods><do-it>'5-6-4' productSeperatedBy: $-       </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [((readStream upTo: aCharacter) )]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [ product = product * ((readStream upTo: aCharacter) asNumber)].	^product</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [^444444444 "product = product * ((readStream upTo: aCharacter) asNumber)"].</body></methods><do-it>'5-6-4' productSeperatedBy: $-       </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [ readStream next.^4444444 "product = product * ((readStream upTo: aCharacter) asNumber)"].</body></methods><do-it>'5-6-4' productSeperatedBy: $-       </do-it><do-it> 4444444</do-it><do-it> 4444444</do-it><do-it>'5-6-4' productSeperatedBy: $-        </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter.""	[readStream atEnd]""		whileFalse: [ product = product * ((readStream upTo: aCharacter) asNumber)]."[readStream atEnd]  whileFalse:  [Transcript cr; show: readStream next displayString] </body></methods><do-it>'5-6-4' productSeperatedBy: $-      </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream upTo: aCharacter atEnd]		whileFalse: [^44 "product = product * ((readStream upTo: aCharacter) asNumber)"].</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter.""	[readStream upTo: aCharacter atEnd]""		whileFalse: [readStream upTo: aCharacter. "product = product * ((readStream upTo: aCharacter) asNumber)"]."</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream upTo: aCharacter atEnd]		whileFalse: [readStream upTo: aCharacter. "product = product * ((readStream upTo: aCharacter) asNumber)"].</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream  atEnd]		whileFalse: [readStream upTo: aCharacter. "product = product * ((readStream upTo: aCharacter) asNumber)"].</body></methods><do-it>'5-6-4' productSeperatedBy: $-       </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [readStream upTo: aCharacter. readStream next. "product = product * ((readStream upTo: aCharacter) asNumber)"].</body></methods><do-it>'5-6-4' productSeperatedBy: $-       </do-it><do-it>'5-6-4' productSeperatedBy: $-        </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [1].</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeperatedBy:">productSeperatedBy: aCharacter	| numberArray product readStream |	product := 1.	readStream := ReadStream on: self.	"	numberArray do: [:element | product := product * element asNumber]."	" readStream upTo: aCharacter."	"readStream skipThrough: aCharacter."	"^readStream upTo: aCharacter."	[readStream atEnd]		whileFalse: [product := product + 1].^product</body></methods><component-created><name>Assignment4</name> <type>package</type></component-created><component-property><name>Assignment4</name> <type>package</type><property>comment</property> <value>'""'</value></component-property><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. "| tokeniedArray |	tokeniedArray := self tokensBasedOn: aCharacter.^tokeniedArray</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. "| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.^tokenisedArray</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. ""| tokenisedArray |""	tokenisedArray := self tokensBasedOn: aCharacter.""^tokenisedArray"</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeperatedBy:">sumSeperatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. ""| tokenisedArray |""	tokenisedArray := self tokensBasedOn: aCharacter.""^tokenisedArray"^12</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. ""| tokenisedArray |""	tokenisedArray := self tokensBasedOn: aCharacter.""^tokenisedArray"^12</body></methods><remove-selector><class-id>Core.String</class-id> <selector>sumSeperatedBy:</selector></remove-selector><do-it>'5.6' asNumber</do-it><do-it>'5, 6, 4'sumSeparatedBy: $,  </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. "| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.^tokenisedArray</body></methods><do-it>'5, 6, 4'sumSeparatedBy: $,   </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter"self do: [:element | total := total + element].""	^total / arraySize. "| tokenisedArray total |total := 0.	tokenisedArray := self tokensBasedOn: aCharacter.	tokenisedArray do: [:element | total := total + element asNumber].^total</body></methods><do-it>'5, 6, 4'sumSeparatedBy: $,    </do-it><do-it>'5, 6, 4, 6'sumSeparatedBy: $,     </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedArray total |	total := 0.	tokenisedArray := self tokensBasedOn: aCharacter.	tokenisedArray do: [:element | total := total + element asNumber].	^total</body></methods><do-it>'5, 6, 4, 6'sumSeparatedBy: $,     </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| readStream |	readStream := self readStream.	^readStream.</body></methods><do-it>'5-6-4' productSeparatedBy: $-    </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	aStream upTo: aCharacter.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	aStream upTo: aCharacter</body></methods><do-it>'5-6-4' productSeparatedBy: $-     </do-it><do-it>'5-6-4' productSeparatedBy: $-      </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	aStream through: aCharacter</body></methods><do-it>'5-6-4' productSeparatedBy: $-       </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	aStream through: aCharacter.^78</body></methods><do-it>'5-6-4' productSeparatedBy: $-        </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^aStream through: aCharacter.</body></methods><do-it>'5-6-4' productSeparatedBy: $-      </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^aStream upTo: aCharacter asNumber.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^(aStream upTo: aCharacter) asNumber.</body></methods><do-it>'5-6-4' productSeparatedBy: $-       </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	(aStream upTo: aCharacter) asNumber.^	(aStream upTo: aCharacter) asNumber.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	(aStream upTo: aCharacter) asNumber.^(aStream upTo: aCharacter) asNumber.</body></methods><do-it>'5-6-4' productSeparatedBy: $-        </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	(aStream upTo: aCharacter) asNumber.(aStream upTo: aCharacter) asNumber.^(aStream upTo: aCharacter) asNumber.</body></methods><do-it>'5-6-4' productSeparatedBy: $-         </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^(aStream upTo: aCharacter) asNumber *(aStream upTo: aCharacter) asNumber *(aStream upTo: aCharacter) asNumber.</body></methods><do-it>'5-6-4' productSeparatedBy: $-          </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine^10.</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	Transcript cr; show: (self upTo: Character cr).</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| aStream |	aStream := self readStream.	Transcript cr; show: (aStream upTo: Character cr).</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| aStream |	aStream := self readStream.	Transcript cr; show: (aStream upTo: Character cr).</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| aStream |	aStream := ReadStream on: self.	Transcript cr; show: (aStream upTo: Character cr).</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| aStream |	aStream := self readStream.	Transcript cr; show: (aStream upTo: Character cr).</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| |	Transcript cr; show: (self upTo: Character cr).</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| |	Transcript cr; show: (self upTo: Character cr).	Transcript cr; show: 'Hi' printString.</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read nextLine. </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	| |	Transcript cr; show: (self upTo: Character cr).	Transcript cr; show: self upToEnd.	self close.</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	Transcript		cr;		show: (self upTo: Character cr).	Transcript		cr;		show: self upToEnd.	self close</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read nextLine. </do-it><do-it>test := 'thisisanewa test.'.read := test readStream.read nextLine.</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^(aStream upTo: aCharacter) asNumber * (aStream upTo: aCharacter) asNumber		* (aStream upTo: aCharacter) asNumber</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^(aStream upTo: aCharacter) asNumber * (aStream upTo: aCharacter) asNumber		* (aStream upTo: aCharacter) asNumber</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	[self atEnd]		ifTrue: [self close].		Transcript		cr;		show: (self upTo: Character cr).	</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	[self atEnd]		ifTrue: [self close].		^self upTo: Character cr.</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine"	[self atEnd]		ifTrue: [self close].	"	^self upTo: Character cr.</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	"	[self atEnd]		ifTrue: [self close].	"	^self upTo: Character cr</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.</do-it><do-it>read nextLine. </do-it><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.  read nextLine.  </do-it><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.  read nextLine.   read nextLine. </do-it><do-it>test := 'thisisa test.'.read := test readStream.read nextLine.  read nextLine.   read nextLine.  read nextLine.  </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	^self upTo: Character cr</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	aOrderedCollection add: self upToEnd.	^aOrderedCollection.</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	aOrderedCollection add: (self upTo: Character cr).	^aOrderedCollection.</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read lines.</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	aOrderedCollection add: (self upTo: Character cr);	add: (self upToEnd).	^aOrderedCollection.</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	aOrderedCollection		add: (self upTo: Character cr);		add: self upToEnd.	^aOrderedCollection</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read lines. </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileTrue: [aOrderedCollection add: (self upTo: Character cr)].	^aOrderedCollection</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read lines.     </do-it><do-it>stream := ReadWriteStream on: (Array new). stream nextPut: 2. stream nextPut: 'How are you'. stream nextPutAll: 'Alec'. stream nextPutAll: #('Fine' 'thanks'). stream nextPut: OrderedCollection new. stream reset. [stream atEnd]  whileFalse:  [Transcript cr; show: stream next displayString] </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileTrue: [aOrderedCollection put: (self upTo: Character cr)].	^aOrderedCollection</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read lines.      </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileTrue: [aOrderedCollection put: 12 "(self upTo: Character cr)"].	^aOrderedCollection</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read lines.       </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileFalse: [aOrderedCollection put: 12 "(self upTo: Character cr)"].	^aOrderedCollection</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileFalse: [aOrderedCollection add: 12 "(self upTo: Character cr)"].	^aOrderedCollection</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileFalse: [aOrderedCollection add: (self upTo: Character cr)].	^aOrderedCollection</body></methods><do-it>test := 'thisisa test.'.read := test readStream.read lines.        </do-it><do-it>test := 'thisisanewa test.'.read := test readStream.read lines.         </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileFalse: [aOrderedCollection add: (self upTo: Character cr)].	^aOrderedCollection</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream product |	aStream := self readStream.	product := 1.	"^(aStream upTo: aCharacter) asNumber * (aStream upTo: aCharacter) asNumber		* (aStream upTo: aCharacter) asNumber"	[self atEnd]		whileFalse: [product := product * ((aStream upTo: aCharacter) asNumber)].	^product</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream product |	aStream := self readStream.	product := 1.	"^(aStream upTo: aCharacter) asNumber * (aStream upTo: aCharacter) asNumber		* (aStream upTo: aCharacter) asNumber"	[aStream atEnd]		whileFalse: [product := product * ((aStream upTo: aCharacter) asNumber)].	^product</body></methods><do-it>'5-6-4' productSeparatedBy:$-</do-it><do-it>'5-6-4-3' productSeparatedBy:$- </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream product |	aStream := self readStream.	product := 1.	[aStream atEnd]		whileFalse: [product := product * ((aStream upTo: aCharacter) asNumber)].	^product</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream product |	aStream := self readStream.	product := 1.	[aStream atEnd]		whileFalse: [product := product * (aStream upTo: aCharacter) asNumber].	^product</body></methods><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name balance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment4</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="name">name	^name</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^balance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment4" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	balance := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment4" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Core.BankAccount</class-id><body>""</body></comment><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance asFloat + anAmount.</body></methods><do-it>(45.67 * 100) rounded</do-it><do-it>(45.673 * 100) rounded</do-it><do-it>(45.678 * 100) rounded </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + ((anAmount * 100) rounded).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) rounded</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) rounded.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^balance / 100</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^balance / 100</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) rounded.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERRO] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment4" selector="name:balance:">name: aName balance: aBalance	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment4" selector="name:balance:">name: aName balance: aBalancename := aName.	balance := (aBalance * 100) rounded.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment4" selector="name:balance:">name: aName balance: aBalance	name := aName.	balance := (aBalance * 100) rounded.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	"balance := (anObject * 100) rounded."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) rounded.</body></methods><do-it>ac:= BankAccount.</do-it><do-it>ac:= BankAccount new.ac balance: 0.</do-it><do-it>ac:= BankAccount new.ac balance: 0.ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 56.788.ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100)</body></methods><do-it>ac:= BankAccount new.ac balance: 56.788.ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100) asFloat</body></methods><do-it>ac:= BankAccount new.ac balance: 56.788.ac balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + ((anAmount * 100) rounded)</body></methods><do-it>ac:= BankAccount new.ac balance: 4.99.ac deposit: 10.ac balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) rounded.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) rounded.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.99.ac deposit: 10. ac withdrawal: 10.ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 4.99.ac deposit: 10. ac withdrawal: 14.99.ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 4.99.ac deposit: 10. ac withdrawal: 15.99.ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 4.99.ac deposit: 10. ac withdrawal: 15.99.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4.im' 'October 12, 2013' '6:18:50 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4.im was created at 6:18:50 PM on October 12, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4.im' 'October 12, 2013' '6:19:00 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4.im was created at 6:19:00 PM on October 12, 2013."</do-it><do-it>ArithmeticValue divisionByZeroSignal  handle: [:ex | Transcript cr; show: ex errorString]  do: [ 4 / 0 ]. </do-it><do-it>ArithmeticValue divisionByZeroSignal  handle: [:ex | Transcript cr; show: ex errorString] do: [ 4 / 0 ].</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| sum |	sum := 0.	self do: [:element | sum := sum + element asNumber].	^sum</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| sum |	sum := 0.	self do: [:element | sum := sum + element asNumber].	^sum</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedArray total |	total := 0.	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray sum.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedArray |"	total := 0."	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray sum.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray sum</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="temp">temp^4567</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray temp</body></methods><remove-selector><class-id>Core.String</class-id> <selector>temp</selector></remove-selector><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray sum</body></methods><methods><class-id>Core.Array</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| sum |	sum := 0.	self do: [:element | sum := sum + element asNumber].	^sum</body></methods><methods><class-id>Core.Array</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| sum |	sum := 0.	self do: [:element | sum := sum + element asNumber].	^sum</body></methods><remove-selector><class-id>Core.String</class-id> <selector>sum</selector></remove-selector><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	tokenisedArray asNumber.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray sum</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray sum</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + ((anAmount * 100) )</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) .</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100) asFloat rounded</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) rounded .</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance. 4.569</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) .</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance. 4.569</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asNumber .</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance. 4.569 </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asNumber.^balance.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asNumber.^balance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asNumber.^balance asNumber.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asNumber.^balance asFloat.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) rounded.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><do-it>ac:= BankAccount new.ac balance: 4.569. ac balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject  asNumber * 100) .</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569. ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100) asFloat.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569. ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) .	^balance.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) .	^balance asInteger.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger.</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance</do-it><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: ( balance + anAmount).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: balance + anAmount</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.ac deposit: 10. ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.ac deposit: 10. ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.ac deposit: 10.12. ac balance. </do-it><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.ac deposit: 10.122. ac balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |"self balance: self balance + anAmount"	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |"self balance: self balance + anAmount"	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.ac deposit: 10.122. ac balance.  ac withdrawal: 15.99. </do-it><do-it>ac:= BankAccount new.ac balance: 4.569.ac balance.ac deposit: 10.122. ac balance.  ac withdrawal: 5.99. ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [self balance:calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [self balance:calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac balance.</do-it><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac balance. </do-it><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac deposit: 1.53.ac balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [self balance: calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac deposit: 1.53.ac balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [self balance: calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac deposit: 1.53.ac balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) .	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac:= BankAccount new.ac balance: 4.345.ac deposit: 10.122.ac withdrawal: 5.99. ac deposit: 1.53.ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| writeStream |	writeStream := 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments' asFilename writeStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close] </body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| writeStream |	writeStream := 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions' asFilename writeStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close]</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions'.</do-it><do-it>ac := BankAccount new.ac processFile: 'transactions'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| writeStream |	writeStream := 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' asFilename writeStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| writeStream |	writeStream := 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' asFilename writeStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close]</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions'</do-it><do-it>ac := BankAccount new.ac processFile: 'transactions' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile readStream].	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="myHandleError:">myHandleError: anError	| text MyErrorMessages |	text := MyErrorMessages textFor:  anError parameter.	anError lovalErrorString notNil ifTrue: 		[text := text, '-', anError localErrorString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aStream	Transcript show: aStream.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile readStream].	"[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile readStream].^readStream	"[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile readStream].^readStream nextLine	"[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	"OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile readStream]."readStream := aFile readStream.^readStream nextLine	"[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'</do-it><do-it>ac := BankAccount new.ac processFile: 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\' </do-it><do-it>ac := BankAccount new.ac processFile: 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	"OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile readStream]."readStream := aFile asFilename readStream.^readStream nextLine	"[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	"OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile asFilename readStream]."readStream := aFile asFilename readStream.^readStream nextLine	"[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	"OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile asFilename readStream]."readStream := aFile asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]		valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	"OSErrorHolder errorSignal		handle: [:ex | ex restartDo: [^self myHandleError: ex]]		do: [readStream := aFile asFilename readStream]."	readStream := aFile asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]		valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aStream	Transcript show: aStream;cr.</body></methods><do-it>ac := BankAccount new.ac processFile: 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aStream	Transcript show: aStream; cr.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray</body></methods><do-it>'5, 6, 4' sumSeparatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter asArray.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	"	total := 0."	| tokenisedArray |	tokenisedArray := self tokensBasedOn: aCharacter.	"tokenisedArray do: [:element | total := total + element asNumber].	^total"	^tokenisedArray</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| sum |	sum := 0.	self do: [:element | sum := sum + element asNumber].	^sum</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| sum |	sum := 0.	self do: [:element | sum := sum + element asNumber].	^sum</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ScannerTable</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ScannerTable</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Kernel.ScannerTable removeFromSystem</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedCollection |"	total := 0."	tokenisedCollection := self tokensBasedOn: aCharacter."	tokenisedArray do: [:element | total := total + element asNumber]."	^tokenisedCollection sum.</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total.</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total</body></methods><do-it>'5,6,4' sumSeparatedBy: $,</do-it><do-it> 15</do-it><do-it>'5,6,4' sumSeparatedBy: $,</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedCollection |	tokenisedCollection := self tokensBasedOn: aCharacter.	^tokenisedCollection sum.</body></methods><do-it>'5,6,4,6,4,8' sumSeparatedBy: $,</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="product:">product: aCharacter	| product |	product := 1.	[self atEnd]		whileFalse: [product := product * (self upTo: aCharacter) asNumber]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	"[aStream atEnd]		whileFalse: [product := product * (aStream upTo: aCharacter) asNumber]."	^aStream product: aCharacter.</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="product:">product: aCharacter	| product |	product := 1.	[self atEnd]		whileFalse: [product := product * (self upTo: aCharacter) asNumber].^product</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="product:">product: aCharacter	| product |	product := 1.	[self atEnd]		whileFalse: [product := product * (self upTo: aCharacter) asNumber].	^product</body></methods><do-it>'5-6-4' productSeparatedBy: $-</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^aStream product: aCharacter.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^aStream product: aCharacter</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedCollection |	tokenisedCollection := self tokensBasedOn: aCharacter.	^tokenisedCollection sum</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total</body></methods><do-it>'5-6-4-3' productSeparatedBy: $-</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd]		whileFalse: [aOrderedCollection add: (self nextLine)].	^aOrderedCollection</body></methods><do-it>test := 'thisis a test.'.read := test readStream.read lines.</do-it><do-it>test := 'thisis a test.'.read := test readStream.read lines. </do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd] whileFalse: [aOrderedCollection add: self nextLine].	^aOrderedCollection</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="nextLine">nextLine	^self upTo: Character cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount"	balance := balance + ((anAmount * 100) rounded)"self balance: self balance + 1.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount"	balance := balance + ((anAmount * 100) asInteger)"self balance: self balance + 1.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>ac := BankAccount new.</do-it><do-it>ac := BankAccount new. ac balance: 12.345</do-it><do-it>ac := BankAccount new. ac balance: 12.345.ac balance.</do-it><do-it>ac balance. </do-it><do-it>ac balance.  </do-it><do-it>ac balance.   </do-it><do-it>ac := BankAccount new. ac balance: 12.3467.ac deposit: 6.6523.ac balance.   </do-it><do-it>ac := BankAccount new. ac balance: 12.3467.ac deposit: 6.6523.ac withdrawal: 8.91.ac balance.   </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100) asFloat</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: (self balance + self balance: anAmount).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: (self balance + self balance: anAmount)</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: (self balance + self balance: anAmount)</body></methods><do-it>ac := BankAccount new.ac balance: 23.456</do-it><do-it>ac := BankAccount new.ac balance: 23.456.ac balance</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	self balance: (self balance + (self balance: anAmount))</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance:= (balance + (self balance: anAmount))</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance:= balance + ((anAmount  * 100) asInteger).</body></methods><do-it>ac := BankAccount new.ac balance: 23.456.ac deposit: 2.567.ac balance.</do-it><do-it> 26.01</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) asInteger</body></methods><do-it>ac := BankAccount new.ac balance: 23.456.ac deposit: 2.567.ac balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="name">name	^name</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aStream	Transcript show: aStream; cr.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFilename	| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd]		whileFalse: [self processLine: readStream]]valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFilename	| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFilename| writeStream |	writeStream := 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' asFilename writeStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close] 	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| writeStream |	writeStream := aFile asFilename writeStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close] 	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| writeStream |	writeStream := aFile asFilename readStream. [writeStream  nextPutAll: 'Some data';  cr; nextPutAll: 'More data']  valueNowOrOnUnwindDo: [writeStream close] 	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile| readStream |	readStream := aFile asFilename readStream. [[readStream atEnd] 	whileFalse: [Transcript show: readStream; cr]] valueNowOrOnUnwindDo: [readStream close] 	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.		[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' asFilename readStream.		[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.		[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]	"| readStream |	readStream := aFilename asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream]]		valueNowOrOnUnwindDo: [readStream close]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.		[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	^readStream	"[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'</do-it><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'</do-it><do-it>ac := BankAccount new.ac processFile: 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	^readStream nextLine	"[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'C:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\transactions.txt' </do-it><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := 'transactions.txt' asFilename readStream.	[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := 'transactions.txt' asFilename readStream.^readStream	"[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]"</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'   </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := 'transactions.txt' asFilename readStream.	[[readStream atEnd] whileFalse: 			[Transcript				show: readStream;				cr]]			valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := 'transactions.txt' asFilename readStream.	[[readStream atEnd] whileFalse: 			[Transcript				show: 'Hi';				cr]]			valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedCollection |	tokenisedCollection := self tokensBasedOn: aCharacter.	^tokenisedCollection sum</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="sumSeparatedBy:">sumSeparatedBy: aCharacter	| tokenisedCollection |	tokenisedCollection := self tokensBasedOn: aCharacter.	^tokenisedCollection sum</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="sum">sum	| total |	total := 0.	self do: [:element | total := total + element asNumber].	^total</body></methods><do-it>'5,6,4'sumSeparatedBy: $,</do-it><do-it>'5,6,4,8,0'sumSeparatedBy: $,</do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^aStream product: aCharacter</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="product:">product: aCharacter	| product |	product := 1.	[self atEnd]		whileFalse: [product := product * (self upTo: aCharacter) asNumber].	^product</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="product:">product: aCharacter	| product |	product := 1.	[self atEnd]		whileFalse: [product := product * (self upTo: aCharacter) asNumber].	^product</body></methods><remove-selector><class-id>Core.OrderedCollection</class-id> <selector>productSeparatedBy:</selector></remove-selector><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment4" selector="productSeparatedBy:">productSeparatedBy: aCharacter	| aStream |	aStream := self readStream.	^aStream product: aCharacter</body></methods><do-it>'5-6-4' productSeparatedBy:$-</do-it><do-it>'5-6-4-0' productSeparatedBy:$-</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd] whileFalse: [aOrderedCollection add: self nextLine].	^aOrderedCollection</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd] whileFalse: [aOrderedCollection add: self nextLine].	^aOrderedCollection</body></methods><do-it>test := 'thisis a test.'.read := test readStream.read nextLine.</do-it><do-it>test := 'thisis a test.'.read := test readStream.read nextLine.read nextLine.</do-it><do-it>test := 'thisis a test.'.read := test readStream.read nextLine.read nextLine.read nextLine.</do-it><do-it>test := 'thisis a test.'.read := test readStream.read lines</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd] whileFalse: [aOrderedCollection add: self nextLine].	^aOrderedCollection</body></methods><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment4" selector="lines">lines	| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	[self atEnd] whileFalse: [aOrderedCollection add: self nextLine].	^aOrderedCollection</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100) asFloat</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>cr := BankAccount new.cr balance: 23.456.cr balance</do-it><do-it>cr := BankAccount new.cr balance: 23.456.cr deposit: 3.239.cr balance</do-it><do-it> 26.68</do-it><do-it>cr := BankAccount new.cr balance: 23.456.cr deposit: 3.239.cr withdrawal: 4.679.cr balance </do-it><do-it>cr := BankAccount new.cr balance: 23.456.cr deposit: 3.239.cr withdrawal: 4.679.cr balance.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im' 'October 20, 2013' '12:09:10 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im was created at 12:09:10 AM on October 20, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im' 'October 20, 2013' '12:09:18 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im was created at 12:09:18 AM on October 20, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFile</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFileTranscript show: 'Hi' "	writeStream := aFile asFilename writeStream.	[writeStream		nextPutAll: 'some data';		cr; nextPutAll: 'more data']			valueNowOrOnwindDo: [writeS]"</body></methods><do-it>cr := BankAccount new.cr prcessFile: 'sdf'.</do-it><do-it>cr := BankAccount new.cr prcessFile: 'sdf'.</do-it><do-it>cr := BankAccount new.cr prcessFile: 'sdf'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFileTranscript show: 'Hi'."	writeStream := aFile asFilename writeStream.	[writeStream		nextPutAll: 'some data';		cr; nextPutAll: 'more data']			valueNowOrOnwindDo: [writeStream]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFile| writeStream |	Transcript show: 'Hi'.	writeStream := aFile asFilename writeStream.	[writeStream		nextPutAll: 'some data';		cr; nextPutAll: 'more data']			valueNowOrOnUnwindDo: [writeStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFile| writeStream |	writeStream := aFile asFilename writeStream.	[writeStream		nextPutAll: 'some data';		cr; nextPutAll: 'more data']			valueNowOrOnUnwindDo: [writeStream close]</body></methods><do-it>cr := BankAccount new.cr prcessFile: 'transactions.txt'</do-it><do-it>cr := BankAccount new.cr prcessFile: 'transactions.txt' </do-it><do-it>cr := BankAccount new.cr prcessFile: 'transactions.txt'  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFile| readStream |	readStream := aFile asFilename readStream.	[[readStream atEnd]		whileFalse: [Transcript show: 'disha';cr]]			valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="prcessFile:">prcessFile: aFile	| readStream |	readStream := aFile asFilename readStream.	[[readStream atEnd] whileFalse: 			[Transcript				show: 'disha';				cr]]		valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile readStream.	^readStream.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile readStream.	^readStream</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile readStream.	^readStream nextLine</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFileName readStream.	^readStream </body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	^readStream</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	^readStream lines.</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	[[readStream atEnd]		whileFalse: [self processLine: readStream nextLine]]	valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	Transcript show: aLine; cr.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	[[readStream atEnd]		whileFalse: [self processLine: readStream nextLine]]	valueNowOrOnUnwindDo: [readStream close].</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine"	Transcript show: aLine; cr."| tokenisedCollection |	tokenisedCollection := self tokensBasedOn: Character space.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space.	Transcript show: tokenisedCollection; cr.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space.	Transcript		show: tokenisedCollection;		cr</body></methods><do-it> cars := OrderedCollection new.   cars add: 'Cadillac' .  cars addFirst: 'Lexus'.   cars addLast: 'Corvette'.   cars at:1</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars addFirst: 'Lexus'.   cars addLast: 'Corvette'.   cars at:1</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars addFirst: 'Lexus'.   cars addLast: 'Corvette'.   cars at:2</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars addFirst: 'Lexus'.   cars addLast: 'Corvette'.   cars at:3</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars addFirst: 'Lexus'.   cars addLast: 'Corvette'.   cars at:1</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars addFirst: 'Lexus'.   cars addLast: 'Corvette'.   cars at:2</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars add: 'Lexus'.   cars add: 'Corvette'.   cars at:2</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space .	Transcript		show: tokenisedCollection;		cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space .	Transcript		show: tokenisedCollection asString;		cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space .	Transcript		show: tokenisedCollection printString;		cr</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space or Character tab .	Transcript		show: tokenisedCollection printString;		cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	Transcript		show: tokenisedCollection printString;		cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	Transcript		show: (tokenisedCollection at:1) printString;		cr</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	Transcript		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	Transcript		show: self;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	Transcript		show: self asString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr</body></methods><do-it> cars := OrderedCollection new.   cars add: 'Cadillac' .  cars add: 'Lexus'.   cars add: 'Corvette'.   cars at:2 </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "or Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	self balance: #(tokenisedCollection at:2)</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	self balance: 23.</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt' </do-it><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'.ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	self balance: (tokenisedCollection at:2 asNumber).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection aBalance |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aBalance := (tokenisedCollection at:2) asNumber.	self balance: aBalance.</body></methods><do-it>ac := BankAccount new.ac processFile: 'transactions.txt'.ac balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection aBalance |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aBalance := (tokenisedCollection at:2) asNumber.	self balance: aBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection aBalance aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	aBalance := (tokenisedCollection at:2) asNumber.	self balance: aBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection aBalance aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	aBalance := (tokenisedCollection at:2) asNumber.	self balance: aBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		[aMessage = 'deposit']		ifTrue: [self deposit: anAmount.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		[aMessage = #'deposit']		ifTrue: [self deposit: anAmount.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifTrue: [self deposit: anAmount.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifTrue: [^6577777777"self deposit: anAmount."]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = #'deposit'		ifTrue: [^6577777777"self deposit: anAmount."]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifTrue: [^6577777777"self deposit: anAmount."]</body></methods><do-it>cars := 'deposit 124'</do-it><do-it> cars := OrderedCollection new.   cars add: 'Cadillac' .  cars add: 'Lexus'.   cars add: 'Corvette'. (cars at:1) = 'Cadillac'ifTrue: [^'hi']</do-it><do-it>cars := OrderedCollection new.   cars add: 'Cadillac' .  cars add: 'Lexus'.   cars add: 'Corvette'. (cars at:1) asString = 'Cadillac'ifTrue: [^'hi'] </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.	^aMessage	"aMessage = 'deposit'		ifTrue: [^6577777777"self deposit: anAmount."]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.	^aMessage	"aMessage = 'deposit'		ifTrue: [^6577777777self deposit: anAmount.]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.	^(tokenisedCollection at:1) asString.	"aMessage = 'deposit'		ifTrue: [^6577777777self deposit: anAmount.]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	"aMessage := (tokenisedCollection at:1) asString."	anAmount := (tokenisedCollection at:2) asNumber.	^(tokenisedCollection at:1) asString.	"aMessage = 'deposit'		ifTrue: [^6577777777self deposit: anAmount.]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	"aMessage := (tokenisedCollection at:1) asString."	anAmount := (tokenisedCollection at:2) asNumber.	^(tokenisedCollection at:1) asString.	"aMessage asString = 'deposit'		ifTrue: [^6577777777self deposit: anAmount.]"</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im' 'October 20, 2013' '2:48:04 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im was created at 2:48:04 AM on October 20, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im' 'October 20, 2013' '2:48:26 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im was created at 2:48:26 AM on October 20, 2013."</do-it><do-it> 'deposit		34' tokensBasedOn: Character space.</do-it><do-it> 'deposit		34' tokensBasedOn: Character tab</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	"aMessage := (tokenisedCollection at:1) asString."	anAmount := (tokenisedCollection at:2) asNumber.	^(tokenisedCollection at:1) asString.	"aMessage asString = 'deposit'		ifTrue: [^6577777777self deposit: anAmount.]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	"aMessage := (tokenisedCollection at:1) asString."	anAmount := (tokenisedCollection at:2) asNumber.	^(tokenisedCollection at:1) asString.	"aMessage asString = 'deposit'		ifTrue: [^6577777777self deposit: anAmount.]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt' </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	"Transcript		show: self printString;		show: (tokenisedCollection at:1) printString;		show: (tokenisedCollection at:2) printString;		cr"	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage asString = 'deposit'		ifTrue: [^6577777777 "self deposit: anAmount."]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space "| Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage asString = 'deposit'		ifTrue: [^6577777777 "self deposit: anAmount."]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	"| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space | Character tab 	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage asString = 'deposit'		ifTrue: [^6577777777 self deposit: anAmount.]"^2345</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'   </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	"| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space | Character tab 	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage asString = 'deposit'		ifTrue: [^6577777777 self deposit: anAmount.]"^Transcript show:2345 printString; cr</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'    </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space" | Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifTrue: [Transcript show:6577777777 printString "self deposit: anAmount."]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'     </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space" | Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifFalse: [Transcript show:anAmount printString "self deposit: anAmount."]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space" | Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifTrue: [Transcript show:anAmount printString "self deposit: anAmount."]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space" | Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.		aMessage = 'deposit'		ifTrue: [self deposit: anAmount.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space" | Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.Transcript show:anAmount printString; cr.		aMessage = 'deposit'		ifTrue: [self deposit: anAmount.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment4" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	balance := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>cr := BankAccount new.cr deposit: 34.567.cr balance.</do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space" | Character tab" .	aMessage := (tokenisedCollection at:1) asString.	anAmount := (tokenisedCollection at:2) asNumber.Transcript show:anAmount printString; cr.		aMessage = 'deposit'		ifTrue: [self deposit: anAmount.].	aMessage = 'withdrawal'		ifTrue: [self withdrawal: anAmount.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	" | Character tab"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript		show: anAmount printString;		cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	" | Character tab"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance. </do-it><do-it> 'deposit  34' tokensBasedOn: Character space</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	" | Character tab"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	" | Character space"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	" | Character space"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	" | Character space"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	" | Character space"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.Transcript show: aMessage; show:anAmount; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	" | Character space"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.Transcript show: aMessage; show:anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	" | Character space"	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.Transcript show: aMessage printString; show:anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript		show: aMessage printString;		show: anAmount printString;		cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>'deposit  34' tokensBasedOn: Character space </do-it><do-it>'deposit 	 34' tokensBasedOn: Character tab </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString; cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>'deposit 		 34' tokensBasedOn: Character tab </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character space.	aMessage := (tokenisedCollection at: 1) asString.	"anAmount := (tokenisedCollection at: 2) asNumber."	Transcript show: aMessage printString; cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><do-it>'deposit		12.4' tokensBasedOn: Character tab </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	"anAmount := (tokenisedCollection at: 2) asNumber."	Transcript show: aMessage printString; cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	"aMessage := (tokenisedCollection at: 1) asString."	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: anAmount printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><do-it>'deposit		12' tokensBasedOn: Character tab </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: tokenisedCollection;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: tokenisedCollection printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: anAmount printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: (tokenisedCollection at: 2) asNumber;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: (tokenisedCollection at: 2) asNumber printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: (tokenisedCollection at: 2) printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: (tokenisedCollection at: 1) printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	"aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber."	Transcript show: (tokenisedCollection at: 1) printString;cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	"aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber."	Transcript show: (tokenisedCollection at: 1) printString; cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	"aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber."	Transcript show: (tokenisedCollection at: 2) printString; cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	"aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber."	Transcript show: (tokenisedCollection at: 3) printString; cr.	"aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]"</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><do-it>'deposit		12' tokensBasedOn:Character tab</do-it><do-it>'deposit	12' tokensBasedOn:Character tab</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	"Transcript show: (tokenisedCollection at: 3) printString; cr."	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. cr balance.</do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'. </do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance. </do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	Transcript show: aMessage printString; show: anAmount printString; cr.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><do-it>cr := BankAccount new.cr deposit: 10.23.cr deposit: 5.19.cr withdrawal: 12.63.cr balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - ((anAmount * 100) asInteger).	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>cr := BankAccount new.cr deposit: 10.23.cr deposit: 5.19.cr withdrawal: 12.63.cr balance.</do-it><do-it>15.42 - (12.63 * 100 asInteger)</do-it><do-it>15.42 - (12.63 * 100) asInteger</do-it><do-it>15.42 - ((12.63 * 100) asInteger )</do-it><do-it>1542 - ((12.63 * 100) asInteger)</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - ((anAmount * 100) asInteger).Transcript show: calcBalance printString; cr.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>cr := BankAccount new.cr deposit: 10.23.cr deposit: 5.19.cr withdrawal: 12.63.cr balance.</do-it><do-it>12.63 * 100</do-it><do-it> 1263.0</do-it><do-it>((12.63 * 100) asInteger)</do-it><do-it>1542 - ((12.63 * 100) asInteger)</do-it><do-it>1542 - ((12.63 * 100) asInteger) </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - ((anAmount * 100) asInteger).Transcript show: balance printString; cr.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - anAmount.Transcript show: balance printString; cr.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>cr := BankAccount new.cr deposit: 10.23.cr deposit: 5.19.cr withdrawal: 12.63.cr balance.</do-it><do-it>1542 - ((12.63 * 100) asInteger)</do-it><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance.</do-it><do-it>(12.63 * 100) asInteger</do-it><do-it>12.63*100 asInteger</do-it><do-it>12.63*100 asInteger / 100 asFloat</do-it><do-it>12.63*100 asInteger</do-it><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance.</do-it><do-it>cr := BankAccount new.cr deposit: 10.2345.cr balance. </do-it><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger ceiling</body></methods><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance. </do-it><do-it> 10.22</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger integerPart</body></methods><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance. </do-it><do-it>10.23*100 asInteger</do-it><do-it>10.23*100 asInteger</do-it><do-it>10.23*100 asInteger ceiling</do-it><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance.</do-it><do-it>cr := BankAccount new.cr deposit: 10.23.cr balance.</do-it><do-it>cr := BankAccount new.cr deposit: 10.24.cr balance. </do-it><do-it>cr := BankAccount new.cr deposit: 10.24.cr deposit: 5.19.cr balance.</do-it><do-it>cr := BankAccount new.cr deposit: 10.24.cr deposit: 5.19.cr balance.</do-it><do-it>cr := BankAccount new.cr deposit: 10.24.cr deposit: 5.19.cr withdrawal: 12.63.cr balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.Transcript show: balance printString; cr.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><do-it>cr := BankAccount new.cr deposit: 10.24.cr deposit: 5.19.cr withdrawal: 12.63.cr balance.</do-it><do-it>cr := BankAccount new.cr deposit: 10.24.cr deposit: 5.19.cr withdrawal: 12.63.cr deposit: 99.52.cr balance. </do-it><do-it>cr := BankAccount new.cr deposit: 10.23.cr deposit: 5.19.cr withdrawal: 12.63.cr deposit: 99.52.cr balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [ balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw'].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.		aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><component-created><name>SUnitToo</name> <type>package</type></component-created><parcel-loaded><name>SUnitToo</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'SUnitToo.pcl'))</filename></parcel-loaded><component-created><name>Weaklings</name> <type>package</type></component-created><parcel-loaded><name>Weaklings</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'Weaklings.pcl'))</filename></parcel-loaded><component-created><name>ExtraActivity</name> <type>package</type></component-created><parcel-loaded><name>ExtraActivity</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'ExtraActivity.pcl'))</filename></parcel-loaded><component-created><name>SUnitToo(ls)</name> <type>package</type></component-created><parcel-loaded><name>SUnitToo(ls)</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'SUnitTools.pcl'))</filename></parcel-loaded><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TestClassQuery</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TestClassQuery</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>#{Core.Class.TestClassQuery} removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTestResults</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTestResults</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>#{Refactory.Browser.ProtocolItemNavigatorPart.SUnitTestResults} removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TestedClassQuery</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TestedClassQuery</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>#{SUnit.TestCase.TestedClassQuery} removeFromSystem</do-it><component_selector_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.Refactory.Browser.NavigatorPart</definitionName> <meta>false</meta> <selector>allMethodDefinitionsFor:in:</selector> <definitionChange>removed</definitionChange></component_selector_change><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>private-selectors</category><body package="Browser-BaseUI" selector="allMethodDefinitionsFor:in:">allMethodDefinitionsFor: aProtocol in: class 	| selectors |	selectors := OrderedCollection new.	self inheritedClassesOf: class		do: 			[:each | 			selectors 				addAll: ((navigator environment selectorsFor: aProtocol in: each) collect: 							[:sel | 							RBMethodDefinition 								class: class								implementor: each								selector: sel])].	^selectors</body></methods><component_selector_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.Refactory.Browser.NavigatorPart</definitionName> <meta>false</meta> <selector>allProtocolsIn:</selector> <definitionChange>removed</definitionChange></component_selector_change><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="allProtocolsIn:">allProtocolsIn: aNavigatorState		| protocols class |	class := aNavigatorState selectedClass.	(class notNil		and:			[aNavigatorState objectNames size = 1				and: [aNavigatorState pundles notEmpty]])		ifTrue:			[protocols := Set new.			self				inheritedClassesOf: class				do:					[:each | protocols addAll: each organization categories	"Was self environment protocolsFor: each"]]		ifFalse: [protocols := #()].	^protocols</body></methods><component_definition_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.Refactory.Browser.SUnitTooMiniBar</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTooMiniBar</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTooMiniBar</staticKey> <definitionChange>added</definitionChange></component_static_change><component_definition_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.Refactory.Browser.SUnitTooRunDone</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTooRunDone</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTooRunDone</staticKey> <definitionChange>added</definitionChange></component_static_change><component_definition_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.TestIcons</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TestIcons</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TestIcons</staticKey> <definitionChange>added</definitionChange></component_static_change><component_definition_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.Refactory.Browser.SUnitTooProgressOverlay</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTooProgressOverlay</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SUnitTooProgressOverlay</staticKey> <definitionChange>added</definitionChange></component_static_change><component_definition_change><name>SUnitToo(ls)</name> <type>parcel</type><definitionName>Root.Smalltalk.Refactory.Browser.AllTestsStatus</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>AllTestsStatus</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>AllTestsStatus</staticKey> <definitionChange>added</definitionChange></component_static_change><component-unloaded><name>SUnitToo(ls)</name> <type>parcel</type></component-unloaded><component-unloaded><name>SUnitToo(ls)</name> <type>package</type></component-unloaded><component-created><name>SUnitToo(ls)</name> <type>package</type></component-created><parcel-loaded><name>SUnitToo(ls)</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'SUnitTools.pcl'))</filename></parcel-loaded><class><name>StringTest</name><environment>Core</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Collections-Text</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>StringTest</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>StringTest</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Core.StringTest removeFromSystem</do-it><class><name>StringTest</name><environment>Core</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Collections-Text</package></attributes></class><do-it>Core.StringTest removeFromSystem</do-it><class><name>StringTest</name><environment>Core</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Collections-Text</package></attributes></class><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	self assert: ('5, 6, 4' sumSeparatedBy: $,) = 120</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	| test |	test := '5, 6, 4'.	self assert: (test sumSeparatedBy: $,) = 120</body></methods><do-it>'5, 6, 4' sumSeparatedBy: $,</do-it><do-it> 15</do-it><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	| test |	test := '5, 6, 4'.	self assert: (test sumSeparatedBy: $,) = 15</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	| test1 test2 |	test1 := '5, 6, 4'.	self assert: (test1 sumSeparatedBy: $,) = 15.	test2 := '0- 0- 9.9'.	self assert: (test2 sumSeparatedBy: $-) = 9.9.</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 |	test1 := '5-6-4'.	self assert: (test1 sumSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 sumSeparatedBy: $,) = 0.</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 |	test1 := '5-6-4'.	self assert: (test1 sumSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 sumSeparatedBy: $,) = 0.0.</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 |	test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0.</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	| test1 test2 |	test1 := '5, 6, 4'.	self assert: (test1 sumSeparatedBy: $,) = 15.	test2 := '0-0-9.9'.	self assert: (test2 sumSeparatedBy: $-) = 9.9.</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0.	test3 := '4.6, 1.234, -8'.	self assert: (test3 productSeparatedBy: $,) = -45.4112</body></methods><do-it>'4.6, 1.234, -8' productSeparatedBy: $,</do-it><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '4.6, 1.234, -8'.	self assert: (test3 productSeparatedBy: $,) = -45.4112</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, 1.1'.	self assert: (test3 productSeparatedBy: $,) = 1.21</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, 1.1'.	self assert: (test3 productSeparatedBy: $,) = 1.21</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, 1.123'.	self assert: (test3 productSeparatedBy: $,) = 1.2353</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, 1.123'.	self assert: (test3 productSeparatedBy: $,) = 1.2353</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, 1.12'.	self assert: (test3 productSeparatedBy: $,) = 1.23</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, 1.1'.	self assert: (test3 productSeparatedBy: $,) = 1.21</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	"test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0."	test3 := '1.1, -1.1'.	self assert: (test3 productSeparatedBy: $,) = -1.21</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0.	test3 := '1.1, -1.1'.	self assert: (test3 productSeparatedBy: $,) = -1.21</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testProductSeparatedBy">testProductSeparatedBy	| test1 test2 test3 |	test1 := '5-6-4'.	self assert: (test1 productSeparatedBy: $-) = 120.	test2 := '0, 0, 9.9'.	self assert: (test2 productSeparatedBy: $,) = 0.0.	test3 := '1.1, -1.1'.	self assert: (test3 productSeparatedBy: $,) = -1.21</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	| test1 test2 |	test1 := '5, 6, 4'.	self assert: (test1 sumSeparatedBy: $,) = 15.	test2 := '0-0-9.9'.	self assert: (test2 sumSeparatedBy: $-) = 9.9</body></methods><methods><class-id>Core.StringTest</class-id> <category>tests</category><body package="Collections-Text" selector="testSumSeparatedBy">testSumSeparatedBy	| test1 test2 test3 |	test1 := '5, 6, 4'.	self assert: (test1 sumSeparatedBy: $,) = 15.	test2 := '0-0-9.9'.	self assert: (test2 sumSeparatedBy: $-) = 9.9.	test3 := '1.2, -2.3, 7'.	self assert: (test3 sumSeparatedBy: $,) = 5.9</body></methods><class><name>StreamTest</name><environment>Core</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Collections-Streams</package></attributes></class><comment><class-id>Core.StreamTest</class-id><body>testNextLine	test := 'this	is	a test.'.	read := test readStream.	read nextLine.</body></comment><comment><class-id>Core.StreamTest</class-id><body>""</body></comment><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	read nextLine.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	read nextLine</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'this'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.read nextLine.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.read nextLine.	self assert: (read nextLine) = 'a test'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'this	is	a test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: (read nextLine) = 'this'.	self assert: (read nextLine) = 'is'.</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read nextLine = 'this'.	self assert: read nextLine = 'is'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Collections-Streams" selector="testNextLine">testNextLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read nextLine = 'this'.	self assert: read nextLine = 'is'.	self assert: read nextLine = 'a test.'</body></methods><component_definition_change><name>Collections-Streams</name> <type>package</type><definitionName>Root.Smalltalk.Core.StreamTest</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.StreamTest</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Collections-Streams</name> <type>package</type><definitionName>Root.Smalltalk.Core.StreamTest</definitionName> <meta>false</meta> <selector>testNextLine</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.StreamTest</definitionName> <meta>false</meta> <selector>testNextLine</selector> <definitionChange>added</definitionChange></component_selector_change><component_definition_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.StringTest</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.StringTest</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.StringTest</definitionName> <meta>false</meta> <selector>testSumSeparatedBy</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.StringTest</definitionName> <meta>false</meta> <selector>testSumSeparatedBy</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.StringTest</definitionName> <meta>false</meta> <selector>testProductSeparatedBy</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.StringTest</definitionName> <meta>false</meta> <selector>testProductSeparatedBy</selector> <definitionChange>added</definitionChange></component_selector_change><do-it>test := 'thisisa test.'.read := test readStream.read lines </do-it><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read line = #('this' 'is' 'a test.') </body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read line = #('this' 'is' 'a test.')</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read line = #('this' 'is' 'a test.')</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines = #('this' 'is' 'a test.')</body></methods><do-it>#('23' '35' 'yy')</do-it><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines = ('this','is','a test.')</body></methods><do-it>10.23*100 asInteger</do-it><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines =  'OrderedCollection (''this'' ''is'' ''a test.'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines =   'OrderedCollection (''this'' ''is'' ''a test.'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines = 'OrderedCollection ("this" "is" "a test.")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines = 'OrderedCollection ("this")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines = 'OrderedCollection ("this")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines = 'OrderedCollection (''this'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines = 'OrderedCollection (''this'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines = 'OrderedCollection ("this" "is" "a test")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines = 'OrderedCollection ("this" "is" "a test.")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines = 'OrderedCollection ("this")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines = 'OrderedCollection (''this'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines = 'OrderedCollection (''this'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines printString = 'OrderedCollection ("this")'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'this'.	read := test readStream.	self assert: read lines printString = 'OrderedCollection (''this'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisis'.	read := test readStream.	self assert: read lines printString = 'OrderedCollection (''this'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisis'.	read := test readStream.	self assert: read lines printString = 'OrderedCollection (''this'' ''is'')'</body></methods><methods><class-id>Core.StreamTest</class-id> <category>tests</category><body package="Assignment4" selector="testLine">testLine	| test read |	test := 'thisisa test.'.	read := test readStream.	self assert: read lines printString = 'OrderedCollection (''this'' ''is'' ''a test.'')'</body></methods><class><name>BankAccountTest</name><environment>Core</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment4</package></attributes></class><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBankAccount">testBankAccount	| account |	account := BankAccount</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBankAccount">testBankAccount	</body></methods><do-it>cr:= BankAccount new.cr name: 'Jack' balance:0.</do-it><do-it>cr:= BankAccount new.cr name: 'Jack' balance:0. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment4" selector="name:balance:">name: aName balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aName.	aAccount balance: (aBalance * 100) rounded.	^aAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment4" selector="name:balance:">name: aName balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aName.	aAccount balance: aBalance.	^aAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger</body></methods><do-it>cr:= BankAccount name: 'AA' balance:0</do-it><do-it>cr:= BankAccount name: 'AA' balance:12.34.cr balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance">balance	^(balance / 100) asFloat</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="balance:">balance: anObject	balance := (anObject * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="deposit:">deposit: anAmount	balance := balance + (anAmount * 100) asInteger</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="name">name	^name</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]		valueNowOrOnUnwindDo: [readStream close]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^'[ERROR] : Cant withdraw']</body></methods><do-it>cr:= BankAccount name: 'AA' balance:12.34.cr name.</do-it><do-it>cr:= BankAccount name: 'AA' balance:12.34.cr deposit: 10.23.cr balance.</do-it><do-it>cr:= BankAccount name: 'AA' balance:12.34.cr deposit: 10.22.cr balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBalance">testBalance	|test|	test:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test balance) = 12.34</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testName">testName	|test|	test:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test name) = 'Scott'</body></methods><remove-selector><class-id>Core.BankAccountTest</class-id> <selector>testBankAccount</selector></remove-selector><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBalance">testBalance	|test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test1 balance) = 12.34.	test2 := BankAccount new.	self assert: (test2 balance) = 0</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBalance">testBalance	|test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test1 balance) = 12.34.	test2 := BankAccount new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	|test1 |	test1:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test1 deposit: 23.34) =  35.68"	test2 := BankAccount new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 |	test1:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test1 deposit: 23.34) =  35.68"	test2 := BankAccount new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 |	test1:= BankAccount name: 'Scott' balance:12.3474.	self assert: (test1 deposit: 10.22) =  22.56"	test2 := BankAccount new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34"</body></methods><do-it>cr:= BankAccount name: 'AA' balance:12.3474.cr deposit: 10.22.cr balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56"	test2 := BankAccount new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56.	test2 := BankAccount new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	"test2 balance: 12.3474.	self assert: (test2 balance) = 12.34"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56.	test2 := BankAccount new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56.	test2 := BankAccount new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22.	</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdraw">testWithdraw	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12"	test2 := BankAccount new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdraw">testWithdraw	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	test2 withdrawal: 10.222.	self assert: (test2 balance) = 0."	test2 deposit: 23.	self assert: (test2 balance) = 33.22."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdraw">testWithdraw	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	test2 withdrawal: 10.222.	self assert: (test2 balance) = 0.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance. </do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testProcessFile">testProcessFile	| test1 |	test1:= BankAccount name: 'Scott' balance:0.	test1 processFile: 'transactions.txt'.	self assert: (test1 balance) =  102.31.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	test2 withdrawal: 10.222.	self assert: (test2 balance) = 0.</body></methods><remove-selector><class-id>Core.BankAccountTest</class-id> <selector>testWithdraw</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment4" selector="initialize">initialize	super initialize.	name := nil.	balance := 0.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Cant withdraw the amount' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Cant withdraw the amount. Balance is :'balance ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Cant withdraw the amount. Balance is :'self balance ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Cant withdraw the amount. Balance is :',self balance ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Cant withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil	ifFalse: [	[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]		valueNowOrOnUnwindDo: [readStream close]]	ifTrue: [^self error:'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.</do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' | aMessage = 'withdrawal'ifFalse:[	aMessage = 'deposit' ifTrue: [self deposit: anAmount].	aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]]ifTrue:[^self error: 'Invalid instruction in file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	(aMessage = 'deposit' | aMessage) = 'withdrawal'		ifFalse: 			[aMessage = 'deposit' ifTrue: [self deposit: anAmount].			aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]]		ifTrue: [^self error: 'Invalid instruction in file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	(aMessage = 'deposit') | (aMessage= 'withdrawal')		ifFalse: 			[aMessage = 'deposit' ifTrue: [self deposit: anAmount].			aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]]		ifTrue: [^self error: 'Invalid instruction in file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	(aMessage = 'deposit') | (aMessage= 'withdrawal')		ifTrue: 			[aMessage = 'deposit' ifTrue: [self deposit: anAmount].			aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]]		ifFalse: [^self error: 'Invalid instruction in file']</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.</do-it><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'.cr balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	(aMessage = 'deposit') | (aMessage= 'withdrawal')		ifTrue: 			[aMessage = 'deposit' ifTrue: [self deposit: anAmount].			aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]]		ifFalse: [^self error: 'Invalid instruction in the file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	"test2 := BankAccount new.	test2 withdrawal: 10.222.	self assert: (test2 balance) = 0."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	test2 withdrawal: 10.222.	self assert: (test2 balance) = 0.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	self assert: (test2 withdrawal: 10.222) = test2 error.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	self assert: (test2 withdrawal: 10.222) = (test2 error:'Can not withdraw the amount exceeding the available balance.')</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	self assert: (test2 withdrawal: 10.222) = test2 error.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im' 'October 20, 2013' '7:26:30 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im was created at 7:26:30 PM on October 20, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im' 'October 20, 2013' '7:26:41 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment4_1.im was created at 7:26:41 PM on October 20, 2013."</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.	self assert: (test2 withdrawal: 10.222) = (test2 isMemberOf: Error).</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 anObject |	test1:= BankAccount name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount new.anObject := test2 withdrawal: 10.222.	self assert: (anObject isMemberOf: Error).</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 anObject |	test1 := BankAccount name: 'Scott' balance: 12.3474.	test1 withdrawal: 10.22.	self assert: test1 balance = 2.12.	test2 := BankAccount new.	anObject := test2 withdrawal: 10.222.	self assert: (anObject isMemberOf: Error)</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 anObject |	test1 := BankAccount name: 'Scott' balance: 12.3474.	test1 withdrawal: 10.22.	self assert: test1 balance = 2.12.	test2 := BankAccount new.	anObject := test2 withdrawal: 10.222.	self assert: (anObject isNil)</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 |	test1 := BankAccount name: 'Scott' balance: 12.3474.	test1 withdrawal: 10.22.	self assert: test1 balance = 2.12.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 |	test1 := BankAccount name: 'Scott' balance: 12.34.	test1 withdrawal: 10.22.	self assert: test1 balance = 2.12.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testName">testName	|test|	test:= BankAccount name: 'Scott' balance:12.34.	self assert: (test name) = 'Scott'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.34.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56.	test2 := BankAccount new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.34.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56.	test2 := BankAccount new.	test2 deposit: 10.22.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBalance">testBalance	|test1 test2 |	test1:= BankAccount name: 'Scott' balance:12.34.	self assert: (test1 balance) = 12.34.	test2 := BankAccount new.	self assert: (test2 balance) = 0.	test2 balance: 12.34.	self assert: (test2 balance) = 12.34</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testProcessFile">testProcessFile	| test1 |	test1:= BankAccount name: 'Scott' balance:0.	test1 processFile: 'transactions.txt'.	self assert: (test1 balance) =  93.31.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close. Transcript show: 'in cleanup' printString;cr]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>cr := BankAccount new.cr processFile: 'transactions.txt'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment4" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><component-created><name>Assignment5</name> <type>package</type></component-created><component-created><name>Assignment5</name> <type>package</type></component-created><component-property><name>Assignment5</name> <type>package</type><property>comment</property> <value>'""'</value></component-property><class><name>Currency</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Currency</class-id><body>""</body></comment><class><name>Currency</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Currency</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Currency</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Currency removeFromSystem</do-it><class><name>Currency</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment5" selector="amount">amount	^amount</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	amount := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Currency</class-id><body>""</body></comment><do-it>'1.0' asNumber</do-it><do-it>Currency class organization addCategory: #'from String'</do-it><methods><class-id>Currency class</class-id> <category>from String</category><body package="Assignment5" selector="fromString:">fromString: aString	self amount: aString asNumber * 100 asInteger.</body></methods><methods><class-id>Currency class</class-id> <category>from String</category><body package="Assignment5" selector="fromString:">fromString: aString	| aCurrency |	aCurrency := Currency new.	aCurrency amount: aString asNumber * 100 asInteger.	^aCurrency.</body></methods><do-it>a := Currency fromString: '1.00'.</do-it><do-it>Currency organization addCategory: #printing</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: $a , self name , ''''.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: $$ , self amount , ''''.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: '$' , self amount , ''''.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: 'sd' , self amount , ''''.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: $s , self amount , ''''.	^aStream contents</body></methods><do-it>a := Currency fromString: '1.00'.a amount</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  self amount , ''''.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  self amount.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  (self amount).	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  $a, (self amount).	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  'a''', (self amount).	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  'a''', self amount.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  'sdf'.	^aStream contents</body></methods><do-it>a := Currency fromString: '1.00'.a printString</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  self amount.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll:  self amount printString.	^aStream contents</body></methods><do-it>a := Currency fromString: '1.00'.a printString </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: '$', self amount printString.	^aStream contents</body></methods><do-it>a := Currency fromString: '1.00'.a printString</do-it><methods><class-id>Currency class</class-id> <category>from String</category><body package="Assignment5" selector="fromString:">fromString: aString	| aCurrency |	aCurrency := Currency new.	aCurrency amount: aString.	^aCurrency.</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject asNumber * 100 asInteger</body></methods><do-it>a := Currency fromString: '1.00'.</do-it><do-it>a := Currency fromString: '1.00'.a printString </do-it><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject * 100 asInteger</body></methods><methods><class-id>Currency class</class-id> <category>from String</category><body package="Assignment5" selector="fromString:">fromString: aString	| aCurrency |	aCurrency := Currency new.	aCurrency amount: aString asNumber.	^aCurrency.</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment5" selector="amount">amount	^amount/100 asFloat</body></methods><do-it>a := Currency fromString: '1.00'.a printString</do-it><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment5" selector="amount">amount	^(amount/100) asFloat</body></methods><do-it>a := Currency fromString: '1.00'.a printString </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: '$' , self amount printString.	^aStream contents</body></methods><remove-selector><class-id>Currency class</class-id> <selector>fromString:</selector></remove-selector><do-it>Currency class organization removeCategory: #'from String'</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromString:">fromString: aString	| aCurrency |	aCurrency := Currency new.	aCurrency amount: aString asNumber.	^aCurrency.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromString:">fromString: aString	| aCurrency |	aCurrency := Currency new.	aCurrency amount: aString asNumber.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromNumber:">fromNumber: aNumber	| aCurrency |	aCurrency := Currency new.	aCurrency amount: aNumber.	^aCurrency</body></methods><do-it>a := Currency fromNumber: 1.00.a printString </do-it><do-it>Currency organization addCategory: #arithmetic</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	| result |	result := Currency new.	result amount: self amount + aCurrency amount.	^result.</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := a +b.c printString.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	| result |	result := Currency new.	result amount: self amount + aCurrency amount.	^result</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="-">- aCurrency	| resultCurrency |	resultCurrency := Currency new.	resultCurrency amount: self amount - aCurrency amount.	^resultCurrency</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	| resultCurrency |	resultCurrency := Currency new.	resultCurrency amount: self amount + aCurrency amount.	^resultCurrency</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := a +b.c printString. </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.c printString.  </do-it><do-it>Currency organization addCategory: #comparing</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;">&lt; aCurrency 	"Answer whether the receiver is less than the argument."	^self amount &lt; aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.c &lt; a.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.a &lt; c. </do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;">&lt; aCurrency	^self amount &lt; aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;">&gt; aCurrency	^self amount &gt; aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.a &gt; c</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.c &gt; a</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;=">&gt;= aCurrency	^self amount &gt;= aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.c&gt;=a</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;=">&lt;= aCurrency	^self amount &lt;= aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;=">&lt;= aCurrency	^self amount &lt;= aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;">&lt; aCurrency	^self amount &lt; aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;=">&lt;= aCurrency	^self amount &lt;= aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;">&gt; aCurrency	^self amount &gt; aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;=">&gt;= aCurrency	^self amount &gt;= aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="=">= aCurrency	^self amount = aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="=">= aCurrency	^self amount = aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="~=">~= aCurrency	^self amount = aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.c=a.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.c~=a. </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c=d.  </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c printString</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.d printString</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = d</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="~=">~= aCurrency	^self amount ~= aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c ~= a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c ~= d</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="~=">~= aCurrency	^(self amount) ~= (aCurrency amount)</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c ~= d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c ~= a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c ~= d</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c ~= c</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = c </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = d</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im' 'November 8, 2013' '9:09:33 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im was created at 9:09:33 PM on November 8, 2013."</do-it><component_definition_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processLine:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processLine:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processFile:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processFile:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>name:balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>name:balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>balance</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>balance</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name Currency </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><do-it>Currency organization addCategory: #converting</do-it><do-it>Currency organization removeCategory: #converting</do-it><component_definition_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asByteString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asByteString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&lt;=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&lt;=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&gt;=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&gt;=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>runLengthFor:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>runLengthFor:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&gt;</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&gt;</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>gcCopyToHeapUnicode</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>gcCopyToHeapUnicode</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asFourByteString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asFourByteString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asTwoByteString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asTwoByteString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>decodeAsLiteralArray</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>decodeAsLiteralArray</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>sameAs:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>sameAs:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>concreteString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>concreteString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>printOn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>printOn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>literalArrayEncoding</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>literalArrayEncoding</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>convertToByteArray</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>convertToByteArray</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>isByteIndexed</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>isByteIndexed</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>stringEncoding</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>stringEncoding</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeap:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeap:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>changeFrom:to:with:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>changeFrom:to:with:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>string</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>string</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asByteArrayEncoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asByteArrayEncoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>hash</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>hash</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asCStringEncoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asCStringEncoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>gcCopyToHeapEncoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>gcCopyToHeapEncoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeap:encoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeap:encoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeapUnicode</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeapUnicode</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>stringhash</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>stringhash</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>isString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>isString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>indexOfSubCollection:startingAt:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>indexOfSubCollection:startingAt:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asText</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asText</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asByteArray</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asByteArray</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeap16Encoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeap16Encoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>storeOn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>storeOn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>refersToLiteral:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>refersToLiteral:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>printString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>printString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>compare:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>compare:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>storeString</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>storeString</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asWordArray</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asWordArray</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>gcCopyToHeap16Encoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>gcCopyToHeap16Encoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asParagraph</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asParagraph</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>isLiteral</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>isLiteral</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>hasChangeOfEmphasis</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>hasChangeOfEmphasis</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>concreteIndexFor:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>concreteIndexFor:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>expectedPrintStringSize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>expectedPrintStringSize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>trueCompare:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>trueCompare:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeapEncoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>copyToHeapEncoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&lt;</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>&lt;</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>baseCType</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>baseCType</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromIntegerArray:encoding:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromIntegerArray:encoding:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>defaultPlatformClass:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>defaultPlatformClass:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>encodingType</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>encodingType</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>newInFixedSpace:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>newInFixedSpace:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>primitiveArgumentClass</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>primitiveArgumentClass</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromString:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromString:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>defaultPlatformClass</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>defaultPlatformClass</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>new:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>new:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>needsSafeRebinding</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>needsSafeRebinding</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>readFrom:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>readFrom:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromIntegerArray:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromIntegerArray:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromBytes:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>fromBytes:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>defaultImplementor</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>defaultImplementor</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>isByteIndexed</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>true</meta> <selector>isByteIndexed</selector> <definitionChange>added</definitionChange></component_selector_change><component_static_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <staticKey>DefaultClassForPlatform</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <staticKey>DefaultClassForPlatform</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>Collections-Text</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <staticKey>PrimitiveArgumentClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <staticKey>PrimitiveArgumentClass</staticKey> <definitionChange>added</definitionChange></component_static_change><component_selector_change><name>Tools-Inspector</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>inspectorClass</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>inspectorClass</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>PackageCategories</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>namesMetaClass</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>namesMetaClass</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>PackageCategories</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>metaclassDisplayStringSuffix</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>metaclassDisplayStringSuffix</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>PackageCategories</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>fullMetaName</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>fullMetaName</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>PackageCategories</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>classNameOnly</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>classNameOnly</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>PackageCategories</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asClassNameOnly</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asClassNameOnly</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>GlorpExtensions</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>glorpPrintSQLOn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>glorpPrintSQLOn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>GlorpExtensions</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>likePattern:from:sourceStart:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>likePattern:from:sourceStart:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>GlorpExtensions</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>glorpIsCollection</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>glorpIsCollection</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>GlorpExtensions</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>like:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>like:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>productSeparatedBy:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>productSeparatedBy:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>sumSeparatedBy:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>sumSeparatedBy:</selector> <definitionChange>added</definitionChange></component_selector_change><methods><class-id>Core.String</class-id> <category>comparing</category><body package="Assignment5" selector="asCurrency">asCurrency	^Currency fromString: self</body></methods><do-it>f:='1.00' asCurrency</do-it><methods><class-id>Core.String</class-id> <category>converting</category><body package="Assignment5" selector="asCurrency">asCurrency	^Currency fromString: self</body></methods><methods><class-id>Core.String</class-id> <category>converting</category><body package="Assignment5" selector="asCurrency">asCurrency	^Currency fromString: self</body></methods><do-it>f:='23.34'asCurrency</do-it><methods><class-id>Core.Number</class-id> <category>converting</category><body package="Assignment5" selector="asCurrency">asCurrency	^Currency fromNumber: self</body></methods><do-it>f:=23.5 asCurrency</do-it><do-it>f:=23.5 asCurrency </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im' 'November 9, 2013' '1:09:58 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im was created at 1:09:58 PM on November 9, 2013."</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: aAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount:0. </body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount:anAmount.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount: anAmount.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromNumber:">fromNumber: aNumber	^Currency newAmount: aNumber</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromString:">fromString: aString	^Currency newAmount: aString asNumber</body></methods><do-it>a := Currency fromString: '1.00'.</do-it><do-it>b := Currency fromNumber: 2.12.</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount: anAmount.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromString:">fromString: aString	^Currency newAmount: aString asNumber</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="fromNumber:">fromNumber: aNumber	^Currency newAmount: aNumber</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &lt;= d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &gt;= d  </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &gt;= d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &lt;= d  </do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;=">&gt;= aCurrency	^(self amount) &gt;= (aCurrency amount)</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &gt;= d  </do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;=">&gt;= aCurrency	^(self amount) &gt;= (aCurrency amount)</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &gt;= d   </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c amount </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.d amount  </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c amount  </do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="=">= aCurrency	^self amount == aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c amount</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = d</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="=">= aCurrency	^(self amount) = (aCurrency amount)</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = b</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c = c</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c amount</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.d amount </do-it><do-it>2.12 asCurrency</do-it><do-it>'2.12' asCurrency</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.d printString</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&lt;=">&lt;= aCurrency	^(self amount &gt; aCurrency amount)not</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &lt;= d</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12.c := b - a.d := Currency fromNumber:1.12.c &lt;= a</do-it><do-it>b := Currency fromNumber: 2.1456.</do-it><do-it>b := Currency fromNumber: 2.1456. b amount</do-it><do-it>a:='1.00' asCurrency</do-it><do-it>a:=2.12 asCurrency </do-it><do-it>a:= '1.00' asCurrency.</do-it><do-it>a:= '1.00' asCurrency.b:=2.12 asCurrency.sum := 2.12 asCurrency.c:=a+b.sum=c.</do-it><do-it>Currency organization addCategory: #private</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount">amount	^(amount/100) asFloat</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject * 100 asInteger</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := (anObject * 100) asInteger</body></methods><do-it>b := Currency fromNumber: 2.1456. </do-it><do-it>b := Currency fromNumber: 2.1456. </do-it><do-it>b := Currency fromNumber: 2.146. </do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="&gt;=">&gt;= aCurrency	^(self amount &lt; aCurrency amount) not</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. c := b - a.d := Currency fromNumber:1.12.c &gt;= a </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. c := b - a.d := Currency fromNumber:1.12.c &gt;= d</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. c := b - a.d := Currency fromNumber:1.12.c &lt;d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. c := b - a.d := Currency fromNumber:2.12.b=d</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. c := b - a.d := Currency fromNumber:2.12.b&gt;=d</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. c := b - a.d := Currency fromNumber:2.12.b&lt;=d </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:2.12.c := b + a.sum = c.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.sum = c.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.sum printString</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c printString </do-it><class><name>CurrencyTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testCurrency">testCurrency |a|a:='1.00' asCurrency.</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	| resultCurrency |	resultCurrency := Currency new.	resultCurrency amount: (self amount) + (aCurrency amount).	^resultCurrency</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c printString.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.a printString</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.b printString</do-it><do-it>b := Currency fromNumber: 2.12. </do-it><do-it>b := Currency fromNumber: 2.12. b amount</do-it><do-it> 2.11</do-it><do-it>2.12 * 100 asInteger</do-it><do-it>2.12 * 100 asInteger / 100 asFloat</do-it><do-it>b := Currency fromString: '2.12'. b amount </do-it><do-it>b := Currency fromString: '2.12'. b amount.</do-it><do-it>b := Currency fromString: '2.13'. b amount.</do-it><do-it>b := Currency fromString: '2.14'. b amount. </do-it><do-it>b := Currency fromString: '2.15'. b amount. </do-it><do-it>b := Currency fromString: '2.11'. b amount.  </do-it><do-it>2.12 * 100 asInteger /100 asFloat</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount">amount	^amount/100 asFloat</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject * 100 asInteger</body></methods><do-it>b := Currency fromString: '2.11'. b amount.   </do-it><do-it>b := Currency fromString: '2.12'. b amount.   </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c = sum</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &gt;= sum</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &lt;= sum</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &lt;= a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &gt;= a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &gt; a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &lt; a</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.a &lt; c</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.a &gt; c</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c &gt; a</do-it><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="~=">~= aCurrency	^(self amount = aCurrency amount)not</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c ~= a </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c ~= sum</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im' 'November 9, 2013' '2:34:19 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im was created at 2:34:19 PM on November 9, 2013."</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	| resultCurrency |	resultCurrency := Currency new.	resultCurrency amount: self amount + aCurrency amount.	^resultCurrency</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	| resultCurrency |	resultCurrency := Currency new.	resultCurrency amount: self amount + aCurrency amount.	^resultCurrency</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment5" selector="=">= aCurrency	^self amount = aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.c = sum</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: $$ , self amount printString.	^aStream contents</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printString">printString	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	aStream nextPutAll: '$' , self amount printString.	^aStream contents</body></methods><do-it>$$</do-it><do-it>'$'</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount: anAmount.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount: anAmount.	^aCurrency</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.a amount:23</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency beImmutable.	aCurrency amount: anAmount.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := Currency new.	aCurrency amount: anAmount.	aCurrency beImmutable.	^aCurrency</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="-">- aCurrency	^Currency newAmount: self amount - aCurrency amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b + a.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 2.12. sum := Currency fromNumber:3.12.c := b - a.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment5" selector="+">+ aCurrency	^Currency newAmount: self amount + aCurrency amount</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	amount := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	amount := 0.	^self</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	amount := 0.	^self</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	amount := 0.	^self</body></methods><do-it>((2.12*100)asInteger/100)asFloat</do-it><do-it>2.12*100</do-it><do-it>(2.12*100) asInteger</do-it><do-it>(2.12*100) asInteger </do-it><do-it>2.12*100 asInteger</do-it><do-it>2.12*100 asInteger</do-it><do-it>2.12*100</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount">amount	^(amount/100) asFloat</body></methods><do-it>b := Currency fromNumber: 2.12.</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := (anObject * 100) asInteger</body></methods><do-it>b := Currency fromNumber: 2.12.</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := (anObject * 100) asInteger</body></methods><do-it>a := BankAccount new.a balance:2.12.a balance</do-it><do-it>a := BankAccount new.a balance:2.23.a balance </do-it><do-it>a := BankAccount new.a balance:10.23.a balance  </do-it><do-it>b := Currency fromNumber: 10.23. </do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject * 100 asInteger</body></methods><do-it>b := Currency fromNumber: 10.23. </do-it><do-it>10.23 * 100 asInteger</do-it><do-it>10.23 * 100 </do-it><do-it>(10.23 * 100)asInteger</do-it><do-it>(10.23 * 100 asInteger)asInteger</do-it><do-it>10.23 * 100 asInteger</do-it><do-it> 1023.0</do-it><do-it>(10.23 * 100 asInteger) asInteger</do-it><do-it>(10.23 * 100 asInteger) asNumber</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream nextPutAll: '$' , self amount printString</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 10.23.  sum := Currency fromNumber:3.12.sum printString</do-it><do-it>$$</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream nextPutAll: '$' , self amount printString</body></methods><do-it>b := Currency fromNumber: 10.23.  </do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 10.23. sum := Currency fromNumber:3.12.sum printString</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im' 'November 9, 2013' '7:00:16 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im was created at 7:00:16 PM on November 9, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im' 'November 9, 2013' '7:13:54 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5.im was created at 7:13:54 PM on November 9, 2013."</do-it><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><initialize><class-id>Core.String</class-id></initialize><component_definition_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processLine:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processLine:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>name:balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processFile:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processFile:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>name:balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>name:balance:</selector> <definitionChange>added</definitionChange></component_selector_change><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #balance under: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #balance: under: #private</do-it><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance">balance	^balance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance">balance	^balance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	balance := Currency newAmount: anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	balance := Currency newAmount: anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	name := aName.	balance := Currency newAmount:aBalance.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + anAmount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	name := nil.	balance := Currency newAmount:0.	^self</body></methods><do-it>BankAccount organization addCategory: #accessing</do-it><do-it>BankAccount classifySymbol: #initialize under: #accessing</do-it><do-it>BankAccount organization addCategory: #'initialize-release'</do-it><do-it>BankAccount classifySymbol: #initialize under: #'initialize-release'</do-it><do-it>a:= BankAccount name:'roger' balance:12.</do-it><do-it>a:= BankAccount name:'roger' balance:12.a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance amount + anAmount.</body></methods><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23.</do-it><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23.a balance. </do-it><do-it> 22.23</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := ((balance amount) + anAmount)</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_1.im' 'November 9, 2013' '11:34:03 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_1.im was created at 11:34:03 PM on November 9, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_1.im' 'November 9, 2013' '11:34:10 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_1.im was created at 11:34:10 PM on November 9, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	balance := balance amount: anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	| aBankAccount |	aBankAccount := BankAccount new.	name := aName.	balance := Currency newAmount:aBalance.	^aBankAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	name := aName.	balance := Currency newAmount:aBalance.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	name := aName.	balance := Currency newAmount: aBalance.	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aName.	aAccount balance: (Currency newAmount: aBalance).	^aAccount</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := (anObject * 100) asInteger</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment5" selector="amount:">amount: anObject	amount := anObject * 100 asInteger</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>name:balance:</selector></remove-selector><remove-selector><class-id>Currency</class-id> <selector>printString</selector></remove-selector><do-it>a := Currency fromString: '1.00'</do-it><do-it>a := Currency fromString: '1.00'.a printString</do-it><do-it>a := Currency fromString: '1.00'.a amount</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance		|anAccount|	anAccount := BankAccount new.	anAccount name: aName.	anAccount balance: (Currency newAmount: aBalance).	^anAccount</body></methods><do-it>a := Currency fromString: '1.00'.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream nextPutAll: 'A' , self amount printString</body></methods><do-it>a := Currency fromString: '1.00'.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream nextPutAll: '$' , self amount printString</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber:34.56.c:= a+b.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber:34.56.c:= a+b.c amount. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new		^self shouldNotImplement</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	^self shouldNotImplement</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance		| balance |	name := aName.	balance := (Currency newAmount: aBalance).	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance			| balance |	name := aName.	balance := (Currency newAmount: aBalance).	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	| balance |	name := aName.	balance := (Currency newAmount: aBalance).	^self</body></methods><do-it>1234567.89s2 printFormat: '$#,###.00;[RED]($#,###.00);$0.00'</do-it><do-it>b := BankAccount name:'hehe' balance:12.</do-it><do-it>b := BankAccount name:'hehe' balance:12.</do-it><do-it>b := BankAccount name:'hehe' balance:12.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	"name := aName.	balance := Currency newAmount:aBalance.	^self"	|anAccount|	anAccount := BankAccount new.	anAccount name: aName.	anAccount balance: (Currency newAmount: aBalance) .	^anAccount</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>name:balance:</selector></remove-selector><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="name:balance:">name: aName balance: aBalance	"name := aName.	balance := Currency newAmount:aBalance.	^self"	|anAccount|	anAccount := BankAccount new.	anAccount name: aName.	anAccount balance: (Currency newAmount: aBalance) .	^anAccount</body></methods><do-it>a := Currency fromString: '1.00'.</do-it><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 10.23. sum := Currency fromNumber:3.12.c := a +b.</do-it><do-it>a:= BankAccount name:'roger' balance:12.</do-it><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23.</do-it><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23. a balance. </do-it><remove-selector><class-id>Currency</class-id> <selector>printString</selector></remove-selector><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 10.23. sum := Currency fromNumber:3.12.c := a +b.sum printString </do-it><do-it>2.12 *100 asInteger.</do-it><do-it>(2.12 *100) asInteger. </do-it><do-it>2.12 *100</do-it><do-it>a:=2.12 *100. a asInteger</do-it><do-it>a:=2.12 *100. b:=a asInteger</do-it><do-it>a:=2.12 *100.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := calcBalance := balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance amount - (anAmount * 100) asInteger.	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + Currency fromNumber: anAmount."	balance := ((balance amount) + anAmount)"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + (Currency fromNumber: anAmount)."	balance := ((balance amount) + anAmount)"</body></methods><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23. </do-it><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23. a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + (Currency fromNumber: anAmount).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (Currency newAmount: anAmount).	calcBalance &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (Currency newAmount: anAmount).	calcBalance amount &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (Currency newAmount: anAmount).	(calcBalance amount) &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><do-it>a:= BankAccount name:'roger' balance:12.a deposit:10.23. a withdrawal: 2.23.a balance.</do-it><remove-selector><class-id>Core.BankAccount</class-id> <selector>name:balance:</selector></remove-selector><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:balance:">newName: aName balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aName.	aAccount balance: aBalance.	^aAccount</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>name:balance:</selector></remove-selector><do-it>a:= BankAccount newName:'roger' balance:12.</do-it><do-it>a:= BankAccount newName:'roger' balance:12. a deposit:10.23. </do-it><do-it>a:= BankAccount newName:'roger' balance:12. a deposit:10.23. a withdrawal: 2.23.a balance.</do-it><do-it>a printString</do-it><do-it>d printString </do-it><do-it>'t' printString  </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream nextPutAll: '$' ;		print: self amount.</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: self amount</body></methods><do-it>a := Currency fromString: '1.00'.b := Currency fromNumber: 10.23. sum := Currency fromNumber:3.12.c := a +b.sum printString </do-it><do-it>(2.12 * 100 asInteger) asInteger</do-it><do-it>(2.12 * 100 asInteger) </do-it><do-it>(2.12 * 100 asInteger) asInteger</do-it><do-it>212.0 asInteger</do-it><do-it>a := 2.12 * 100.a := a asInteger</do-it><do-it>a := 2.12 * 100.</do-it><do-it>2.1245 * 100 asInteger</do-it><do-it>a:= BankAccount newName:'roger' balance:12. a deposit:10.23. a withdrawal: 2.23.a withdrawal: 5.a balance.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: self amount.</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: self amount</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_1.im' 'November 11, 2013' '3:35:17 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_1.im was created at 3:35:17 PM on November 11, 2013."</do-it><initialize><class-id>Currency</class-id></initialize><initialize><class-id>Currency</class-id></initialize><initialize><class-id>Currency</class-id></initialize><initialize><class-id>Currency</class-id></initialize><initialize><class-id>Currency</class-id></initialize><initialize><class-id>Currency</class-id></initialize><class><name>Customer</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Customer</class-id> <category>accessing</category><body package="Assignment5" selector="name">name	^name</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="Assignment5" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="Assignment5" selector="type">type	^type</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="Assignment5" selector="type:">type: anObject	type := anObject</body></methods><methods><class-id>Customer</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	type := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Customer class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Customer</class-id><body>""</body></comment><methods><class-id>Customer class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:">newName: aName type: aType</body></methods><methods><class-id>Customer class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:">newName: aName type: aType	|aCustomer|	aCustomer := Customer new.	aCustomer name: aName.	aCustomer type: aType.	^aCustomer.</body></methods><methods><class-id>Customer class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:">newName: aName type: aType	| aCustomer |	aCustomer := Customer new.	aCustomer name: aName.	aCustomer type: aType.	^aCustomer</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>name</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>name</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>customer balance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="name">name	^customer</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer">customer	^customer</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>name</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customerName:type:">customerName: aName type: aType	^Customer newName: aName type: aType.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newCustomer:balance:">newCustomer: aCustomer balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aCustomer.	aAccount balance: aBalance.	^aAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount customerName: aName type: aType.	aAccount balance: aBalance.	^aAccount</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>newCustomer:balance:</selector></remove-selector><do-it>a:= BankAccount newName:'roger' type:'normal' balance:12. </do-it><do-it>a:= BankAccount newName:'roger' type:'normal' balance:12. a customer</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_2.im' 'November 11, 2013' '11:48:55 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_2.im was created at 11:48:55 PM on November 11, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_2.im' 'November 11, 2013' '11:49:03 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_2.im was created at 11:49:03 PM on November 11, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| aAccount |	aAccount := BankAccount new.	aAccount customerName: aName type: aType.	aAccount balance: aBalance.	^aAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| aAccount |	aAccount := BankAccount new.	aAccount customer: (Customer newName:aName type: aType).	aAccount balance: aBalance.	^aAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer:">customer: aCustomer	^customer := aCustomer.</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>customerName:type:</selector></remove-selector><do-it>a := BankAccount newName:'haha' type:'normal' balance:12.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 13.a balance. </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 13.78.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 13.78.a customer.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 13.78.a customer name.</do-it><do-it> 'haha'</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 13.78.a customer type</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (Currency newAmount: anAmount).	self isValidWithdrawal: calcBalance.	"(calcBalance amount) &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [^self error:'Can not withdraw the amount exceeding the available balance.' ]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (Currency newAmount: anAmount).	self isValidWithdrawal: calcBalance.	(calcBalance amount) &lt; 0		ifFalse: [balance := calcBalance]		ifTrue: [self isValidWithdrawal:calcBalance]	" [^self error:'Can not withdraw the amount exceeding the available balance.' ]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: aBalance	| aType |	aType := self customer type.	aType = 'normal'	ifTrue: [ balance := balance - 5 asCurrency.			^self error:'Can not withdraw the amount exceeding the available balance.' ].	aType = 'preferred'	ifTrue: [ balance &gt; -1000 asCurrency].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: aBalance	| aType |	aType := self customer type.	aType = 'normal'		ifTrue: 			[balance := balance - 5 asCurrency.			^self				error: 'Can not withdraw the amount exceeding the available balance.'].	aType = 'preferred' ifTrue: [balance &gt; -1000 asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: aBalance	| aType |	aType := self customer type.	aType = 'normal'		ifTrue: 			[self cancelWithdrawal].	aType = 'preferred' ifTrue: [balance &gt; -1000 asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	balance := balance - 5 asCurrency.			^self				error: 'Can not withdraw the amount exceeding the available balance.'</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	balance := balance - 5 asCurrency.	^self		error: 'Can not withdraw the amount exceeding the available balance.'</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: aBalance	| aType |	aType := self customer type.	aType = 'normal'		ifTrue: 			[self cancelWithdrawal].	aType = 'preferred' 		ifTrue: [self preferredWithdrawal: aBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: aBalance	balance &gt; -1000 asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: aBalance	aBalance &gt; -1000 asCurrency	ifTrue: [].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'normal'		ifTrue: 			[self cancelWithdrawal].	aType = 'preferred' 		ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency	ifTrue: [].</body></methods><do-it>-1001 &gt; -1000</do-it><do-it>-1000 &gt; -1000 </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency	ifTrue: [balance := calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency	ifTrue: [balance := calcBalance]	ifFalse: [^self error:'Can not withdraw the amount exceeding the available balance.' ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [balance := calcBalance]		ifFalse: 			[^self				error: 'Can not withdraw the amount exceeding the available balance.']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [balance := calcBalance]		ifFalse: 			[^self				error: 'Can not withdraw the amount exceeding the limit.']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (Currency newAmount: anAmount).	self isValidWithdrawal: calcBalance.	calcBalance &lt; 0 asCurrency		ifFalse: [balance := calcBalance]		ifTrue: [self isValidWithdrawal:calcBalance]	" [^self error:'Can not withdraw the amount exceeding the available balance.' ]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (anAmount asCurrency).	self isValidWithdrawal: calcBalance.	calcBalance &lt; 0 asCurrency		ifFalse: [balance := calcBalance]		ifTrue: [self isValidWithdrawal:calcBalance]	" [^self error:'Can not withdraw the amount exceeding the available balance.' ]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (anAmount asCurrency).	self isValidWithdrawal: calcBalance.	calcBalance &lt; 0 asCurrency		ifFalse: [balance := calcBalance]		ifTrue: [self isValidWithdrawal:calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance :=  balance  - (anAmount asCurrency).	self isValidWithdrawal: calcBalance.	calcBalance &lt; 0 asCurrency		ifFalse: [balance := calcBalance]		ifTrue: [self isValidWithdrawal:calcBalance].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := balance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [balance := calcBalance]		ifTrue: [self isValidWithdrawal: calcBalance]</body></methods><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 3.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 23.a balance. </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 24.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 24.a balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	balance := balance - 5 asCurrency.	"^self		error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 12.a withdrawal: 25.a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + anAmount asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	balance := balance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [balance := calcBalance]		"ifFalse: 			[^self				error: 'Can not withdraw the amount exceeding the limit.']"</body></methods><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 12.a withdrawal: 2.a balance. </do-it><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 12.a withdrawal: 24.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 12.a withdrawal: 25.a balance.   </do-it><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 13.a withdrawal: 1000.a balance.    </do-it><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 13.a withdrawal: 1024.a balance.     </do-it><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 13.a withdrawal: 1025.a balance.     </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [balance := calcBalance]		ifFalse: 			[self cancelWithdrawal]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	balance := balance - 5 asCurrency.	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType		aType = 'normal'  	ifTrue: [ balance := balance - 5 asCurrency.]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType		aType = 'normal'  	ifTrue: [ balance := balance - 5 asCurrency].	aType = 'preferred'	ifTrue: [balance := balance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'normal' ifTrue: [balance := balance - 5 asCurrency].	aType = 'preferred' ifTrue: [balance := balance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'normal'		ifTrue: 			[self cancelWithdrawal: aType].	aType = 'preferred' 		ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [balance := calcBalance]		ifFalse: 			[self cancelWithdrawal: 'preferred']</body></methods><do-it>a := BankAccount newName:'haha' type:'preferred' balance:12. a deposit: 13.a withdrawal: 1025.a balance.      </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 25.a balance.      </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 27.a balance.      </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_3.im' 'November 12, 2013' '12:43:25 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_3.im was created at 12:43:25 PM on November 12, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_3.im' 'November 13, 2013' '12:12:56 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_3.im was created at 12:12:56 AM on November 13, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_3.im' 'November 13, 2013' '12:13:04 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_3.im was created at 12:13:04 AM on November 13, 2013."</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>balance</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>balance</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>customer totalBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>customer totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance">balance	^totalBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := Currency newAmount: anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="availableBalance">availableBalance	^availableBalance</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:balance:">newName: aName balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aName.	aAccount balance: aBalance.	aAccount availableBalance: aBalance.	^aAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="availableBalance:">availableBalance: anObject	availableBalance := Currency newAmount: anObject</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:balance:">newName: aName balance: aBalance		|aAccount|	aAccount := BankAccount new.	aAccount name: aName.	aAccount balance: aBalance.	aAccount availableBalance: aBalance.	^aAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := BankAccount new.	anAccount customer: (Customer newName:aName type: aType).	anAccount balance: aBalance.	anAccount availableBalance: aBalance.	^anAccount</body></methods><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	totalBalance := totalBalance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	totalBalance := totalBalance + anAmount asCurrency</body></methods><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	totalBalance := totalBalance + anAmount asCurrency.</body></methods><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 25.a balance.      </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 25.a balance.     </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 24.a balance.     </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 27.a balance.      </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a withdrawal: 27.a balance.      </do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 13.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'normal' balance:12. a deposit: 14.a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self balance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [self balance: calcBalance]		ifTrue: [self isValidWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	self balance: self balance - 5 asCurrency.	"^self		error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'normal' ifTrue: [self balance: self balance - 5 asCurrency].	aType = 'preferred' ifTrue: [self balance: self balance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal'		ifTrue: 			[self cancelWithdrawal: aType].	aType = 'Preferred' 		ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [self balance = calcBalance]		ifFalse: 			[self cancelWithdrawal: 'preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [self balance = calcBalance]		ifFalse: 			[self cancelWithdrawal: 'Preferred']</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_4.im' 'November 13, 2013' '12:51:07 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_4.im was created at 12:51:07 PM on November 13, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_4.im' 'November 13, 2013' '12:51:18 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_4.im was created at 12:51:18 PM on November 13, 2013."</do-it><do-it>a:= Currency fromString:'1.00'.</do-it><do-it>a:= Currency fromString:'1.00'.</do-it><do-it>a:= 2.34 asCurrency.</do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. </do-it><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := anObject asCurrency</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. </do-it><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := Currency newAmount: anObject.</body></methods><do-it>a := Currency newAmount:12.b:= 12 asCurrency.c:= Currency fromString: '34'</do-it><do-it>a := Currency newAmount:12.b:= 12 asCurrency.c:= Currency fromString: '34'.c := a+b.</do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. </do-it><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := anObject asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := (anObject asCurrency).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + (anAmount asCurrency).</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	totalBalance := totalBalance + anAmount asCurrency.	"self balance: self balance + (anAmount asCurrency)."</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. a deposit: 13.</do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. a deposit: 13. </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12. a deposit: 13. a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := anObject asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := anObject.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + (anAmount asCurrency).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + anAmount asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + (anAmount asCurrency).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: (self balance + (anAmount asCurrency))</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	| temp |	temp := anAmount asCurrency.	self balance: self balance + temp</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: (self balance) + (anAmount asCurrency).</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: totalBalance + anAmount asCurrency</body></methods><do-it>'$12' replaceFrom: 1 to:0 with:''.</do-it><do-it>'$12' replaceFrom: 1 to:0 with:''. </do-it><do-it>Timestamp</do-it><do-it>Timestamp now</do-it><do-it>'$12'asCurrency.</do-it><do-it>'$12' changeFrom: 1 to:0 with:''.</do-it><do-it>'$12' changeFrom: 1 to:0 with:'hi'.</do-it><do-it>'$12' changeFrom: 2 to:0 with:''.</do-it><do-it>'$12' changeFrom: 1 to:2 with:''.</do-it><do-it> '2'</do-it><do-it>'$12' changeFrom: 1 to:2 with:''. </do-it><do-it>'$12' changeFrom:1 to:2 with:''.  </do-it><do-it>'$12345' changeFrom:1 to:2 with:''.  </do-it><do-it>'$12345' changeFrom:1 to:0 with:''.   </do-it><do-it>'$12345' changeFrom:1 to:1 with:''. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := BankAccount new.	anAccount customer: (Customer newName:aName type: aType).		anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := BankAccount new.	anAccount customer: (Customer newName:aName type: aType).		anAccount balance: aBalance.	anAccount availableBalance: aBalance.	^anAccount</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12 </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := anObject asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="balance:">balance: anObject	totalBalance := anObject.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := BankAccount new.	anAccount customer: (Customer newName:aName type: aType).		anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance.	^anAccount</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a deposit: 13.</do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a deposit: 13.a balance.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := BankAccount new.	anAccount customer: (Customer newName:aName type: aType).		anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance asCurrency.	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="availableBalance:">availableBalance: anObject	availableBalance := anObject</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>newName:balance:</selector></remove-selector><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a deposit: 13.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 11.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 12.a balance. </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 13.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 14.a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	 self balance: self balance - 5 asCurrency.	^self		error: 'Can not withdraw the amount exceeding the available balance: ',self balance.</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 14.a balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal'		ifTrue: 			[self cancelWithdrawal: aType.			Transcript show:'isValidtransaction' printString].	aType = 'Preferred' 		ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 14.a balance. </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 14.a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal'		ifTrue: 			[self cancelWithdrawal: aType].			aType = 'Preferred' 		ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal' ifTrue: [self balance: self balance - 5 asCurrency].	aType = 'Preferred' ifTrue: [self balance: self balance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><do-it>a := BankAccount newName:'haha' type:'Normal' balance:12.a withdrawal: 14.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a withdrawal: 1.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a withdrawal: 1000.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a withdrawal: 1012.a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	 self balance: self balance - 5 asCurrency.	"^self		error: 'Can not withdraw the amount exceeding the available balance: ',self balance."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	self balance: self balance - 5 asCurrency	"^self		error: 'Can not withdraw the amount exceeding the available balance: ',self balance."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal' ifTrue: [self balance: self balance - 5 asCurrency].	aType = 'Preferred' ifTrue: [self balance: self balance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer">customer	^customer</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer:">customer: aCustomer	^customer := aCustomer</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	"totalBalance := totalBalance + anAmount asCurrency."	self balance: self balance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>name:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [self balance = calcBalance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processFile:">processFile: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processLine:">processLine: aLine	| tokenisedCollection anAmount aMessage |	tokenisedCollection := aLine tokensBasedOn: Character tab.	aMessage := (tokenisedCollection at: 1) asString.	anAmount := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' | (aMessage = 'withdrawal')		ifTrue: 			[aMessage = 'deposit' ifTrue: [self deposit: anAmount].			aMessage = 'withdrawal' ifTrue: [self withdrawal: anAmount]]		ifFalse: [^self error: 'Invalid instruction in the file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self balance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [self balance: calcBalance]		ifTrue: [self isValidWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFile	| readStream |	readStream := aFile asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testProcessFile">testProcessFile	| test1 |	test1:= BankAccount name: 'Scott' balance:0.	test1 transactionsFrom: 'transactions.txt'.	self assert: (test1 balance) =  102.31.</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>processFile:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>BankAccount class organization addCategory: #accessing</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processLine: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processTransaction: readStream nextLine]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a transactionsFrom: 'transactions.txt'</do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a transactionsFrom: 'transactions.txt'.a balance.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.transactions := SortedCollection new.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [self processTransaction: readStream nextLine.				self processTransaction]]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection new.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: 					[self processTransaction: readStream nextLine.					self processTransaction]]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection new.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: 					[transactions add: readStream nextLine.					self processTransaction]]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection new.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: 					[transactions add: readStream nextLine].				self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection new.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	^transactions</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	^transactions contents</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	^transactions </body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	^transactions contents</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im' 'November 13, 2013' '11:47:36 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im was created at 11:47:36 PM on November 13, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im' 'November 13, 2013' '11:47:43 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im was created at 11:47:43 PM on November 13, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	Transcript show: transactions contents.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	Transcript show: transactions.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	Transcript show: transactions asString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	Transcript show: transactions printString.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processFile:">processFile: transactions	Transcript show: transactions printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection new.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processFile: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>processTransaction:</selector></remove-selector><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processFile:">processFile: transactions	transactions do: [:each | self processTransaction: each].	"Transcript show: transactions printString."</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transaction	Transcript show: transaction printString.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>'1253	10.15.2013 17:30	NewAccount	Roger	Whitney	Normal	250.13' tokensBasedOn: Character tab</do-it><do-it>temp:='1253	10.15.2013 17:30	NewAccount	Roger	Whitney	Normal	250.13' tokensBasedOn: Character tab.temp size.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transaction	"Transcript show: transaction printString."</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processFile:">processFile: transactions	transactions do: [:each | self processTransaction: each].</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: aTransaction	| tokenisedCollection transactionID transactionTimestamp aMessage |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	transactionID := (tokenisedCollection at: 1) asInteger.	transactionTimestamp := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' | (aMessage = 'withdrawal')	"Transcript show: transaction printString."</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: aTransaction	"| tokenisedCollection transactionID transactionTimestamp aMessage |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	transactionID := (tokenisedCollection at: 1) asInteger.	transactionTimestamp := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' | (aMessage = 'withdrawal')"	"Transcript show: aTransaction printString."</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: aTransaction	"| tokenisedCollection transactionID transactionTimestamp aMessage |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	transactionID := (tokenisedCollection at: 1) asInteger.	transactionTimestamp := (tokenisedCollection at: 2) asNumber.	aMessage = 'deposit' | (aMessage = 'withdrawal')"	Transcript show: aTransaction printString.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: aTransaction	| tokenisedCollection transactionType |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	transactionType := (tokenisedCollection at: 3) asString.	transactionType = 'NewAccount'		ifTrue: [self processNewAccount].	transactionType = 'Deposit'		ifTrue: [self processDeposit].	transactionType = 'Withdrawal'		ifTrue: [self processWithdrawal: aTransaction].	transactionType = 'Cancel'		ifTrue: [self processCancel: aTransaction].</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: aTransaction	| tokenisedCollection transactionType |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	transactionType := (tokenisedCollection at: 3) asString.	transactionType = 'NewAccount'		ifTrue: [self processNewAccount: aTransaction].	transactionType = 'Deposit'		ifTrue: [self processDeposit: aTransaction].	transactionType = 'Withdrawal'		ifTrue: [self processWithdrawal: aTransaction].	transactionType = 'Cancel'		ifTrue: [self processCancel: aTransaction].</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processWithdrawal:">processWithdrawal: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCancel:">processCancel: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCancel:">processCancel: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processWithdrawal:">processWithdrawal: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	Transcript show: tokenisedCollection printString.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| tokenisedCollection |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	name := (tokenisedCollection at: 4) asString.	Transcript show: tokenisedCollection printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| tokenisedCollection customerType amount |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	name := (tokenisedCollection at: 4) asString.	customerType := (tokenisedCollection at: 5) asString.	amount := (tokenisedCollection at: 6) asNumber.	Transcript show: tokenisedCollection printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| tokenisedCollection customerType amount anAccount |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	name := (tokenisedCollection at: 4) asString.	customerType := (tokenisedCollection at: 5) asString.	amount := (tokenisedCollection at: 6) asNumber.	anAccount := BankAccount newName: name type: customerType balance: amount.	Transcript show: tokenisedCollection printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| tokenisedCollection customerType amount |	tokenisedCollection := aTransaction tokensBasedOn: Character tab.	name := (tokenisedCollection at: 4) asString.	customerType := (tokenisedCollection at: 5) asString.	amount := (tokenisedCollection at: 6) asNumber.	^BankAccount newName: name type: customerType balance: amount.	"	Transcript show: tokenisedCollection printString."</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>12.23 * 100 asInteger.</do-it><do-it>(12.23 * 100) asInteger.</do-it><do-it>(2.12 * 100) asInteger.</do-it><do-it>(12.12 * 100) asInteger.</do-it><do-it>(2.12 * 100) asInteger. </do-it><do-it>(2.12 * 100) </do-it><do-it>(2.12 * 100)  asInteger</do-it><do-it>(12.23 * 100)  asInteger</do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a transactionsFrom: 'transactions.txt'.a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self balance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [self balance: calcBalance.				self availableBalance: calcBalance]		ifTrue: [self isValidWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal">cancelWithdrawal	self balance: self balance - 5 asCurrency.	self availableBalance: self balance.	"^self		error: 'Can not withdraw the amount exceeding the available balance: ',self balance."</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>cancelWithdrawal</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal' ifTrue: [self balance: self balance - 5 asCurrency.							self availableBalance: self balance.].	aType = 'Preferred' ifTrue: [self balance: self balance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal' ifTrue: [self balance: self balance - 5 asCurrency.							self availableBalance: self balance.].	aType = 'Preferred' ifTrue: [self balance: self balance - 3 asCurrency.							self availableBalance: self balance.]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: [self balance = calcBalance.				self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: 			[self balance = calcBalance.			self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt; -1000 asCurrency		ifTrue: 			[self balance: calcBalance.			self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal: 12.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal: 25.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal: 26.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:1025.a balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: calcBalance.			self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:1025.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:1024.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:1026.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:25.a withdrawal:10.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:25.a withdrawal:25.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:25.a withdrawal:26.a balance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:25.a withdrawal:26.a availableBalance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Normal' balance:25.a withdrawal:25.a availableBalance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:25.a availableBalance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:1025.a availableBalance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a withdrawal:1026.a availableBalance.  </do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:25.a transactionsFrom: 'transactions.txt'.a balance.</do-it><do-it>a := BankAccount newName:'haha' type:'Preferred' balance:12.a transactionsFrom: 'transactions.txt'.a balance.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im' 'November 14, 2013' '4:17:57 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im was created at 4:17:57 PM on November 14, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [self balance: calcBalance.				self availableBalance: calcBalance]		ifTrue: [self isValidWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [self balance: self balance - anAmount asCurrency.				self availableBalance: calcBalance]		ifTrue: [self isValidWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal' ifTrue: [self balance: self balance - 5 asCurrency.							self availableBalance: self availableBalance - 5 asCurrency.].	aType = 'Preferred' ifTrue: [self balance: self balance - 3 asCurrency.							self availableBalance: self availableBalance - 3 asCurrency.]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal'		ifTrue: 			[self balance: self balance - 5 asCurrency.			self availableBalance: self availableBalance - 5 asCurrency].	aType = 'Preferred'		ifTrue: 			[self balance: self balance - 3 asCurrency.			self availableBalance: self availableBalance - 3 asCurrency]	"^self error: 'Can not withdraw the amount exceeding the available balance.'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal'		ifTrue: 			[self balance: self balance - 5 asCurrency.			self availableBalance: self availableBalance - 5 asCurrency].	aType = 'Preferred'		ifTrue: 			[self balance: self balance - 3 asCurrency.			self availableBalance: self availableBalance - 3 asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal'		ifTrue: 			[self balance: self balance - 5 asCurrency.			self availableBalance: self availableBalance - 5 asCurrency].	aType = 'Preferred'		ifTrue: 			[self balance: self balance - 3 asCurrency.			self availableBalance: self availableBalance - 3 asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: calcBalance	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: calcBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: calcBalance	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: calcBalance.			self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im' 'November 14, 2013' '4:35:50 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im was created at 4:35:50 PM on November 14, 2013."</do-it><do-it>(2.12 *100)asInteger</do-it><do-it>(2.12 *100)asInteger </do-it><do-it>(10.23 *100)asInteger </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im' 'November 15, 2013' '12:50:58 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im was created at 12:50:58 AM on November 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im' 'November 15, 2013' '12:51:06 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_5.im was created at 12:51:06 AM on November 15, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: [:a :b| |timestamp1 timestamp2|		timestamp1 := Timestamp readFromDateAndTime:((a tokensBasedOn: Character tab) at:2).		timestamp2 := Timestamp readFromDateAndTime:((b tokensBasedOn: Character tab) at:2).		timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| timestamp1 timestamp2 |					timestamp1 := Timestamp								readFromDateAndTime: ((a tokensBasedOn: Character tab) at: 2).					timestamp2 := Timestamp								readFromDateAndTime: ((b tokensBasedOn: Character tab) at: 2).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	^transactions contents</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := a tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2).					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := a tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2)readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2)readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	^Transcript show: transactions printString</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := a tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	transactions do: [:aTransaction | | transaction transactionType|			transaction := transactions tokensBasedOn: Character tab.			transactionType := transaction at:3]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	transactions do: [:aTransaction | | transaction transactionType|			transaction := transactions tokensBasedOn: Character tab.			transactionType := transaction at:3.			Transcript show: transactionType]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			Transcript show: transactionType]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			transactionType = 'NewAccount'				ifTrue: [ anAccount := self processNewAccount: transaction]]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount |	aTransaction at:1.	name := aTransaction at:4.	customerType := aTransaction at:5.	amount := aTransaction at:6.	^BankAccount newName: name type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at:4.	customerType := aTransaction at:5.	amount := aTransaction at:6.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at:4.	customerType := aTransaction at:5.	amount := aTransaction at:6.	"^BankAccount newName: customerName type: customerType balance: amount."	Transcript show: customerName printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at:4.	customerType := aTransaction at:5.	amount := aTransaction at:6.	"BankAccount newName: customerName type: customerType balance: amount."	Transcript show: customerName printString.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at:4.	customerType := aTransaction at:5.	amount := aTransaction at:6.	"BankAccount newName: customerName type: customerType balance: amount."	Transcript show: customerType printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := aTransaction at: 6.	"BankAccount newName: customerName type: customerType balance: amount."	Transcript show: customerType printString</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := aTransaction at: 6.	"BankAccount newName: customerName type: customerType balance: amount."	Transcript show: amount printString</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt' </do-it><do-it>'$12' changeFrom: 1 to:1 with:''.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := (aTransaction at: 6) changeFrom:1 to:1 with:''.	"BankAccount newName: customerName type: customerType balance: amount."	Transcript show: amount printString</body></methods><do-it>'$12' changeFrom: 1 to:1 with:''. '12'</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'  </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	"BankAccount newName: customerName type: customerType balance: amount."	Transcript show: amount printString</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'  </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im' 'November 15, 2013' '7:16:30 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im was created at 7:16:30 PM on November 15, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			transactionType = 'NewAccount'				ifTrue: [ anAccount := self processNewAccount: transaction]].	^anAccount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransaction: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := (self processTransaction: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processNewAccount:">processNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.	</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'   </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a balance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer name.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer type</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			transactionType = 'NewAccount'				ifTrue: [ anAccount := self processNewAccount: transaction]].			anAccount = nil				ifTrue: []				ifFalse: [Transcript show: 'in false'printString].	^anAccount.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			transactionType = 'NewAccount'				ifTrue: [ anAccount := self processNewAccount: transaction]].			anAccount = nil				ifTrue: [^self error:'Can not process file. NewAccount transaction not found']				ifFalse: [].	^anAccount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			transactionType = 'NewAccount'				ifTrue: [ anAccount := self processNewAccount: transaction]].			anAccount = nil				ifFalse: [^self error:'Can not process file. NewAccount transaction not found']				ifTrue: [].	^anAccount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: [:aTransaction | | transaction transactionType|			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at:3.			transactionType = 'NewAccount'				ifTrue: [ anAccount := self processNewAccount: transaction]].			anAccount = nil				ifTrue: [^self error:'Can not process file. NewAccount transaction not found']				ifFalse: [].	^anAccount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: [self balance: self balance - anAmount asCurrency.				self availableBalance: calcBalance]		ifTrue: [self isValidWithdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: anAmount	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: calcBalance.			self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: self balance - anAmount asCurrency.			self availableBalance: self balance]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].	anAccount = nil		ifTrue: 			[^self error: 'Can not process file. NewAccount transaction not found']		ifFalse: 			[transactionType = 'Deposit'				ifTrue: [anAccount := anAccount processDeposit: transaction]].	].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount processDeposit: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: transaction</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aTransaction</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aTransaction</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>amount</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>amount</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>customerType</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>customerType</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>customerName</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>customerName</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: transaction	| depositType |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: [amount := (aTransaction at: 5) asCurrency.			].	customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: [amount := (aTransaction at: 5) asCurrency.			self deposit: amount].	^self	"customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := (aTransaction at: 5) asCurrency.			self deposit: amount].	^self	"customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount].	^self	"customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount."</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount].	^self	</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount processDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processWithdrawal:">processWithdrawal: aTransaction	| amount |	amount := ((aTransaction at: 4) changeFrom:1 to:1 with:'') asNumber.	self withdrawal: amount.	^self</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance.  </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance.   </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im' 'November 15, 2013' '11:09:21 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im was created at 11:09:21 PM on November 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im' 'November 15, 2013' '11:09:28 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im was created at 11:09:28 PM on November 15, 2013."</do-it><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.Stream</definitionName> <meta>false</meta> <selector>nextLine</selector> <definitionChange>added</definitionChange></component_selector_change><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="Assignment5" selector="nextLine">nextLine	^self upTo: Character cr</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount.			^self].	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount.			^self].	depositType = 'Check'			ifTrue: [ ]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount timestamp |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[timestamp := aTransaction at: 2]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.a  balance. </do-it><do-it>Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)</do-it><do-it>(Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im' 'November 17, 2013' '1:13:58 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im was created at 1:13:58 AM on November 17, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im' 'November 17, 2013' '1:14:09 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_6.im was created at 1:14:09 AM on November 17, 2013."</do-it><do-it>Timestamp now.</do-it><do-it>Timestamp now printString</do-it><do-it>Timestamp now</do-it><do-it>pc := PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.(pc formatStringFor:Timestamp now) string.</do-it><do-it>(Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days</do-it><do-it>timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.(pc formatStringFor:timestamp) string.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[self processDepositCheck: aTransaction.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays |	numberOfDays := (aTransaction at: 5) asNumber.	numberOfDays = 0		ifTrue: 			[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			^self]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[			self deposit: amount.			^self]		ifFalse:			[].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '(aTransaction at: 1)', newTimestamp].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := (aTransaction at: 1), Character tab,newTimestamp].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := (aTransaction at: 1), Character tab,newTimestamp.			Transcript show: newTransaction printString.].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := (aTransaction at: 1), Character tab, newTimestamp, Character tab, 'Deposi', Character tab, 'Check', Character tab, newNumberOfDays, Character tab, amount.			Transcript show: newTransaction printString.].</body></methods><do-it>a := '12' asString.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			"newTransaction := (aTransaction at: 1), Character tab, newTimestamp, Character tab, 'Deposi', Character tab, 'Check', Character tab, newNumberOfDays, Character tab, amount."			Transcript show: newTimestamp printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			"newTransaction := (aTransaction at: 1), Character tab, newTimestamp, Character tab, 'Deposi', Character tab, 'Check', Character tab, newNumberOfDays, Character tab, amount."			Transcript show: newNumberOfDays printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>string := 'a' ,'&lt;t&gt;', 'b'.</do-it><do-it> 'a&lt;t&gt;b'</do-it><do-it>'Variables are:&lt;nt&gt;Var1=&lt;1p&gt;&lt;nt&gt;Var2=&lt;2p&gt;'  expandMacrosWithArguments: #(11 22). </do-it><do-it>a := 12. b:=45 .'Variables are:&lt;nt&gt;Var1=&lt;1p&gt;&lt;nt&gt;Var2=&lt;2p&gt;'  expandMacrosWithArguments: #(a b).  </do-it><do-it>count := 1. 'There &lt;1#is:are&gt; &lt;1p&gt; apple&lt;1#:s&gt; in the box' expandMacrosWith: count. </do-it><do-it>count := 2. 'There &lt;1#is:are&gt; &lt;1p&gt; apple&lt;1#:s&gt; in the box' expandMacrosWith: count. </do-it><do-it>a:=12.b:=23.'Variables are:&lt;nt&gt;Var1=&lt;1p&gt;&lt;nt&gt;Var2=&lt;2p&gt;' expandMacrosWith: a with:b</do-it><do-it>a := 12 .b:=45 .string := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;' expandMacrosWith: a with:b. Transcript show: string printString.</do-it><do-it>a := 0.b:=1.c:=2.d:=3.e:=4.f:=5.string := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;' expandMacrosWith: a with:b with:c.Transcript show: string printString. </do-it><do-it>a := 0.b:=1.c:=2.d:=3.e:=4.f:=5.string := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;' expandMacrosWith: a with:b with:c with:d.Transcript show: string printString.  </do-it><do-it>a := 0.b:=1.c:=2.d:=3.e:=4.f:=5.string := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: a with:b with:c with:d.string:= '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: string with:e with:f.Transcript show: string printString. </do-it><do-it>Transcript clear.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) with: newTimestamp with:'Deposit' with:'Check'.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount.			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) with: newTimestamp with:'Deposit' with:'Check'.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with:'Deposit' with:'Check'.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with:'Deposit' asString with:'Check' asString.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with:'Deposit' asString with:'Check' asString.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTimestamp printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with:'Deposit' asString with:'Check' asString.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTransaction printString.].</body></methods><do-it>a := 'hi'.b:='opps'.string:= '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWith: a with:b.Transcript show: string printString.</do-it><do-it>Transcript clear.</do-it><do-it>a := 'hi' asString</do-it><do-it>a := 'hi' asString. b:='opps'.string:= '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWith: a with:b.Transcript show: string printString. </do-it><do-it>a := 'hi'. b:='opps'.string:= '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWith: a asNumber with:b.Transcript show: string printString. </do-it><do-it>timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.(pc formatStringFor:timestamp).</do-it><do-it>timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.(pc formatStringFor:timestamp) string.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;Depost&lt;t&gt;Check'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays with: amount asNumber.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:amount."			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays with: amount asNumber.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:(aTransaction at: 6)."			Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := 'hi'. b:='opps'.string:= '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWith: a asNumber with:b.Transcript show: string printString.</do-it><do-it>a := 'hi'. b:='opps'.string:= ('&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWithArguments: #(a b) ) asString.Transcript show: string printString. </do-it><do-it>a := 'hi'. b:='opps'.string:= ('&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWithArguments: #('hy' 'hi') ) asString.Transcript show: string printString.  </do-it><do-it>Transcript clear.</do-it><do-it>a := 'hi'. b:='opps'.string:= ('&lt;1p&gt;&lt;t&gt;&lt;2p&gt;'expandMacrosWithArguments: #('hy' 'hi') ) asString.Transcript show: string printString.   </do-it><do-it>('Hello &lt;2s&gt;.&lt;n&gt;There are &lt;1p&gt; &lt;3?apples:oranges&gt; in the basket'  expandMacrosWithArguments: #(4 'Alec' true)) asString. </do-it><do-it>a := 'hi'. b:='opps'.string:= ('&lt;1s&gt;&lt;t&gt;&lt;2s&gt;'expandMacrosWith: a with:b ) asString.Transcript show: string printString.   </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;1s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays with: amount asNumber.			"newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: newTransaction with:newNumberOfDays with:(aTransaction at: 6)."			Transcript show: newTransaction printString.].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;1s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays asNumber with: amount asNumber) asString.						Transcript show: newTransaction printString.].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;1s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays asNumber with: amount asNumber.						Transcript show: newTransaction printString.].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;1p&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays asNumber with: amount asNumber.						Transcript show: newTransaction printString.].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2p&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays asNumber with: amount asNumber.						Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := 'hi'. b:='opps'.timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.temp:=(pc formatStringFor:timestamp) string. '10.13.2013 17:08'.string:= ('&lt;1s&gt;&lt;t&gt;&lt;2s&gt;'expandMacrosWith: a with: temp) asString.Transcript show: string printString.   </do-it><do-it>Transcript clear.</do-it><do-it>a := 'hi'. b:='opps'.timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.temp:=(pc formatStringFor:timestamp) string. '10.13.2013 17:08'.string:= ('&lt;1s&gt;&lt;t&gt;&lt;2s&gt;'expandMacrosWith: a with: temp) asString.Transcript show: string printString.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[newTimestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: newTimestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays asNumber with: amount asNumber.						Transcript show: newTransaction printString.].</body></methods><do-it>a := 'hi'. b:='opps'.timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.temp:=(pc formatStringFor:timestamp) string.string:= ('&lt;1s&gt;&lt;t&gt;&lt;2s&gt;'expandMacrosWith: a with: temp) asString.Transcript show: string printString.  </do-it><do-it>a := 'hi'. b:='opps'.timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.temp:=(pc formatStringFor:timestamp) string.string:= ('&lt;1s&gt;&lt;t&gt;&lt;2s&gt;'expandMacrosWith: a with: temp) asString.Transcript show: string printString.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays transactionTimestamp newTimestamp pc newNumberOfDays newTransaction timestamp |	transactionTimestamp := (aTransaction at: 2).	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[timestamp := (Timestamp readFromDateAndTime: (transactionTimestamp readStream)) + numberOfDays days.			pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'expandMacrosWith: (aTransaction at: 1) asNumber with: newTimestamp with: newNumberOfDays asNumber with: amount asNumber.						Transcript show: newTransaction printString.].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>Transcript clear.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: amount asNumber.			Transcript show: newTransaction printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;2p&gt;&lt;t&gt;&lt;3p&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: amount asNumber.			Transcript show: newTransaction printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4p&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: amount asNumber.			Transcript show: newTransaction printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			Transcript show: newTransaction printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom:1 to:1 with:'') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><do-it>c:=Currency newAmount:90.</do-it><do-it>c:=Currency newAmount:90.c class</do-it><do-it>d:= Currency newAmount:889.d class = CurrencyifTrue:[Transcript show:2 printString]</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result Class = BankAccount						ifTrue: [anAccount = result.]						ifFalse:[Transcript show: result printString].						transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result.]						ifFalse:[Transcript show: result printString].						transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result.]						ifFalse:[Transcript show: 'start' printString; show: result printString].						transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Depost&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_7.im' 'November 17, 2013' '4:46:24 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_7.im was created at 4:46:24 PM on November 17, 2013."</do-it><do-it>a := OrderedCollection new.a add:4; add:6; add:8; add:0; remove:6; add:12.</do-it><do-it>a := OrderedCollection new.a add:4; add:6; add:8; add:0; remove:6; add:12.Transcript show: a printString.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result.]						ifFalse:[transactions remove: aTransaction].						transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result.]						ifFalse:[transactions remove: aTransaction.								transactions add: result].						transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse: 							[transactions remove: aTransaction.							transactions add: result].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse: 							[transactions remove: aTransaction.							transactions add: result].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"	Transcript show: transactions printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse: 							[transactions remove: aTransaction.							transactions add: result].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"	Transcript show: transactions printString</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse: 							[transactions remove: aTransaction.							transactions add: result].					"transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction] "] ].	"^anAccount"	Transcript show: transactions printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse: 							[transactions remove: aTransaction.							transactions add: result].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction] ] ].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse: 						"	[transactions remove: aTransaction.							transactions add: result]."							[Transcript show: 'start' printString;show: result printString.].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction] ] ].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result].					result class = String 						"	[transactions remove: aTransaction.							transactions add: result]."						ifTrue:	[Transcript show: 'start' printString;show: result printString.].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction] ] ].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction].					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse:						"	[transactions remove: aTransaction.							transactions add: result]."						[Transcript show: 'start' printString;show: result printString.].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction] ] ].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [result := anAccount processDeposit: transaction.					result class = BankAccount						ifTrue: [anAccount = result]						ifFalse:						"	[transactions remove: aTransaction.							transactions add: result]."						[Transcript show: 'start' printString;show: result printString.] ].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction] ] ].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["	[transactions remove: aTransaction.							transactions add: result]."									Transcript										show: 'start' printString;										show: result printString]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]]	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["	[transactions remove: aTransaction.							transactions add: result]."									Transcript										show: result printString]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]]	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]]	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"Transcript show: transactions printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"	Transcript show: transactions printString</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount. Transcript show: amount printString; show: 'check deposited' printString.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount. Transcript show: amount printString; show: 'cash deposited' printString.			^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance.  </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.Transcript show: '#######'printString.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.						^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.Transcript show: aTransaction printString.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.						^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.Transcript cr; show: transactionType.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.Transcript cr; show: aTransaction printString.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.						^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><do-it>Transcript clear.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.Transcript cr; show: transactions.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.Transcript cr; show: transactions printString.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. a balance.  </do-it><do-it>a:= SortedCollection new.a add:5; add:7; add:0.a size.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"Transcript show: transactions printString.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"Transcript show: transactions printString.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDeposit:">processDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.						^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |Transcript show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transaction transactionType |Transcript show: transactions size printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := OrderedCollection new.a add:34; add:3; add:7;add:6.a do: [:c | c = 7 ifTrue:[a add:5678.]. Transcript show: c printString. ]</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	1 to: (transactions size) do: 			[:aTransaction |			| transaction transactionType |Transcript show: transactions size printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	1 to: (transactions size) do: 			[:aTransaction |			| transaction transactionType |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	1 to: (transactions size) do: 			[:a |			| transaction transactionType aTransaction |aTransaction := transactions at: a.Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.  </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	1 to: (transactions size) do: 			[:a |			| transaction transactionType aTransaction |aTransaction := transactions at: a.Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									[transactions remove: aTransaction.									transactions add: result.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result count|	count := 0.	1 to: (transactions size + count) do: 			[:a |			| transaction transactionType aTransaction |aTransaction := transactions at: a.Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result. count := count +1.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.   BankAccount</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	1 to: (transactions size) do: 			[:a |			| transaction transactionType aTransaction |aTransaction := transactions at: a.Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><do-it> '$250.13' allButFirst:1</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:a |			| transaction transactionType aTransaction |aTransaction := transactions at: a.Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.  </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transactionType transaction depositType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.					transactionType = 'Deposit'				ifTrue: 				[depositType := transaction at: 4.				depositType = 'Check'					ifTrue:[result := self processCheckTransaction: transaction.											 	transactions remove: aTransaction.					transactions add: result.]]].	self executeTransactions: transactions.						"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transactionType transaction depositType |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[result := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: result]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := (self processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: transaction</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| amount numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	numberOfDays = 0		ifTrue: 			[self deposit: amount.			^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: aTransaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do:[:aTransaction| Transcript show:aTransaction printString.]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^self]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^self. "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^aTransaction "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^aTransaction "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction asString]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^aTransaction "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := '&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6).			^newTransaction printString]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^aTransaction "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6)) asString.			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.Transcript cr;show: transaction printString; show: modifiedTransaction printString.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^aTransaction "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6)) asString.Transcript show: newTransaction printString.			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	numberOfDays = 0		ifTrue: 			[^aTransaction "self deposit: amount"]		ifFalse: 			[timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6)) asString.			^newTransaction]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.Transcript cr; show: modifiedTransaction printString.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber."	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	 timestamp := (Timestamp						readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.			pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.			newTimestamp := (pc formatStringFor: timestamp) string.			newNumberOfDays := 0.			newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'						expandMacrosWith: (aTransaction at: 1) asNumber						with: newTimestamp						with: newNumberOfDays asNumber						with: (aTransaction at: 6)) asString.			^newTransaction</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	"	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber."	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at:5) asNumber.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.Transcript cr; show: modifiedTransaction printString.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><do-it>a:=34.b:=34.(a=34) &amp; (b=34)ifTrue:[Transcript show:'True'printString]</do-it><do-it>Transcript cr.</do-it><do-it>Transcript  clear.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at:5) asNumber.					depositType = 'Check' &amp; numberOfDays ~= 0						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.Transcript cr; show: modifiedTransaction printString.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at:5) asNumber.					depositType = 'Check' &amp; numberOfDays ~= 0						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	self executeTransactions: transactions	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do:[:aTransaction| Transcript cr; show:aTransaction printString.]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[anAccount := anAccount processDeposit: transaction.].												transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount' 				ifTrue: [anAccount := self processNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[anAccount := anAccount processDeposit: transaction.].												transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName |	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.	</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount processDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount' 				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[anAccount := anAccount processDeposit: transaction.].												transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>processNewAccount:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.						^self].	depositType = 'Check'		ifTrue: 			[result := self processDepositCheck: aTransaction.			^result]</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount' 				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[anAccount := anAccount executeDeposit: transaction.].												transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransaction:">processTransaction: transactions	| anAccount result |	transactions do: 			[:aTransaction |			| transactionType transaction |Transcript cr;show: aTransaction printString.			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[result := anAccount executeDeposit: transaction.							result class = BankAccount								ifTrue: [anAccount = result]								ifFalse: 									["transactions remove: aTransaction."									transactions add: result.]].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>processDeposit:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := 	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[self balance: self balance + amount asCurrency.].		</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp :=	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.			^self]		ifFalse:			[self balance: self balance + amount asCurrency.].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp :=	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.]		ifFalse:			[self balance: self balance + amount asCurrency.].		^self.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := 	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.]		ifFalse:			[self balance: self balance + amount asCurrency.].		^self.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp readFromDateAndTime: ((aTransaction at: 2)readStream).	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.]		ifFalse:			[self balance: self balance + amount asCurrency.].		^self.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp readFromDateAndTime: ((aTransaction at: 2)readStream).	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.Transcript show: 'transactionTimestamp &lt; timestamp new'printString]		ifFalse:			[self balance: self balance + amount asCurrency.Transcript show: 'transactionTimestamp &lt; timestamp new'printString].		^self.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.  </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processDepositCheck:">processDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp readFromDateAndTime: ((aTransaction at: 2)readStream).	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.Transcript show: 'transactionTimestamp &lt;= timestamp new'printString]		ifFalse:			[self balance: self balance + amount asCurrency.Transcript show: 'transactionTimestamp &gt; timestamp new'printString].		^self.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.						^self].	depositType = 'Check'		ifTrue: 			[result := self executeDepositCheck: aTransaction.			^result]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp readFromDateAndTime: ((aTransaction at: 2)readStream).	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.Transcript show: 'transactionTimestamp &lt;= timestamp new'printString]		ifFalse:			[self balance: self balance + amount asCurrency.Transcript show: 'transactionTimestamp &gt; timestamp new'printString].		^self.</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>processDepositCheck:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.			Transcript show: 'transactionTimestamp &lt;= timestamp new' printString]		ifFalse: 			[self balance: self balance + amount asCurrency.			Transcript show: 'transactionTimestamp &gt; timestamp new' printString].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.Transcript show: 'transactionTimestamp &lt;= timestamp new' printString]		ifFalse: 			[self balance: self balance + amount asCurrency.Transcript show: 'transactionTimestamp &gt; timestamp new' printString].	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at:5) asNumber.					(depositType = 'Check' &amp; numberOfDays ~= 0)						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	anAccount := self executeTransactions: transactions.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					(depositType = 'Check' &amp; numberOfDays) ~= 0						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	anAccount := self executeTransactions: transactions.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							transactions remove: aTransaction.							transactions add: modifiedTransaction]]].	anAccount := self executeTransactions: transactions.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><remove-selector><class-id>Core.BankAccount class</class-id> <selector>processTransaction:</selector></remove-selector><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount' 				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: 							[anAccount := anAccount executeDeposit: transaction.].												transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]].	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount processWithdrawal: transaction]]]	"^anAccount"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: 			[self deposit: amount.]		ifFalse: 			[self balance: self balance + amount asCurrency.].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self deposit: amount]		ifFalse: [self balance: self balance + amount asCurrency].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeWithdrawal:">executeWithdrawal: aTransaction	| amount |	amount := ((aTransaction at: 4) changeFrom:1 to:1 with:'') asNumber.	self withdrawal: amount.	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]]]	"^anAccount"</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>processWithdrawal:</selector></remove-selector><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]]Transcript cr; show: anAccount balance.]	"^anAccount"</body></methods><do-it>Transcript clear.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]].Transcript cr; show: anAccount balance.]	"^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]].Transcript cr; show: anAccount balance printString.]	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]].Transcript cr; show: aTransaction;show: anAccount balance printString.]	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. BankAccount </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]].Transcript cr; show: aTransaction;show: anAccount availableBalance printString.]	"^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: self balance - anAmount asCurrency.			self availableBalance: self availableBalance - anAmount asCurrency]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer:">customer: aCustomer	customer := aCustomer</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self deposit: amount]		ifFalse: [self balance: self balance + amount asCurrency].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeWithdrawal:">executeWithdrawal: aTransaction	| amount |	amount := ((aTransaction at: 4) changeFrom:1 to:1 with:'') asNumber.	self withdrawal: amount.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction]].Transcript cr; show: aTransaction;show: anAccount availableBalance printString.].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.a balance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a availableBalance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer name</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer type</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_7.im' 'November 17, 2013' '11:08:38 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_7.im was created at 11:08:38 PM on November 17, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [anAccount := anAccount executeCancel: transaction]].Transcript cr; show: aTransaction;show: anAccount availableBalance printString.].	^anAccount</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_7.im' 'November 17, 2013' '11:29:28 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_7.im was created at 11:29:28 PM on November 17, 2013."</do-it><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestTime executionTime totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="requestTime">requestTime	^requestTime</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="requestTime:">requestTime: anObject	requestTime := anObject</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="executionTime">executionTime	^executionTime</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="executionTime:">executionTime: anObject	executionTime := anObject</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="totalBalance">totalBalance	^totalBalance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="totalBalance:">totalBalance: anObject	totalBalance := anObject</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalance">availableBalance	^availableBalance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalance:">availableBalance: anObject	availableBalance := anObject</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	requestTime := nil.	executionTime := nil.	totalBalance := nil.	availableBalance := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Core.BankAccountHistory</class-id><body>""</body></comment><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.SortedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime executionTime totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>customer totalBalance availableBalance transactionHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:executionTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp executionTime: executionTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject = super new.	^anObject</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:executionTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp executionTime: executionTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject = super new.	anObject requestTime: requestTimestamp.	anObject executionTime: executionTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: balance.	^anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency.	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency.	transactionHistory add: BankAccountHistory new</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			transactionHistory add: (BankAccountHistory newRequestTime: aTransaction at:2 executionTime: Timestamp now totalBalance: self balance availableBalance: self availableBalance).			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			transactionHistory add: (BankAccountHistory newRequestTime: (aTransaction at:2) executionTime: (Timestamp now) totalBalance: (self balance) availableBalance: (self availableBalance)).			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:executionTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp executionTime: executionTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject := super new.	anObject requestTime: requestTimestamp.	anObject executionTime: executionTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: balance.	^anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			transactionHistory add: (BankAccountHistory newRequestTime: (aTransaction at:2) executionTime: (Timestamp now) totalBalance: (self balance) availableBalance: (self availableBalance)).			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result aBankAccountHistory |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			aBankAccountHistory := BankAccountHistory newRequestTime: (aTransaction at:2) executionTime: (Timestamp now) totalBalance: (self balance) availableBalance: (self availableBalance).			transactionHistory add: aBankAccountHistory.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^ self shouldNotImplement.</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:executionTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp executionTime: executionTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject := SortedCollection sortBlock: [:a :b | a requestTime &lt;= b requestTime].	anObject requestTime: requestTimestamp.	anObject executionTime: executionTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: balance.	^anObject</body></methods><do-it>timestamp := Timestamp now.pc:= PrintConverter for:#timestamp withFormatString: 'm.d.y hh:mm'.(pc formatStringFor:timestamp) string.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result aBankAccountHistory |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			aBankAccountHistory := BankAccountHistory newRequestTime: (Timestamp readFromDateAndTime:((aTransaction at:2) readStream)) executionTime: (Timestamp now) totalBalance: (self balance) availableBalance: (self availableBalance).			transactionHistory add: aBankAccountHistory.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:executionTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp executionTime: executionTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject := SortedCollection sortBlock: [:a :b | a requestTime &lt;= b requestTime].	anObject requestTime: requestTimestamp.	anObject executionTime: executionTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: balance.	^anObject</body></methods><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime executionTime totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testCurrency">testCurrency |currency1 currency2 sum value |currency1 := '100.00' asCurrency.       currency2 := '10.23' asCurrency.       sum := currency1 + currency2.       value := '110.23' asCurrency.self assert: sum = value</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>executionTime</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>executionTime</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>executionTime</selector></remove-selector><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>executionTime:</selector></remove-selector><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:executionTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp executionTime: executionTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject := SortedCollection sortBlock: [:a :b | a requestTime &lt;= b requestTime].	anObject requestTime: requestTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: balance.	^anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result aBankAccountHistory |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			aBankAccountHistory := BankAccountHistory newRequestTime: (Timestamp readFromDateAndTime:((aTransaction at:2) readStream)) totalBalance: (self balance) availableBalance: (self availableBalance).			transactionHistory add: aBankAccountHistory.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newRequestTime:totalBalance:availableBalance:">newRequestTime: requestTimestamp totalBalance: aBalance availableBalance: balance	|anObject|	anObject := SortedCollection sortBlock: [:a :b | a requestTime &lt;= b requestTime].	anObject requestTime: requestTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: balance.	^anObject</body></methods><remove-selector><class-id>Core.BankAccountHistory class</class-id> <selector>newRequestTime:executionTime:totalBalance:availableBalance:</selector></remove-selector><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance.	^ self shouldNotImplement."|anObject|	anObject := SortedCollection sortBlock: [:a :b | a requestTime &lt;= b requestTime].</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance.	^ self shouldNotImplement."|anObject|	anObject := SortedCollection sortBlock: [:a :b | a requestTime &lt;= b requestTime].^anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result aBankAccountHistory |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			aBankAccountHistory := BankAccountHistory new.		"	aBankAccountHistory := BankAccountHistory newRequestTime: (Timestamp readFromDateAndTime:((aTransaction at:2) readStream)) totalBalance: (self balance) availableBalance: (self availableBalance)."			transactionHistory add: aBankAccountHistory.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 18, 2013' '2:13:52 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 2:13:52 AM on November 18, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 18, 2013' '2:14:00 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 2:14:00 AM on November 18, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := BankAccount new.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance asCurrency.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^self shouldNotImplement.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := super new.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance asCurrency.	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.		"	aBankAccountHistory := BankAccountHistory new.			aBankAccountHistory := BankAccountHistory newRequestTime: (Timestamp readFromDateAndTime:((aTransaction at:2) readStream)) totalBalance: (self balance) availableBalance: (self availableBalance).			transactionHistory add: aBankAccountHistory."			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions remove: aTransaction.							modifiedTransactions add: modifiedTransaction]] ].	anAccount := self executeTransactions: transactions.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions remove: aTransaction.							modifiedTransactions add: modifiedTransaction]] ].	anAccount := self executeTransactions: modifiedTransactions.	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer name.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a customer type.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a balance.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a availableBalance</do-it><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.SortedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.SortedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime totalBalance availableBalance </inst-vars><class-inst-vars>transactionHistory </class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccountHistory</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	requestTime := nil.	totalBalance := nil.	availableBalance := nil.	^self</body></methods><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime totalBalance availableBalance </inst-vars><class-inst-vars>transactionHistory </class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := (self processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine]."anAccount := (self executeNewAccount)"			anAccount := (self processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	| anAccount |	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'NewAccount'				ifTrue: [anAccount := self executeNewAccount: transaction].			anAccount = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [anAccount := anAccount executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [anAccount := anAccount executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [anAccount := anAccount executeCancel: transaction]].Transcript cr; show: aTransaction;show: anAccount availableBalance printString.].	^anAccount</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>executeTransactions:</selector></remove-selector><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions remove: aTransaction.							modifiedTransactions add: modifiedTransaction]] ].	anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := self executeTransactions: modifiedTransactions.	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions"| anAccount |"	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3."transactionType = 'NewAccount'		ifTrue: [anAccount := self executeNewAccount: transaction]."			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self availableBalance printString.]."	^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction tokensBasedOn: Character tab.	customerName := aTransaction at: 4.	customerType := aTransaction at: 5.	amount := ((aTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction tokensBasedOn: Character tab.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: bTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := bTransaction tokensBasedOn: Character tab.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction tokensBasedOn: Character tab.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| anAccount modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions remove: aTransaction.							modifiedTransactions add: modifiedTransaction]] ].	anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions"| anAccount |"	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3."transactionType = 'NewAccount'		ifTrue: [anAccount := self executeNewAccount: transaction]."			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self availableBalance printString; show: self balance.]."	^anAccount"</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := (self processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := (self processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].anAccount := self executeNewAccount: (transactions at:1).			anAccount := (self processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].anAccount := self executeNewAccount: (transactions at:1).			anAccount := (anAccount processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions remove: aTransaction.							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executetransactions: modifiedTransactions.</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>processTransactions:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;Check&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>processCheckTransaction:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions remove: aTransaction.							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executeTransactions: modifiedTransactions.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions"| anAccount |"	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3."transactionType = 'NewAccount'		ifTrue: [anAccount := self executeNewAccount: transaction]."			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self availableBalance printString; show: self balance printString.]."	^anAccount"</body></methods><do-it>Transcript clear.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions"| anAccount |"	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3."transactionType = 'NewAccount'		ifTrue: [anAccount := self executeNewAccount: transaction]."			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self availableBalance printString; show: self balance printString.]."	^anAccount"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeDepositCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self deposit: amount]		ifFalse: [self availableBalance: self availableBalance + amount asCurrency].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self deposit: amount]		"ifFalse: [self availableBalance: self availableBalance + amount asCurrency]."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') &amp; (numberOfDays ~= 0))						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction."							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executeTransactions: modifiedTransactions.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount holdDurationInDays |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.holdDurationInDays := (aTransaction at: 6) asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self deposit: amount]		"ifFalse: [self availableBalance: self availableBalance + amount asCurrency]."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount holdDurationInDays |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.holdDurationInDays := (aTransaction at: 6) asNumber.	(transactionTimestamp &lt;= Timestamp now) &amp; (holdDurationInDays = 0)		ifTrue: [self deposit: amount]		"ifFalse: [self availableBalance: self availableBalance + amount asCurrency]."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDepositCheck:">executeDepositCheck: aTransaction	| transactionTimestamp amount holdDurationInDays |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.holdDurationInDays := (aTransaction at: 6) asNumber.	(transactionTimestamp &lt;= Timestamp now) &amp; (holdDurationInDays = 0)		ifTrue: [self deposit: amount].(transactionTimestamp &lt;= Timestamp now)ifTrue: [self availableBalance: self availableBalance + amount asCurrency].		"ifFalse: [self availableBalance: self availableBalance + amount asCurrency]."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := transactions.	transactions do: 			[:aTransaction |			| transactionType transaction depositType numberOfDays modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					numberOfDays := (transaction at: 5) asNumber.					((depositType = 'Check') "&amp; (numberOfDays ~= 0)")						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction."							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executeTransactions: modifiedTransactions.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>processLine:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount holdDurationInDays |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.holdDurationInDays := (aTransaction at: 6) asNumber.	(transactionTimestamp &lt;= Timestamp now) &amp; (holdDurationInDays = 0)		ifTrue: [self deposit: amount].(transactionTimestamp &lt;= Timestamp now)ifTrue: [self availableBalance: self availableBalance + amount asCurrency].		"ifFalse: [self availableBalance: self availableBalance + amount asCurrency]."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	(transactionTimestamp &lt;= Timestamp now) 		ifTrue: [self availableBalance: self availableBalance + amount].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| transactionTimestamp amount holdDurationInDays |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.holdDurationInDays := (aTransaction at: 6) asNumber.	(transactionTimestamp &lt;= Timestamp now) &amp; (holdDurationInDays = 0)		ifTrue: [self deposit: amount].(transactionTimestamp &lt;= Timestamp now)ifTrue: [self availableBalance: self availableBalance + amount asCurrency].		"ifFalse: [self availableBalance: self availableBalance + amount asCurrency]."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeCheck: aTransaction.			^result].</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>executeDepositCheck:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	self balance: self balance + amount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	self balance: self balance + amount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount result |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount.			^self].	depositType = 'Check'		ifTrue: 			[result:= self executeCheck: aTransaction.			^result].	depositType = 'ClearCheck'		ifTrue: 			[result:= self executeClearCheck: aTransaction.			^result].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	self balance: self balance + amount asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	(transactionTimestamp &lt;= Timestamp now) 		ifTrue: [self availableBalance: self availableBalance + amount asCurrency].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions"| anAccount |"	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3."transactionType = 'NewAccount'		ifTrue: [anAccount := self executeNewAccount: transaction]."			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self balance printString; show: self availableBalance printString.]."	^anAccount"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions"| anAccount |"	transactions do: 			[:aTransaction |Transcript cr; show: aTransaction		"	| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self balance printString; show: self availableBalance printString."]."	^anAccount"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |Transcript cr; show: aTransaction		"	| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self balance printString; show: self availableBalance printString."]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction]].Transcript cr; show: aTransaction;show: self balance printString; show: self availableBalance printString.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount].	depositType = 'Check'		ifTrue: 			[self executeCheck: aTransaction].	depositType = 'ClearCheck'		ifTrue: 			[self executeClearCheck: aTransaction].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					(transaction at: 5) asNumber.					((depositType = 'Check') "&amp; (numberOfDays ~= 0)")						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction."							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executeTransactions: modifiedTransactions.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					((depositType = 'Check') "&amp; (numberOfDays ~= 0)")						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction."							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	modifiedTransactions do:[:each | transactions add:each]	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executeTransactions: modifiedTransactions.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					((depositType = 'Check') "&amp; (numberOfDays ~= 0)")						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction."							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]] ]."anAccount := self executeNewAccount: (modifiedTransactions at:1).	modifiedTransactions do:[:each | transactions add:each].	anAccount := anAccount executeTransactions: modifiedTransactions.	^anAccount"self executeTransactions: modifiedTransactions.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							"							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]	"&amp; (numberOfDays ~= 0)"]].	"anAccount := self executeNewAccount: (modifiedTransactions at:1).	modifiedTransactions do:[:each | transactions add:each].	anAccount := anAccount executeTransactions: transactions.	^anAccount"	self executeTransactions: modifiedTransactions</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							"							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]	"&amp; (numberOfDays ~= 0)"]].	"anAccount := self executeNewAccount: (modifiedTransactions at:1).		anAccount := anAccount executeTransactions: transactions.	^anAccount"modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: modifiedTransactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							"							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]	"&amp; (numberOfDays ~= 0)"]].	"anAccount := self executeNewAccount: (modifiedTransactions at:1).		anAccount := anAccount executeTransactions: transactions.	^anAccount"	modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: modifiedTransactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							"							modifiedTransactions remove: aTransaction."							modifiedTransactions add: modifiedTransaction]	"&amp; (numberOfDays ~= 0)"]].	"anAccount := self executeNewAccount: (modifiedTransactions at:1).		anAccount := anAccount executeTransactions: transactions.	^anAccount"	modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]]].		modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><class><name>BankAccountSampleTests</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>(none)</package></attributes></class><methods><class-id>BankAccountSampleTests</class-id> <category>initialize-release</category><body package="(none)" selector="tearDown">tearDown	self dataFiles do: 			[:each |			| file |			file := each asFilename.			file exists ifTrue: [file delete]]</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="(none)" selector="testCashDepositsWithdrawals">testCashDepositsWithdrawals	| account |	self createFile: 'cashDepositsWithdrawals'.	account := BankAccount fromFile: 'cashDepositsWithdrawals'.	self		assert: (account balanceIn: -3 days) = '10.00' asCurrency;		assert: (account balanceIn: -2 days) = '40.00' asCurrency;		assert: (account balanceIn: -1 days) = '25.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="(none)" selector="testCashDepositsWithdrawalsWrongOrder">testCashDepositsWithdrawalsWrongOrder	| account |	self createFile: 'wrongOrder'.	account := BankAccount fromFile: 'wrongOrder'.	self		assert: (account balanceIn: -3 days) = '10.00' asCurrency;		assert: (account balanceIn: -2 days) = '40.00' asCurrency;		assert: (account balanceIn: -1 days) = '25.00' asCurrency;		assert: account balance = '25.00' asCurrency.	self		assert: (account availableBalanceIn: -3 days) = '10.00' asCurrency;		assert: (account availableBalanceIn: -2 days) = '40.00' asCurrency;		assert: (account availableBalanceIn: -1 days) = '25.00' asCurrency;		assert: account availableBalance = '25.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="(none)" selector="testCheckDeposits">testCheckDeposits	| account |	self createFile: 'checkDeposits'.	account := BankAccount fromFile: 'checkDeposits'.	self		assert: (account balanceIn: -15 days) = 100 asCurrency;		assert: (account balanceIn: -9 days) = 110 asCurrency;		assert: (account balanceIn: -6 days + 1 minutes) = 130 asCurrency;		assert: (account balanceIn: -5 days + 1 minutes) = 160 asCurrency;		assert: account balance = 145 asCurrency.	self		assert: (account availableBalanceIn: -15 days) = 100 asCurrency;		assert: (account availableBalanceIn: -9 days) = 100 asCurrency;		assert: (account availableBalanceIn: -8 days) = 110 asCurrency;		assert: (account availableBalanceIn: -6 days + 1 minutes) = 110 asCurrency;		assert: (account availableBalanceIn: -5 days + 1 minutes) = 140 asCurrency;		assert: (account availableBalanceIn: -4 days + 1 minutes) = 125 asCurrency;		assert: account availableBalance = 145 asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="(none)" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="(none)" selector="testSimpleCreate">testSimpleCreate	| account |	self createFile: 'simpleCreate'.	account := BankAccount fromFile: 'simpleCreate'.	self		assert: account balance = '10.00' asCurrency;		assert: account availableBalance = '10.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="(none)" selector="testTwoAccounts">testTwoAccounts	| simpleAccount cashAccount |	self createFile: 'simpleCreate'.	self createFile: 'cashDepositsWithdrawals'.	simpleAccount := BankAccount fromFile: 'simpleCreate'.	cashAccount := BankAccount fromFile: 'cashDepositsWithdrawals'.	self		assert: simpleAccount balance = '10.00' asCurrency;		assert: simpleAccount availableBalance = '10.00' asCurrency.	self		assert: (cashAccount balanceIn: -3 days) = '10.00' asCurrency;		assert: (cashAccount balanceIn: -2 days) = '40.00' asCurrency;		assert: (cashAccount balanceIn: -1 days) = '25.00' asCurrency;		assert: cashAccount balance = '25.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="(none)" selector="cashDepositsWithdrawals">cashDepositsWithdrawals	"The \ characters are converted to tabs when data is written to file"		^'1\',  (self today - 3 days) printString ,' \NewAccount\Roger Whitney\Normal \$10.003\',  (self today - 2 days) printString ,'\Deposit\Cash\$30.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="(none)" selector="checkDeposits">checkDeposits	"The \ characters are converted to tabs when data is written to file"		^'9\',  (self today - 15 days) printString ,' \NewAccount\Roger Whitney\Normal \$100.005\',  (self today - 10 days) printString ,' \Deposit\Check\2\$10.002\',   (self today - 6 days) printString ,'\Deposit\Check\5\$20.007\',  (self today - 5 days) printString ,'\Deposit\Cash\$30.004\',  (self today - 4 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="(none)" selector="dataFiles">dataFiles	^#( 'simpleCreate' 'cashDepositsWithdrawals' 'wrongOrder' 'checkDeposits' 'futureAction')</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="(none)" selector="futureAction">futureAction	"The \ characters are converted to tabs when data is written to file"	^'9\',  (self today - 5 days) printString ,' \NewAccount\Roger Whitney\Normal \$100.002\',   (self today - 2 days) printString ,'\Deposit\Check\3\$20.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="(none)" selector="simpleCreate">simpleCreate	^'1\' , (self today - 2 days) printString		, '\NewAccount\Roger Whitney\Normal\$10.00' replaceAll: $\			with: Character tab</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="(none)" selector="wrongOrder">wrongOrder	"The \ characters are converted to tabs when data is written to file"	^'9\',  (self today - 3 days) printString ,' \NewAccount\Roger Whitney\Normal \$10.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.003\',  (self today - 2 days) printString ,'\Deposit\Cash\$30.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>private</category><body package="(none)" selector="createFile:">createFile: aStringName	| file fileWrite contents |	file := aStringName asFilename.	fileWrite := file writeStream.		[contents := self perform: aStringName asSymbol.	contents replaceAll: $\ with: Character tab.	fileWrite nextPutAll: contents]			ensure: [fileWrite close]</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>private</category><body package="(none)" selector="today">today	^Timestamp now</body></methods><component_definition_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>checkDeposits</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>checkDeposits</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testSimpleCreate</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testSimpleCreate</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>futureAction</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>futureAction</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>simpleCreate</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>simpleCreate</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>cashDepositsWithdrawals</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>cashDepositsWithdrawals</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testTwoAccounts</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testTwoAccounts</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>wrongOrder</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>wrongOrder</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>tearDown</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>tearDown</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testCashDepositsWithdrawalsWrongOrder</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testCashDepositsWithdrawalsWrongOrder</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testCheckDeposits</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testCheckDeposits</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testFutureAction</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testFutureAction</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>today</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>today</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>dataFiles</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>dataFiles</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testCashDepositsWithdrawals</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>testCashDepositsWithdrawals</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>createFile:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.BankAccountSampleTests</definitionName> <meta>false</meta> <selector>createFile:</selector> <definitionChange>added</definitionChange></component_selector_change><remove-selector><class-id>Core.BankAccountHistory class</class-id> <selector>newRequestTime:totalBalance:availableBalance:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction ]].Transcript cr; show: aTransaction;show: self balance printString; show: self availableBalance printString.]</body></methods><do-it>12.345 * 100 asInteger</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit'						ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show: aTransaction;show: self balance printString; show: self availableBalance printString.]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at:4.	transactions do: [:each | ].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction |			aTransaction := each tokensBasedOn: Character tab]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at:1.			transactionID = transactionIDToCancel			ifTrue: [amount := 0]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at:1.			transactionID = transactionIDToCancel			ifTrue: [amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.					self balance: self balance - amount asCurrency.]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.Transcript cr;show:aTransaction printString;cr;show:transaction.					self balance: self balance - amount asCurrency.]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.Transcript cr;show:aTransaction printString;cr;show:transaction printString.					self balance: self balance - amount asCurrency.]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.Transcript cr;show:aTransaction printString;cr;show:transaction printString.					self balance: self balance - amount asCurrency.]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.newTransaction := 0.Transcript cr;show:aTransaction printString;cr;show:transaction printString.					self balance: self balance - amount asCurrency.]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;cr;show:transaction printString.					self balance: self balance - amount asCurrency.]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;cr;show:transaction printString.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;cr;show:transaction printString; show:amount.					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.	transactionType := transaction at: 3.	transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ChapriCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ChapriCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck'				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			(transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck')				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.			(transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck')				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel transactionType |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			transactionType := aTransaction at: 3.Transcript cr;show:'chapri'printString;show:transactionType printString.			(transactionID = transactionIDToCancel &amp; transactionType = 'ClearCheck')				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			(transactionID = transactionIDToCancel &amp; depositType = 'ClearCheck')				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:amount printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.Transcript cr;show:'chapri'printString;show:depositType printString."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:amount printString.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:newTransaction printString.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber				with: $0 asString) asString.Transcript cr;show:aTransaction printString;show:transaction printString; show:newTransaction printString.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString.Transcript cr;show:'new transaction'printString; show:newTransaction printString.					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 18, 2013' '10:39:31 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 10:39:31 PM on November 18, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString.Transcript cr;show:'new transaction'printString; show:newTransaction printString."					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel newTransaction|	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString.Transcript cr;show:'new transaction'printString; show:newTransaction printString.					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]]"transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction.		modifiedTransactions add: modifiedTransaction]"].		modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]]"transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction.		transactions add: modifiedTransaction]"].		modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]]"transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: transactions.		transactions add: modifiedTransaction]"].		modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]]"transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: transactions.		transactions remove: transaction.		transactions add: modifiedTransaction]"].		modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCancelTransaction:collection:">processCancelTransaction: transaction collection: transactions	| transactionIDToCancel newTransaction|	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString.^newTransaction.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: transactions.		transactions remove: transaction.		transactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: transactions.		deleteTransaction := self getTransactionToBeCancled: transaction collection: transactions.		transactions remove: deleteTransaction.		transactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="getTransactionToBeCancled:collection:">getTransactionToBeCancled: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[						^each.					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="getTransactionToBeCancled:collection:">getTransactionToBeCancled: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: [^each]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="getTransactionToBeCanceld:collection:">getTransactionToBeCanceld: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: [^each]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: transactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: transactions.		transactions remove: deleteTransaction.		transactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>getTransactionToBeCancled:collection:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: transactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: transactions.		transactions remove: deleteTransaction.		transactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCancelTransaction:collection:">processCancelTransaction: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString.^newTransaction.					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: modifiedTransactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: transactions.		transactions remove: deleteTransaction.		transactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: modifiedTransactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: modifiedTransactions.		transactions remove: deleteTransaction.		transactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: modifiedTransactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: modifiedTransactions.		modifiedTransactions remove: deleteTransaction.		modifiedTransactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString]"	self executeTransactions: transactions"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: modifiedTransactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: modifiedTransactions.		modifiedTransactions remove: deleteTransaction.		modifiedTransactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].transactions do:[:each | Transcript cr; show: each printString].	self executeTransactions: transactions</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].transactionType = 'Cancel'	ifTrue:		[modifiedTransaction := self processCancelTransaction: transaction collection: modifiedTransactions.		deleteTransaction := self getTransactionToBeCanceld: transaction collection: modifiedTransactions.		modifiedTransactions remove: deleteTransaction.		modifiedTransactions add: modifiedTransaction]].		modifiedTransactions do:[:each | transactions add:each].	self executeTransactions: transactions</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency."newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString."					]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'ClearCheck'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.^self"newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.		transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			((transactionID = transactionIDToCancel) &amp; (depositType = 'Check'))				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.self balance: self balance - amount asCurrency.^self"newTransaction := each.newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'				expandMacrosWith: transactionID asNumber				with: (aTransaction at: 2) asString				with: (aTransaction at: 5) asNumber) asString."					]]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 19, 2013' '12:21:55 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 12:21:55 AM on November 19, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := super new.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance asCurrency."anAccount transactionHistory := SortedCollection sortBlock:[:a :b | a &lt;= b]."	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [transactions add: readStream nextLine]]				self processTransactions: transactions.				"valueNowOrOnUnwindDo: [readStream close]"]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [transactions add: readStream nextLine]]				self processTransactions: transactions				"valueNowOrOnUnwindDo: [readStream close]"]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [transactions add: readStream nextLine]]				self processTransactions: transactions]				"valueNowOrOnUnwindDo: [readStream close]]"		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].				self processTransactions: transactions]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']"ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].anAccount := self executeNewAccount: (transactions at:1).			anAccount := (anAccount processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].				self processTransactions: transactions]				valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := BankAccount newName:'fi' type:'Normal' balance:23.</do-it><do-it>a := BankAccount newName:'fi' type:'Normal' balance:250. a transactionsFrom: 'transactions1.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 19, 2013' '12:50:16 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 12:50:16 AM on November 19, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'Check')				ifTrue: 					[amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.					self balance: self balance - amount asCurrency.					^self]]</body></methods><do-it>a := BankAccount newName:'fi' type:'Normal' balance:250. a transactionsFrom: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	self balance: self balance + amount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) changeFrom: 1 to: 1 with: '') asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) changeFrom: 1 to: 1 with: '') asNumber.			self deposit: amount].	depositType = 'Check' ifTrue: [self executeCheck: aTransaction].	depositType = 'ClearCheck' ifTrue: [self executeClearCheck: aTransaction]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			Transcript				cr;				show: aTransaction;				show: self balance printString;				show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeWithdrawal:">executeWithdrawal: aTransaction	| amount |	amount := ((aTransaction at: 4) changeFrom: 1 to: 1 with: '') asNumber.	self withdrawal: amount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="getTransactionToBeCanceld:collection:">getTransactionToBeCanceld: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: [^each]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: anAmount	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: self balance - anAmount asCurrency.			self availableBalance: self availableBalance - anAmount asCurrency]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCancelTransaction:collection:">processCancelTransaction: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: 					[newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'								expandMacrosWith: transactionID asNumber								with: (aTransaction at: 2) asString								with: (aTransaction at: 5) asNumber) asString.					^newTransaction]]</body></methods><do-it>a := BankAccount newName:'fi' type:'Normal' balance:250. a transactionsFrom: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><do-it>a := BankAccount newName:'fi' type:'Normal' balance:250. a transactionsFrom: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].			transactionType = 'Cancel'				ifTrue: 					[modifiedTransaction := self processCancelTransaction: transaction								collection: modifiedTransactions.					deleteTransaction := self getTransactionToBeCanceld: transaction								collection: modifiedTransactions.					modifiedTransactions remove: deleteTransaction.					modifiedTransactions add: modifiedTransaction]].	modifiedTransactions do: [:each | transactions add: each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCancelTransaction:collection:">processCancelTransaction: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType newTransaction |			aTransaction := each tokensBasedOn: Character tab.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: 					[newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'								expandMacrosWith: transactionID asNumber								with: (aTransaction at: 2) asString								with: (aTransaction at: 5) asNumber) asString.					^newTransaction]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].			transactionType = 'Cancel'				ifTrue: 					[modifiedTransaction := self processCancelTransaction: transaction								collection: modifiedTransactions.					deleteTransaction := self getTransactionToBeCanceld: transaction								collection: modifiedTransactions.					modifiedTransactions remove: deleteTransaction.					modifiedTransactions add: modifiedTransaction]].	modifiedTransactions do: [:each | transactions add: each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a tokensBasedOn: Character tab.					t2 := b tokensBasedOn: Character tab.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: 			[self balance: self balance - anAmount asCurrency.			self availableBalance: calcBalance]		ifTrue: [self isValidWithdrawal: anAmount]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 19, 2013' '1:21:12 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 1:21:12 AM on November 19, 2013."</do-it><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance.	^ self shouldNotImplement."</body></methods><class><name>BankAccountHistory</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>requestTime totalBalance availableBalance </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment5</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	transactionHistory := SortedCollection sortBlock:[:a :b | a &lt;= b].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].transactionHistory add: Timestamp now, self balance,availableBalance.Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testCurrency">testCurrency |a b c d sum |a := Currency fromString: '1.00'.       b := Currency fromNumber: 2.12.       sum := Currency fromNumber: 3.12.	c := a + b.self assert: sum = c.d := c - 1.00 asCurrency.self assert: d = b.self assert: a printString = '$1.00'.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testCurrency">testCurrency |a b c d sum |a := Currency fromString: '1.00'.       b := Currency fromNumber: 2.12.       sum := Currency fromNumber: 3.12.	c := a + b.self assert: sum = c.d := c - 1.00 asCurrency.self assert: d = b.self assert: a printString = '$1.0'.</body></methods><do-it>-6 days + 1 minutes</do-it><do-it>Timestamp now-6 days+1 minutes</do-it><do-it>Timestamp now-(6 days+1minutes)</do-it><do-it>duration := -6 days + 1 minutes .Timestamp now+duration </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 19, 2013' '2:49:35 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 2:49:35 AM on November 19, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im' 'November 19, 2013' '2:49:50 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_8.im was created at 2:49:50 AM on November 19, 2013."</do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromString: '1.00'.	b := Currency fromNumber: 2.12.	sum := Currency fromNumber: 3.12.	c := a + b.	self assert: sum = c.	d := c - 1.00 asCurrency.	self assert: d = b.	self assert: a printString = '$1.0'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromString: '1.00'.	b := Currency fromNumber: 2.12.	sum := Currency fromNumber: 3.12.	c := a + b.	self assert: sum &lt;= c.	d := c - 1.00 asCurrency.	self assert: d &gt;= b.	self assert: a &lt; b.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromString: '1.00'.	b := Currency fromNumber: 2.12.	sum := Currency fromNumber: 3.12.	c := a + b.	self assert: sum &lt;= c.	d := c - 1.00 asCurrency.	self assert: d &gt;= b.	self assert: a &lt; b.	self assert: sum &gt; (2.12 asCurrency).</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromString: '1.00'.	b := Currency fromNumber: 2.12.	sum := Currency fromNumber: 3.12.	c := a + b.	self assert: sum &lt;= c.	d := c - 1.00 asCurrency.	self assert: d &gt;= b.	self assert: a &lt; b.	self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im' 'November 19, 2013' '9:19:03 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im was created at 9:19:03 AM on November 19, 2013."</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency beImmutable.	^aCurrency</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment5" selector="new">new	"Answer a newly created and initialized instance."	^self shouldNotImplement.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment5" selector="getTokens">getTokens^self tokensBasedOn: Character tab</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment5" selector="getTokens">getTokens	^self tokensBasedOn: Character tab</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction getTokens.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction tokensBasedOn: Character tab.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]]."transactionHistory add: Timestamp now, self balance,availableBalance."Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction getTokens.Transcript cr; show:'&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;tokens' printString; show: tokenizedTransaction printString.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) changeFrom:1 to:1 with:'') asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>'$23'allButFirst:1.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction getTokens.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) allButFirst: 1) asNumber.	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount|	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: ((t1 at: 2)readStream).					timestamp2 := Timestamp readFromDateAndTime: ((t2 at: 2)readStream).					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].anAccount := self executeNewAccount: (transactions at:1).			anAccount := (anAccount processTransactions: transactions)]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := self executeNewAccount: (transactions at: 1).			anAccount := anAccount processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'Check')				ifTrue: 					[amount := ((aTransaction at: 6) allButFirst:1) asNumber.					self balance: self balance - amount asCurrency.					^self]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	amount := ((aTransaction at: 6) allButFirst:1) asNumber.	self balance: self balance + amount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := ((aTransaction at: 6) allButFirst:1) asNumber.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := ((aTransaction at: 5) allButFirst:1) asNumber.			self deposit: amount].	depositType = 'Check' ifTrue: [self executeCheck: aTransaction].	depositType = 'ClearCheck' ifTrue: [self executeClearCheck: aTransaction]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transactionType transaction |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]]."transactionHistory add: Timestamp now, self balance,availableBalance."Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeWithdrawal:">executeWithdrawal: aTransaction	| amount |	amount := ((aTransaction at: 4) allButFirst:1) asNumber.	self withdrawal: amount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="getTransactionToBeCanceld:collection:">getTransactionToBeCanceld: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: [^each]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCancelTransaction:collection:">processCancelTransaction: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType newTransaction |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: 					[newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'								expandMacrosWith: transactionID asNumber								with: (aTransaction at: 2) asString								with: (aTransaction at: 5) asNumber) asString.					^newTransaction]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].			transactionType = 'Cancel'				ifTrue: 					[modifiedTransaction := self processCancelTransaction: transaction								collection: modifiedTransactions.					deleteTransaction := self getTransactionToBeCanceld: transaction								collection: modifiedTransactions.					modifiedTransactions remove: deleteTransaction.					modifiedTransactions add: modifiedTransaction]].	modifiedTransactions do: [:each | transactions add: each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment5" selector="getAmount">getAmount	^(self allButFirst:1) asNumber.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction getTokens.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) getAmount).	^BankAccount newName: customerName type: customerType balance: amount.</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'Check')				ifTrue: 					[amount := (aTransaction at: 6) getAmount.					self balance: self balance - amount asCurrency.					^self]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := (aTransaction at: 5) getAmount.			self deposit: amount].	depositType = 'Check' ifTrue: [self executeCheck: aTransaction].	depositType = 'ClearCheck' ifTrue: [self executeClearCheck: aTransaction]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeWithdrawal:">executeWithdrawal: aTransaction	| amount |	amount := (aTransaction at: 4) getAmount.	self withdrawal: amount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im' 'November 19, 2013' '10:00:01 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im was created at 10:00:01 AM on November 19, 2013."</do-it><methods><class-id>Core.BankAccount class</class-id> <category>accessing</category><body package="Assignment5" selector="fromFile:">fromFile: aFilename	| readStream transactions anAccount |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| tokenizedTransaction1 tokenizedTransaction2 timestamp1 timestamp2 |					tokenizedTransaction1 := a getTokens.					tokenizedTransaction2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (tokenizedTransaction1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (tokenizedTransaction2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			anAccount := self executeNewAccount: (transactions at: 1).			anAccount := anAccount processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].Transcript show: Timestamp now printString; show:self balance printString; show: availableBalance printString.			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im' 'November 19, 2013' '10:10:59 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im was created at 10:10:59 AM on November 19, 2013."</do-it><do-it>Timestamp readFromDateAndTime: ('10.15.2013 17:30' readStream)</do-it><do-it>timestamp := (Timestamp readFromDateAndTime:('10.10.2013 17:08' readStream)) + 3 days. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b c d sum |	a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a balance = '$.0.0'.</body></methods><do-it>a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.</do-it><do-it>a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250. a balance</do-it><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b c d sum |	a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a printString = '$0.0'.</body></methods><do-it>a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250. a printString.</do-it><do-it>a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250. a balance printString.</do-it><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b c d sum |	a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$245.0'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$5.0'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '-$5.0'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'."	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '-$5.0'."</body></methods><do-it>a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 255. a balance printString.</do-it><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.0'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 1250.	self assert: b balance printString = '$-1000.0'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.0'.	c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.0'.	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.0'.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp readFromDateAndTime:((transaction at:2) readStream).			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].aHistory := BankAccountHistory newTimestamp: transactionTimestamp balance: (self balance) availableBalance: (self availableBalance). transactionHistory add: aHistory."transactionHistory add: Timestamp now, self balance,availableBalance."Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newTimestamp:balance:availableBalance:">newTimestamp: aTransactionTimestamp balance: aBalance availableBalance: anAvailableBalance</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newTimestamp:balance:availableBalance:">newTimestamp: aTransactionTimestamp balance: aBalance availableBalance: anAvailableBalance|anObject|anObject := super new.anObject requestTime: aTransactionTimestamp.anObject totalBalance: aBalance.anObject availableBalance: anAvailableBalance.^anObject.</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment5" selector="newTimestamp:balance:availableBalance:">newTimestamp: aTransactionTimestamp balance: aBalance availableBalance: anAvailableBalance	| anObject |	anObject := super new.	anObject requestTime: aTransactionTimestamp.	anObject totalBalance: aBalance.	anObject availableBalance: anAvailableBalance.	^anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp readFromDateAndTime:((transaction at:2) readStream).			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].aHistory := BankAccountHistory newTimestamp: transactionTimestamp balance: (self balance) availableBalance: (self availableBalance). transactionHistory add: aHistory."transactionHistory add: Timestamp now, self balance,availableBalance."Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp readFromDateAndTime:((transaction at:2) readStream).			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].aHistory := BankAccountHistory newTimestamp: transactionTimestamp balance: (self balance) availableBalance: (self availableBalance). transactionHistory add: aHistory."transactionHistory add: Timestamp now, self balance,availableBalance."Transcript cr; show: aTransaction; show: self balance printString; show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	"transactionHistory := SortedCollection sortBlock:[:a :b | a &lt;= b]."transactionHistory asSortedCollection: [:a :b | a &lt;= b].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	"transactionHistory := SortedCollection sortBlock:[:a :b | a &lt;= b]."transactionHistory asSortedCollection: [:a :b | a requestTime &lt;= b requestTime].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	"transactionHistory := SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]."transactionHistory asSortedCollection: [:a :b | a requestTime &lt;= b requestTime].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	transactionHistory := SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime].	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize."	transactionHistory := SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]."	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := super new.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance asCurrency."anAccount transactionHistory := SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]."	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="transactionHistory:">transactionHistory: anObject	transactionHistory := anObject.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="transactionHistory:">transactionHistory: anObject	transactionHistory := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment5" selector="transactionHistory">transactionHistory	^transactionHistory</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment5" selector="newName:type:balance:">newName: aName type: aType balance: aBalance	| anAccount |	anAccount := super new.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: aBalance asCurrency.	anAccount availableBalance: aBalance asCurrency.	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a transactionHistory.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a transactionHistory at:1</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.			Transcript				cr;				show: aTransaction;				show: self balance printString;				show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do:[:each | Transcript cr;cr;show: each requestTime;show: each totalBalance;show: each availableBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do:[:each | Transcript cr;cr;show: each requestTime printString;show: each totalBalance printString;show: each availableBalance printString]</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime |	searchTime := Timestamp now + aDuration.Transcript show: searchTime printString."transactionHistory do:[:each | Transcript cr;cr;show: each requestTime printString;show: each totalBalance printString;show: each availableBalance printString]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory."Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString"].</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'. </do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a balanceIn:-6 days + 1 minutes</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript show: searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) totalBalance."transactionHistory do:[:each | Transcript cr;cr;show: each requestTime printString;show: each totalBalance printString;show: each availableBalance printString]"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.a balanceIn:-31 days.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript show: searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) availableBalance."transactionHistory do:[:each | Transcript cr;cr;show: each requestTime printString;show: each totalBalance printString;show: each availableBalance printString]"</body></methods><do-it>a := BankAccount fromFile: 'transactions1.txt'.a balanceIn:-31 days.</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript show: searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) totalBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript show: searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) availableBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration."Transcript show: searchTime printString."	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) availableBalance.</body></methods><do-it>a availableBalanceIn:-31 days.</do-it><do-it>a := BankAccount fromFile: 'transactions1.txt'.a availableBalanceIn:-31 days.</do-it><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="futureAction">futureAction	"The \ characters are converted to tabs when data is written to file"	^'9\',  (self today - 5 days) printString ,' \NewAccount\Roger Whitney\Normal\$100.002\',   (self today - 2 days) printString ,'\Deposit\Check\3\$20.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="futureAction">futureAction	"The \ characters are converted to tabs when data is written to file"	^'9\',(self today - 5 days) printString ,'\NewAccount\Roger Whitney\Normal\$100.002\',(self today - 2 days) printString,'\Deposit\Check\3\$20.004\',(self today - 1 days) printString,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="futureAction">futureAction	"The \ characters are converted to tabs when data is written to file"	^'9\',(self today - 5 days) printString,'\NewAccount\Roger Whitney\Normal\$100.002\',(self today - 2 days) printString,'\Deposit\Check\3\$20.004\',(self today - 1 days) printString,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="futureAction">futureAction	"The \ characters are converted to tabs when data is written to file"	^'9\',(self today - 5 days) printString,'\NewAccount\Roger Whitney\Normal\$100.002\',(self today - 2 days) printString,'\Deposit\Check\3\$20.004\',(self today - 1 days) printString,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency."		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency."		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency."		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency."		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency."	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency."		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency."		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency."		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency."		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency.		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency."		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) totalBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) availableBalance.</body></methods><do-it>duration := 1 days + 1 minutes .Timestamp now+duration </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: totalBalance printString; show: availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript cr;show: 'BalanceIn'; show:searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) totalBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript cr;show: 'BalanceIn'; show:searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) availableBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.Transcript cr;show: 'AvailableBalanceIn'; show:searchTime printString.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) availableBalance.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency.		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency."		assert: account availableBalance = 85 asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency.	"	assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance + amount asCurrency.			transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]	</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 85 asCurrency.	"	assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency.	"	assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	"transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]"	self availableBalance: newAvailableBalance.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: self availableBalance + amount asCurrency]	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance]ifFalse: [].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].depositType = 'ClearCheck'ifFalse:[			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.]Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: totalBalance printString; show: availableBalance printString].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im' 'November 19, 2013' '4:55:01 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im was created at 4:55:01 PM on November 19, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance.]ifFalse: [].aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: newAvailableBalance.			transactionHistory add: aHistory.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;"		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency."		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory historyAvailableBalance |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance.historyAvailableBalance:=0"modify it".]ifFalse: [].aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: newAvailableBalance.			transactionHistory add: aHistory.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory historyAvailableBalance |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance."historyAvailableBalance:=newAvailableBalance."]."ifFalse: []."aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: newAvailableBalance.			transactionHistory add: aHistory.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].depositType = 'ClearCheck'ifFalse:[			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.]Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency."		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency."		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency.		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency.	"	assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency.		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]]."depositType = 'ClearCheck'ifFalse:["			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory."]"Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment5" selector="initialize">initialize	super initialize.	^self</body></methods><do-it>PrintConverter print:234 formattedBy: '######.##'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im' 'November 19, 2013' '6:26:55 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_9.im was created at 6:26:55 PM on November 19, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].depositType = 'ClearCheck'ifFalse:[			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.]Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self"		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency.	"	assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency."		assert: account availableBalance = 85 asCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show:'DepositType=' printString; show:depositType printString.depositType = 'ClearCheck'ifFalse:[			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.]Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show:'DepositType=' printString; show:depositType printString."depositType = 'ClearCheck'ifFalse:["			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory."]"Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show:'DepositType=' printString; show:depositType printString.depositType = 'ClearCheck'ifFalse:[Transcript cr;show:'%%%%%%%5depositType not clearcheck'printString.].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show:'DepositType=' printString; show:depositType printString.depositType = 'ClearCheck'ifFalse:[Transcript cr;show:'%%%%%%%5depositType not clearcheck'printString.			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.]Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show:'DepositType=' printString; show:depositType printString.depositType = 'ClearCheck'ifFalse:[Transcript cr;show:'%%%%%%%5depositType not clearcheck'printString.].			aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.depositType := transaction at:4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].Transcript cr; show:'DepositType=' printString; show:depositType printString.depositType = 'ClearCheck'ifFalse:[Transcript cr;show:'%%%%%%%5depositType not clearcheck'printString.aHistory := BankAccountHistory						newTimestamp: transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory.].Transcript cr;show: aTransaction;show: self balance printString;show: self availableBalance printString].transactionHistory do: [:each | Transcript cr;show: each requestTime printString; show: each totalBalance printString; show: each availableBalance printString].</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: (transactions size)) totalBalance.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.0'.	c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.0'.	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.0'</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.0'.	b := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$245.0'</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) totalBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	Transcript		cr;		show: 'AvailableBalanceIn';		show: searchTime printString.	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) availableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="cancelWithdrawal:">cancelWithdrawal: aType	aType = 'Normal'		ifTrue: 			[self balance: self balance - 5 asCurrency.			self availableBalance: self availableBalance - 5 asCurrency].	aType = 'Preferred'		ifTrue: 			[self balance: self balance - 3 asCurrency.			self availableBalance: self availableBalance - 3 asCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer">customer	^customer</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="customer:">customer: aCustomer	customer := aCustomer</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCancel:collection:">executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'Check')				ifTrue: 					[amount := (aTransaction at: 6) getAmount.					self balance: self balance - amount asCurrency.					^self]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeCheck:">executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeClearCheck:">executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeDeposit:">executeDeposit: aTransaction	| depositType amount |	depositType := aTransaction at: 4.	depositType = 'Cash'		ifTrue: 			[amount := (aTransaction at: 5) getAmount.			self deposit: amount].	depositType = 'Check' ifTrue: [self executeCheck: aTransaction].	depositType = 'ClearCheck' ifTrue: [self executeClearCheck: aTransaction]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeWithdrawal:">executeWithdrawal: aTransaction	| amount |	amount := (aTransaction at: 4) getAmount.	self withdrawal: amount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="getTransactionToBeCanceld:collection:">getTransactionToBeCanceld: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: [^each]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="isValidWithdrawal:">isValidWithdrawal: anAmount	| aType |	aType := self customer type.	aType = 'Normal' ifTrue: [self cancelWithdrawal: aType].	aType = 'Preferred' ifTrue: [self preferredWithdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="preferredWithdrawal:">preferredWithdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &gt;= -1000 asCurrency		ifTrue: 			[self balance: self balance - anAmount asCurrency.			self availableBalance: self availableBalance - anAmount asCurrency]		ifFalse: [self cancelWithdrawal: 'Preferred']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCancelTransaction:collection:">processCancelTransaction: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType newTransaction |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'ClearCheck')				ifTrue: 					[newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;$0'								expandMacrosWith: transactionID asNumber								with: (aTransaction at: 2) asString								with: (aTransaction at: 5) asNumber) asString.					^newTransaction]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processCheckTransaction:">processCheckTransaction: aTransaction	| numberOfDays newTimestamp pc newNumberOfDays newTransaction timestamp |	numberOfDays := (aTransaction at: 5) asNumber.	timestamp := (Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream) + numberOfDays days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTimestamp := (pc formatStringFor: timestamp) string.	newNumberOfDays := 0.	newTransaction := ('&lt;1p&gt;&lt;t&gt;&lt;2s&gt;&lt;t&gt;Deposit&lt;t&gt;ClearCheck&lt;t&gt;&lt;3p&gt;&lt;t&gt;&lt;4s&gt;'				expandMacrosWith: (aTransaction at: 1) asNumber				with: newTimestamp				with: newNumberOfDays asNumber				with: (aTransaction at: 6)) asString.	^newTransaction</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].			transactionType = 'Cancel'				ifTrue: 					[modifiedTransaction := self processCancelTransaction: transaction								collection: modifiedTransactions.					deleteTransaction := self getTransactionToBeCanceld: transaction								collection: modifiedTransactions.					modifiedTransactions remove: deleteTransaction.					modifiedTransactions add: modifiedTransaction]].	modifiedTransactions do: [:each | transactions add: each].	self executeTransactions: transactions</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="withdrawal:">withdrawal: anAmount	| calcBalance |	calcBalance := self availableBalance - anAmount asCurrency.	calcBalance &lt; 0 asCurrency		ifFalse: 			[self balance: self balance - anAmount asCurrency.			self availableBalance: calcBalance]		ifTrue: [self isValidWithdrawal: anAmount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="executeTransactions:">executeTransactions: transactions	transactions do: 			[:aTransaction |			| transaction transactionType depositType transactionTimestamp aHistory |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			depositType := transaction at: 4.			transactionTimestamp := Timestamp						readFromDateAndTime: (transaction at: 2) readStream.			self = nil				ifTrue: 					[^self error: 'Can not process file. NewAccount transaction not found']				ifFalse: 					[transactionType = 'Deposit' ifTrue: [self executeDeposit: transaction].					transactionType = 'Withdrawal'						ifTrue: [self executeWithdrawal: transaction].					transactionType = 'Cancel'						ifTrue: [self executeCancel: transaction collection: transactions]].			depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_10.im' 'November 19, 2013' '8:32:01 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_10.im was created at 8:32:01 PM on November 19, 2013."</do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 123456789 using: '$#,###.00'</do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 123456789 using: '$#.00' </do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 123456789.897 using: '$#.00' </do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 1.00 using: '$#.00'  </do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 1.00 using: '$#.00'   printString</do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 123.00 using: '$#.00'  </do-it><do-it>(NumberPrintPolicy defaultInstance)    thousandsSeparator: $,;    decimalPoint: $..NumberPrintPolicy print: 123.78 using: '$#.00'  </do-it><do-it>(NumberPrintPolicy defaultInstance)    decimalPoint: $..NumberPrintPolicy print: 123.78 using: '$#.00'  </do-it><do-it>a := 123.78.(NumberPrintPolicy defaultInstance)    decimalPoint: $..NumberPrintPolicy print: a using: '$#.00'   </do-it><do-it>a := 123.78.(NumberPrintPolicy defaultInstance)    decimalPoint: $..NumberPrintPolicy print: a using: '$#.00' </do-it><do-it>12.23 asNumber asFixedPoint:2</do-it><do-it>12.293 asNumber asFixedPoint:2 </do-it><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="cashDepositsWithdrawals">cashDepositsWithdrawals	"The \ characters are converted to tabs when data is written to file"		^'1\',  (self today - 3 days) printString ,' \NewAccount\Roger Whitney\Normal\$10.003\',  (self today - 2 days) printString ,'\Deposit\Cash\$30.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="cashDepositsWithdrawals">cashDepositsWithdrawals	"The \ characters are converted to tabs when data is written to file"		^'1\',  (self today - 3 days) printString ,'\NewAccount\Roger Whitney\Normal\$10.003\',  (self today - 2 days) printString ,'\Deposit\Cash\$30.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="checkDeposits">checkDeposits	"The \ characters are converted to tabs when data is written to file"		^'9\',  (self today - 15 days) printString ,'\NewAccount\Roger Whitney\Normal\$100.005\',  (self today - 10 days) printString ,'\Deposit\Check\2\$10.002\',   (self today - 6 days) printString ,'\Deposit\Check\5\$20.007\',  (self today - 5 days) printString ,'\Deposit\Cash\$30.004\',  (self today - 4 days) printString ,'\Withdrawal\$15.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>test data</category><body package="Assignment5" selector="wrongOrder">wrongOrder	"The \ characters are converted to tabs when data is written to file"	^'9\',  (self today - 3 days) printString ,'\NewAccount\Roger Whitney\Normal\$10.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.003\',  (self today - 2 days) printString ,'\Deposit\Cash\$30.00'.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment5" selector="availableBalanceIn:">availableBalanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.		transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) availableBalance</body></methods><do-it>12.00 printFormat: '$#,###.00;[RED]($#,###.00);$0.00'  </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	"aStream		nextPutAll: '$';		print: self amount"(self amount) printFormat: '$#,###.00;[RED]($#,###.00);$0.00'</body></methods><do-it>b:= 12.00 asCurrency.</do-it><do-it>b:= 12.00 asCurrency.</do-it><do-it>b:= 12.00 asCurrency.</do-it><do-it>a:=12.b:=34.c:=a/b.</do-it><do-it>a:=12.b:=34.c:=a/b asFloat</do-it><do-it>12.00 printFormat: '$#,###.00;[RED]($#,###.00);$0.00'</do-it><do-it> '$12.00'</do-it><do-it>12.00 printFormat: '$#,###.00;[RED]($#,###.00);$0.00'</do-it><do-it>a:=23.56.a printFormat: '$#,###.00;[RED]($#,###.00);$0.00' </do-it><do-it>a:=23.564.a printFormat: '$#,###.00;[RED]($#,###.00);$0.00' </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: (self amount asFixedPoint:2)."(self amount) printFormat: '$#,###.00;[RED]($#,###.00);$0.00'"</body></methods><do-it>a := 12.34 asCurrency.a printString.</do-it><do-it>a := 12.00 asCurrency.a printString. </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: (self amount asFixedPoint:2).</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: ((self amount asFixedPoint:2)  copyFrom: 1 to: (self amount size - 1)).</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: ((self amount asFixedPoint:2)  copyFrom: 1 to: ((self amount) size - 1)).</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: (self amount asFixedPoint:2) removeLastCharacter.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment5" selector="removeLastCharacter">removeLastCharacter	^self copyFrom: 1 to: self size - 1</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: (self amount asFixedPoint:2) removeLastCharacter.</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		print: (self amount asFixedPoint:2) printString removeLastCharacter.</body></methods><do-it>a := 12.00 asCurrency.a printString. </do-it><do-it>a:=23123.564.a printFormat: '$#,###.00;[RED]($#,###.00);$0.00' </do-it><do-it>a:=23123.564.a printFormat: '$#,###.00;[RED]($#,###.00);$0.00'</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	"aStream		nextPutAll: '$';		print: self amount."self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00' </body></methods><do-it>a := 12.00 asCurrency.a printString.</do-it><do-it>a := 12.00 asCurrency.a printString.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	(self amount) printFormat: '$#,###.00;[RED]($#,###.00);$0.00'</body></methods><do-it>a := 12.00 asCurrency.a printString. </do-it><do-it>a := 12.00 asCurrency</do-it><do-it>a := 12.00 asCurrency .</do-it><do-it>a := 12.00 asCurrency . </do-it><do-it>a := 12.00 asCurrency .  a printString. </do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment5" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromString: '1.00'.	b := Currency fromNumber: 2.12.	sum := Currency fromNumber: 3.12.	c := a + b.	self assert: sum = c.	d := c - 1.00 asCurrency.	self assert: d = b.	self assert: a printString = '$1.00'</body></methods><remove-selector><class-id>Core.String</class-id> <selector>removeLastCharacter</selector></remove-selector><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	((self amount asNumber asFixedPoint:2) printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><do-it>a := 12.00 asCurrency .  a printString. </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	  ((self amount asNumber asFixedPoint:2) printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><do-it>a := 12.00 asCurrency .  a printString.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	  ((self amount) printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><do-it>a := 12.00 asCurrency .  a printString.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	  ((45.45) printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><do-it>a := 12.00 asCurrency .  a printString.</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	  ((self amount) printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	  aStream nextPutAll:((self amount) printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment5" selector="printOn:">printOn: aStream	aStream		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00')</body></methods><do-it>a := 12.00 asCurrency .  a printString. </do-it><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	b := BankAccount newName: 'SDSU' type: 'Normal' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$245.00'</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.00'.	c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.00'.	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.00'</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	"b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.00'.	c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.00'.	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.00'"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.00'.	"c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.00'.	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.00'"</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'."	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.00'."	c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.00'."	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.00'"</body></methods><do-it>b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.</do-it><do-it>b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.b balance.</do-it><do-it>b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 1255.b balance.</do-it><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b c d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'."	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$-5.00'.	c := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	c withdrawal: 1250.	self assert: c balance printString = '$-1000.00'."	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a d |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	d := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	d withdrawal: 1255.	self assert: d balance printString = '$247.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	b := BankAccount newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 1255.	self assert: b balance printString = '$247.00'.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_10.im' 'November 19, 2013' '11:31:24 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_10.im was created at 11:31:24 PM on November 19, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_10.im' 'November 19, 2013' '11:35:56 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\OOP Assignments\OOP Assignment5_10.im was created at 11:35:56 PM on November 19, 2013."</do-it><do-it>a := '1.00' asCurrency</do-it><do-it>a := '136.0' asCurrency</do-it><do-it>136.0 * 100 asInteger </do-it><do-it>( (136.0 * 100 asInteger) / 100) asFloat</do-it><do-it>1.36 * 100 asInteger</do-it><do-it>( (1.36 * 100 asInteger) / 100) asFloat</do-it><do-it>a := 14.29 asCurrency - 12.93 asCurrency</do-it><do-it>1.23 * 100 asInteger</do-it><do-it>(1.23 * 100) asInteger </do-it><do-it>(10.23 * 100) asInteger  </do-it><do-it>10.23 * 100 asInteger</do-it><do-it>(10.23 * 100) asInteger </do-it><do-it>10.23 * 100 asInteger</do-it><do-it>(10.23 * 100) rounded </do-it><do-it>12.3456 truncateTo:0.01</do-it><do-it>(10.23 * 100) rounded</do-it><do-it>(2.23 * 100) rounded </do-it><do-it>(2.45 * 100) rounded </do-it><do-it>(2.41 * 100) rounded </do-it><do-it>stringParts:= '2013-11-29' tokensBasedOn:$-.numberParts := stringParts collect: [:each | each asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first)</do-it><component-created><name>Assignment6</name> <type>package</type></component-created><component-property><name>Assignment6</name> <type>package</type><property>comment</property> <value>'""'</value></component-property><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <definitionChange>added</definitionChange></component_definition_change><component-created><name>Assignment6</name> <type>package</type></component-created><component-property><name>Assignment6</name> <type>package</type><property>comment</property> <value>'""'</value></component-property><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>amount</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>amount</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&gt;=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&gt;=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&gt;</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&gt;</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>printOn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>printOn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>-</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>-</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>~=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>~=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>+</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>+</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>amount:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>amount:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&lt;</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&lt;</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&lt;=</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>false</meta> <selector>&lt;=</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>fromString:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>fromString:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>newAmount:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>newAmount:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>fromNumber:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Currency</definitionName> <meta>true</meta> <selector>fromNumber:</selector> <definitionChange>added</definitionChange></component_selector_change><class><name>Currency</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>amount date </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><do-it>Currency organization addCategory: #accessing</do-it><do-it>Currency organization addCategory: #accessing</do-it><do-it>Currency classifySymbol: #amount under: #accessing</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="amount:">amount: anObject	amount := anObject * 100 rounded</body></methods><do-it>a := '10.23' asCurrency.</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="amount:">amount: anObject	amount := (anObject * 100) rounded</body></methods><do-it>a := '10.23' asCurrency.</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="amount:">amount: anObject	amount := (anObject * 100) asInteger</body></methods><do-it>a := '10.23' asCurrency.</do-it><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="amount:">amount: anObject	amount := (anObject * 100) rounded</body></methods><do-it>a := '10.23' asCurrency.</do-it><do-it>Date today</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:">newAmount: anAmount	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: Date today.	aCurrency beImmutable.	^aCurrency</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="date:">date: aDate	date := aDate</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="date">date	^date</body></methods><class><name>Currency</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>amount countryCode date </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="countryCode">countryCode	^countryCode</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="date:">date: anObject	date := anObject</body></methods><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="countryCode:">countryCode: anObject	countryCode := (anObject * 100) rounded</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');		nextPutAll: self countryCode.</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');		nextPutAll: self countryCode</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:currencyCode:">newAmount: anAmount currencyCode: aCurrencyCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: Date today.	aCurrency beImmutable.	^aCurrency</body></methods><remove-selector><class-id>Currency class</class-id> <selector>newAmount:</selector></remove-selector><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:countryCode:">newAmount: anAmount countryCode: aCountryCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: Date today.	aCurrency countryCode: aCountryCode.	aCurrency beImmutable.	^aCurrency</body></methods><remove-selector><class-id>Currency class</class-id> <selector>newAmount:currencyCode:</selector></remove-selector><methods><class-id>Currency</class-id> <category>private</category><body package="Assignment6" selector="countryCode:">countryCode: anObject	countryCode := anObject</body></methods><do-it>a := Currency newAmount:10.23 countryCode:'CAD'</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>a := Currency newAmount:10.23 countryCode:'CAD'</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString			^Currency newAmount: aString asNumber</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens |	tokens := aString tokensBasedOn: Character space.	^Currency newAmount: aString asNumber</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) removeLast.	^Currency newAmount: aString asNumber</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) removeLast.	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) copyFrom: 2 to: (tokens at: 1 size).	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) copyFrom: 2 to: ((tokens at: 1) size).	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber countryCode: aCountryCode.</body></methods><do-it>a := Currency fromString:'$1.00 USD'</do-it><do-it>a := Currency fromString:'$1.00 USD'.a amount.</do-it><do-it>a := Currency fromString:'$1.00 USD'.a date.</do-it><do-it>a := Currency fromString:'$1.00 USD'.a countryCode.</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromNumber:as:">fromNumber: aNumber as: aCountryCode	^Currency newAmount: aNumber countryCode: aCountryCode.</body></methods><remove-selector><class-id>Currency class</class-id> <selector>fromNumber:</selector></remove-selector><do-it>a := Currency fromNumber:1.00 as:'CAD'.a countryCode. </do-it><do-it>a := Currency fromNumber:1.00 as:'CAD'.a amount.</do-it><do-it>a := Currency fromNumber:1.00 as:'CAD'.a date.</do-it><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	amount := 0.		^self</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	amount := 0.	countryCode := nil.	^self</body></methods><methods><class-id>Currency</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	amount := 0.	countryCode := nil.	date := nil.	^self</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	self countryCode = aCurrency countryCode	ifTrue: [^Currency newAmount: self amount + aCurrency amount countryCode: (self countryCode)]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="-">- aCurrency	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount - aCurrency amount				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="-">- aCurrency	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount - aCurrency amount countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;">&lt; aCurrencyself countryCode = aCurrency countryCode		ifTrue: [^self amount &lt; aCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;">&lt; aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^self amount &lt; aCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;=">&lt;= aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &gt; aCurrency amount)not].</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;=">&lt;= aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &gt; aCurrency amount) not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;">&lt; aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^self amount &lt; aCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="=">= aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^self amount = aCurrency amount].</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="=">= aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^self amount = aCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&gt;">&gt; aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^self amount &gt; aCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&gt;=">&gt;= aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &lt; aCurrency amount) not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="~=">~= aCurrency	self countryCode = aCurrency countryCode		ifTrue: [^(self amount = aCurrency amount) not]</body></methods><class><name>CurrencyConversion</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>usd cad mxn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="usd">usd	^usd</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="usd:">usd: anObject	usd := anObject</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="cad">cad	^cad</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="cad:">cad: anObject	cad := anObject</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="mxn">mxn	^mxn</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="mxn:">mxn: anObject	mxn := anObject</body></methods><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	usd := nil.	cad := nil.	mxn := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>CurrencyConversion</class-id><body>""</body></comment><do-it>CurrencyConversion organization addCategory: #pri</do-it><do-it>CurrencyConversion organization removeCategory: #pri</do-it><do-it>CurrencyConversion organization addCategory: #private</do-it><do-it>CurrencyConversion organization addCategory: #private</do-it><do-it>CurrencyConversion classifySymbol: #cad: under: #private</do-it><do-it>CurrencyConversion organization addCategory: #private</do-it><do-it>CurrencyConversion classifySymbol: #mxn: under: #private</do-it><do-it>CurrencyConversion organization addCategory: #private</do-it><do-it>CurrencyConversion classifySymbol: #usd: under: #private</do-it><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	usd := nil.	cad := nil.	mxn := nil.	^self</body></methods><class><name>CurrencyConversion</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>usd cad mxn </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil:[instance := CurrencyConversion new].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].		^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].		usdReadStream := 'USD.csv' asFilename readStream.	cadReadStream := 'CAD.csv' asFilename readStream.	mxnReadStream := 'MXN.csv' asFilename readStream.	"transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']"	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	cadReadStream := 'CAD.csv' asFilename readStream.	mxnReadStream := 'MXN.csv' asFilename readStream.	"transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']"	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	"cadReadStream := 'CAD.csv' asFilename readStream.	mxnReadStream := 'MXN.csv' asFilename readStream."		usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd] whileFalse: [self usd add: (usdReadStream nextLine)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	"cadReadStream := 'CAD.csv' asFilename readStream.	mxnReadStream := 'MXN.csv' asFilename readStream."	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [self usd add: usdReadStream nextLine]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	"cadReadStream := 'CAD.csv' asFilename readStream.	mxnReadStream := 'MXN.csv' asFilename readStream."	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [self usd add: usdReadStream nextLine]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 6, 2013' '8:43:53 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 8:43:53 PM on December 6, 2013."</do-it><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.Stream</definitionName> <meta>false</meta> <selector>nextLine</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.Stream</definitionName> <meta>false</meta> <selector>nextLine</selector> <definitionChange>added</definitionChange></component_selector_change><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 6, 2013' '8:50:03 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 8:50:03 PM on December 6, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 6, 2013' '8:50:09 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 8:50:09 PM on December 6, 2013."</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	"cadReadStream := 'CAD.csv' asFilename readStream.	mxnReadStream := 'MXN.csv' asFilename readStream."	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(self usd) add: (usdReadStream nextLine)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(self usd) add: (usdReadStream nextLine)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><do-it>a := CurrencyConversion new.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	instance usd: OrderedCollection new.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	usd := OrderedCollection new.	cad := OrderedCollection new.	mxn := OrderedCollection new.	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 6, 2013' '10:40:11 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 10:40:11 PM on December 6, 2013."</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream cadReadStream mxnReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.Transcript cr; show: usdReadStream.	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.Transcript cr; show: usdReadStream.	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.Transcript cr; show: usdReadStream printString.	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."	^instance</body></methods><do-it>a := CurrencyConversion instance</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 6, 2013' '10:44:12 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 10:44:12 PM on December 6, 2013."</do-it><do-it>a := CurrencyConversion instance.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.Transcript cr; show: usdReadStream printString.	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream upTo: Character space)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."	^instance</body></methods><do-it>a := CurrencyConversion instance. </do-it><do-it>a := CurrencyConversion instance. a usd.</do-it><do-it>a := CurrencyConversion instance.</do-it><do-it>a := CurrencyConversion instance. a usd.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.Transcript cr; show: usdReadStream printString.	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream nextLine)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><do-it>aStream := '"Daily BID rates @ +/- 0%"
"www.oanda.com/currency/historical-rates/"
""
""
"End Date"=,"USD/CAD","USD/MXN","","",""
"2013-10-28","1.0443","12.8745",,,
"2013-10-27","1.0443","12.8745",,,
"2013-10-26","1.0434","12.9443",,,
"2013-10-25","1.0396","12.9755",,,
"2013-10-24","1.0329","12.9083",,,
"2013-10-23","1.0296","12.9386",,,
"2013-10-22","1.0295","12.8797",,,
"2013-10-21","1.0281","12.8501",,,
"2013-10-20","1.0281","12.8501",,,

""
"Period Average","1.0419","13.0243","","",""
"Period Low","1.0281","12.7908","","",""
"Period High","1.0610","13.2206","","",""'
</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream next)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [ (instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [ (instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance ifNil: [instance := CurrencyConversion new.	instance initialize].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [ (instance usd) add: (usdReadStream upTo: $,)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance		ifNil: 			[instance := CurrencyConversion new.			instance initialize].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [instance usd add: (usdReadStream upTo: $,)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance		ifNil: 			[instance := CurrencyConversion new.			instance initialize].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [(instance usd) add: (usdReadStream upTo: $,)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance		ifNil: 			[instance := CurrencyConversion new.			instance initialize].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [( instance usd) add: (usdReadStream upTo: $,)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| usdReadStream |	instance		ifNil: 			[instance := CurrencyConversion new.			instance initialize].	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [instance usd: (usdReadStream tokensBasedOn: Core.Character lf)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| |	instance		ifNil: 			[instance := CurrencyConversion new.			instance initialize].	instance storeData.	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [self usd: (usdReadStream tokensBasedOn: Core.Character lf)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file'].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [self usd: (usdReadStream tokensBasedOn: Core.Character lf)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>usdReadStream := 'USD.csv' asFilename readStream.Transcript show: usdReadStream printString.</do-it><do-it>Transcript clear.</do-it><do-it>usdReadStream := 'USD.csv' asFilename readStream.Transcript show: usdReadStream printString.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		"ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [self usd: (usdReadStream tokensBasedOn: Core.Character lf)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript clear; show: (usdReadStream upTo: Character cr).</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		"ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [self usd: (usdReadStream tokensBasedOn: Core.Character lf)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr).</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.	"usdReadStream isNil		ifFalse: 			[			[[usdReadStream atEnd]				whileFalse: [self usd: (usdReadStream tokensBasedOn: Core.Character lf)]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr).</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			aStream := usdReadStream tokensBasedOn: Core.Character lt.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			aStream := usdReadStream tokensBasedOn: Core.Character lt.Transcript clear; show: aStream.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			aStream := usdReadStream tokensBasedOn: Core.Character lf.Transcript clear; show: aStream.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			aStream := usdReadStream asString tokensBasedOn: Core.Character lf.Transcript clear; show: aStream.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			aStream := (usdReadStream asString) tokensBasedOn: Core.Character lf.Transcript clear; show: aStream.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			"aStream := (usdReadStream asString) tokensBasedOn: Core.Character lf."Transcript clear; show: usdReadStream.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			"aStream := (usdReadStream asString) tokensBasedOn: Core.Character lf."Transcript clear; show: usdReadStream asString.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="storeData">storeData	| usdReadStream aStream |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[			"aStream := (usdReadStream asString) tokensBasedOn: Core.Character lf."Transcript clear; show: usdReadStream printString.			[[usdReadStream atEnd]				whileFalse: ["self usd: (usdReadStream tokensBasedOn: Core.Character lf)"]]					valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']"Transcript show: (usdReadStream upTo: Character cr)."</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	| |	instance ifNil: [instance := CurrencyConversion new].	instance readData.	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.	Transcript		cr;		show: usdReadStream printString	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><do-it>a := CurrencyConversion instance.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream |	usdReadStream := 'USD.csv' asFilename readStream.Transcript clear; cr;	show: (usdReadStream upTo: Character cr)printString	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><do-it>a := CurrencyConversion instance</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents |	usdReadStream := 'USD.csv' asFilename readStream.	fileContents := usdReadStream upTo: Character cr.Transcript clear; cr;	show: fileContents printString	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><do-it>a := CurrencyConversion instance.</do-it><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents |	usdReadStream := 'USD.csv' asFilename readStream.	fileContents := (usdReadStream upTo: Character cr) printString.Transcript clear; cr;	show: fileContents printString	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents |	usdReadStream := 'USD.csv' asFilename readStream.	fileContents := (usdReadStream upTo: Character cr) printString.Transcript clear; cr;	show: fileContents	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	fileContents := (usdReadStream upTo: Character cr) printString.	aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear; cr;	show: fileContents	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	fileContents := (usdReadStream upTo: Character cr) printString.	aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear; cr;	show: aCollection	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	fileContents := (usdReadStream upTo: Character cr) printString.	aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear; cr;	show: aCollection printString	"usdReadStream isNil		ifFalse: 			[[[usdReadStream atEnd] whileFalse: [(instance usd) add: (usdReadStream)]]				valueNowOrOnUnwindDo: [usdReadStream close]]		ifTrue: [^self error: 'Can not open file']."</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.		usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.	aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear; cr;	show: aCollection printString.]						ifTrue: [^self error: 'Can not open file'].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.			Transcript				clear;				cr;				show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear;	cr;show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.]		ifTrue: [^self error: 'Can not open file'].aCollection do:[:each |Transcript clear;	cr;show: aCollection printString]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.]		ifTrue: [^self error: 'Can not open file'].aCollection do:[:each |Transcript clear; cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;';show: each printString]</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.]		ifTrue: [^self error: 'Can not open file'].aCollection do:[:each |Transcript clear; cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;';show: each printString]</body></methods><do-it>a := CurrencyConversion instance.  </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.aCollection do:[:each |Transcript clear; cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;';show: each printString]]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance.  </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |"Transcript clear; cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;';show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '1:13:07 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 1:13:07 AM on December 7, 2013."</do-it><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.aCollection do:[:each |Transcript clear; cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;';show: each printString]]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.aCollection do:[:each |Transcript clear; cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;';show: 12 printString]]		ifTrue: [^self error: 'Can not open file'].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.aCollection do:[:each |Transcript clear; cr; show: each printString]]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '1:29:05 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 1:29:05 AM on December 7, 2013."</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeLast.]		ifTrue: [^self error: 'Can not open file'].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.aCollection removeLast.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.aCollection removeLast.aCollection removeLast.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance.  </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance.  </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast.Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.1 to: 5 do:[aCollection removeFirst. aCollection removeLast]"aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast."Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."aCollection do:[:each |Transcript clear; cr; show: each printString]"Transcript clear;show: aCollection printString.1 to: 5 do:[:each | aCollection removeFirst. aCollection removeLast]."aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeFirst.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast.aCollection removeLast."Transcript cr;cr;show: aCollection printString.]		ifTrue: [^self error: 'Can not open file'].</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.			Transcript				clear;				show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].			Transcript				cr;				cr;				show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.			Transcript				clear;				show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].			Transcript				cr;				cr;				show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear;	show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData">readData	| usdReadStream fileContents aCollection |	usdReadStream := 'USD.csv' asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear;	show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| usdReadStream fileContents aCollection |	usdReadStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	usdReadStream isNil		ifFalse: 			[fileContents := (usdReadStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear;	show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><remove-selector><class-id>CurrencyConversion</class-id> <selector>readData</selector></remove-selector><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.	^instance</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.	^instance</body></methods><do-it>a := CurrencyConversion instance.</do-it><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript clear;	show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'."	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'."	^instance</body></methods><do-it>a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		^aCollection.</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.</do-it><do-it>Transcript clear.a := CurrencyConversion instance.a cad.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].aCollection removeFirst.Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'."	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'."	^instance</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.</do-it><component_definition_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:before:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:before:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addFirst:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addFirst:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>notEnoughElementsError</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>notEnoughElementsError</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>firstObjectError</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>firstObjectError</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeFirst:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeFirst:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>trim</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>trim</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>size</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>size</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>setIndices</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>setIndices</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeAtIndex:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeAtIndex:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>copyWith:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>copyWith:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>makeRoomAtFirst</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>makeRoomAtFirst</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeIndex:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeIndex:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>before:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>before:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>do:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>do:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>after:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>after:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>makeRoomAtLast</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>makeRoomAtLast</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addAllFirst:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addAllFirst:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:after:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:after:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>find:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>find:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>last</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>last</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addAllLast:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addAllLast:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>keysAndValuesDo:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>keysAndValuesDo:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeLast:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeLast:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:beforeIndex:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:beforeIndex:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>increaseCapacity</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>increaseCapacity</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>setIndicesFrom:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>setIndicesFrom:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeAllSuchThat:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeAllSuchThat:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>first</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>first</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>notEmpty</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>notEmpty</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addLastNoCheck:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addLastNoCheck:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>changeSizeTo:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>changeSizeTo:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>copyEmpty</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>copyEmpty</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>collect:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>collect:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>grow</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>grow</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>add:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>noSuchElementError</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>noSuchElementError</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addAll:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addAll:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>lastObjectError</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>lastObjectError</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>detect:ifNone:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>detect:ifNone:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>changeCapacityTo:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>changeCapacityTo:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>remove:ifAbsent:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>remove:ifAbsent:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>includes:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>includes:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>capacity</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>capacity</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>at:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>at:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>at:put:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>at:put:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addLast:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>addLast:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>insert:before:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>insert:before:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeFirst</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeFirst</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>copyWithout:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>copyWithout:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeLast</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>removeLast</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>select:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>select:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>reverseDo:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>reverseDo:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>isEmpty</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>isEmpty</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>needsSafeRebinding</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>needsSafeRebinding</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>withSize:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>withSize:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Collections-Sequenceable</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>new:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>new:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Tools-Inspector</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>inspectorClass</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>inspectorClass</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Tools-IDE-ListIcons</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>toolListIcon</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>true</meta> <selector>toolListIcon</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Tools-Trippy</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>inspectorClasses</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>inspectorClasses</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>BOSS</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>representBinaryOn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>representBinaryOn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>sum</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.OrderedCollection</definitionName> <meta>false</meta> <selector>sum</selector> <definitionChange>added</definitionChange></component_selector_change><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'."	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'."	^instance</body></methods><remove-selector><class-id>CurrencyConversion</class-id> <selector>readData</selector></remove-selector><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].aCollection removeFirst.Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><do-it>Transcript clear.a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			1 to: 5				do: 					[:each |					aCollection removeFirst.					aCollection removeLast].Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '2:14:19 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 2:14:19 AM on December 7, 2013."</do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise1 to: 5				do: 					[:each |					self removeFirst.					self removeLast].</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise	1 to: 5		do: 			[:each |			self removeFirst.			self removeLast]</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise	1 to: 5		do: 			[:each |			self removeFirst.			self removeLast]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript show: aCollection printString.			aCollection clearNoise.Transcript cr; cr;	show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.	^instance</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.</do-it><do-it>Transcript clear.a := CurrencyConversion instance.a cad at:1</do-it><do-it>Transcript clear.a := CurrencyConversion instance.(a cad at:1) </do-it><do-it>Transcript clear.a := CurrencyConversion instance.(a cad at:1) tokensBasedOn: $,</do-it><do-it>Transcript clear.a := CurrencyConversion instance.anEntry := (a cad at:1) tokensBasedOn: $,.anEntry at:1</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript cr;cr;show: aCollection printString.			aCollection clearNoise.Transcript cr;show: aCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.anEntry := (a cad at:1) tokensBasedOn: $,.anEntry at:1 </do-it><do-it>Transcript clear.a := CurrencyConversion instance.anEntry := (a cad at:1) tokensBasedOn: $,.(anEntry at:1) asString.</do-it><do-it>Transcript clear.a := CurrencyConversion instance.anEntry := (a cad at:1) tokensBasedOn: $,.(anEntry at:1).</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]	"	ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aDate.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]"</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromNumber:as:">fromNumber: aNumber as: aCountryCode	^Currency newAmount: aNumber date: Date today countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:countryCode:">newAmount: anAmount date: aDate countryCode: aCountryCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: aDate.	aCurrency countryCode: aCountryCode.	aCurrency beImmutable.	^aCurrency</body></methods><remove-selector><class-id>Currency class</class-id> <selector>newAmount:countryCode:</selector></remove-selector><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromNumber:as:">fromNumber: aNumber as: aCountryCode	^Currency newAmount: aNumber date: (Date today) countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) copyFrom: 2 to: ((tokens at: 1) size).	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber date: (Date today) countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromNumber:as:">fromNumber: aNumber as: aCountryCode	^Currency newAmount: aNumber date: (Date today) countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) copyFrom: 2 to: ((tokens at: 1) size).	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber date: Date today countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromNumber:as:">fromNumber: aNumber as: aCountryCode	^Currency newAmount: aNumber date: Date today countryCode: aCountryCode.</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]	"	ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on:aDate</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on:aDate	fromCountryCode = 'USD'		iftrue:[].</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index |	fromCountryCode = 'USD' iftrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2] toCountryCode = 'MXN'				ifTrue: [index := 3]]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index |	fromCountryCode = 'USD' ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2] toCountryCode = 'MXN'				ifTrue: [index := 3]].	fromCountryCode = 'CAD'		ifTrue: [toCountryCode = 'MXN' ifTrue: [index := 2]				toCountryCode = 'USD' ifTrue: [index := 3]]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3]].	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index line conversionFactor |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			line := usd select: [:each | | anEntry | anEntry := (usd at:each) tokensBasedOn: $,.(anEntry at:1) = aDate ]].	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index line conversionFactor |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			line := usd select: 							[:each |							| anEntry |							anEntry := (usd at: each) tokensBasedOn: $,.							(anEntry at: 1) = aDate]]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index line conversionFactor |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			line := usd select: 							[:each |							| anEntry |							anEntry := (usd at: each) tokensBasedOn: $,.							(anEntry at: 1) = aDate]]Transcript cr; show: '******' printString;show: line printString; show: aDate printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			"^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode" ]</body></methods><do-it>d := Currency fromString:'$1.00 USD'.</do-it><do-it>d := Currency fromString:'$1.00 USD'.d date.</do-it><do-it>d := Currency fromString:'$1.00 USD'.</do-it><do-it>d := Currency fromString:'$1.00 USD'. d date.</do-it><do-it>p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index line conversionFactor |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			line := usd select: 							[:each |							| anEntry |							anEntry := (usd at: each) tokensBasedOn: $,.							(anEntry at: 1) = aDate]].Transcript cr; show: '******' printString;show: line printString; show: aDate printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><do-it>stringParts:= '2013-11-29' tokensBasedOn:$-.numberParts := stringParts collect: [:each | each asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first)</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index line conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			line := usd select: 							[:each |							| anEntry |							anEntry := (usd at: each) tokensBasedOn: $,.stringParts:= (anEntry at: 1) tokensBasedOn:$-.numberParts := stringParts collect: [:a | a asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first)							date = aDate]].Transcript cr; show: '******' printString;show: line printString; show: aDate printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><do-it>Transcript clear.d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index line conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			line := usd select: 							[:each |							| anEntry |							anEntry := (usd at: each) tokensBasedOn: $,.stringParts:= (anEntry at: 1) tokensBasedOn:$-.numberParts := stringParts collect: [:a | a asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first)							date = aDate]].Transcript cr; show: '******' printString;show: line printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><do-it>Transcript clear.a := CurrencyConversion instance.anEntry := (a cad at:1) tokensBasedOn: $,.(anEntry at:1).</do-it><do-it> '"2013-12-02"'</do-it><do-it>Transcript clear.a := CurrencyConversion instance.anEntry := (a cad at:1) tokensBasedOn: $,.(anEntry at:1).</do-it><do-it>stringParts:= '"2013-12-02"' tokensBasedOn:$-.numberParts := stringParts collect: [:each | each asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first)</do-it><do-it>stringParts:= '2013-12-02' tokensBasedOn:$-.numberParts := stringParts collect: [:each | each asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first) </do-it><do-it>stringParts:= '"2013-12-02"' tokensBasedOn:$-.numberParts := stringParts collect: [:each | each asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first) </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '3:49:29 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 3:49:29 AM on December 7, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '3:50:19 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 3:50:19 AM on December 7, 2013."</do-it><do-it> noQuotes := '"2013-11-28","1.0561","13.0779",,,' reject: [:each | each = $"].parts := noQuotes tokensBasedOn: $,</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| noQuotes parts |noQuotes := (usd at: each) reject: [:a | a = $"].parts := noQuotes tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.numberParts := stringParts collect: [:a | a asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate							ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| noQuotes parts |							noQuotes := (usd at: each) reject: [:a | a = $"].							parts := noQuotes tokensBasedOn: $,.														stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate							ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><do-it>noQuotes := '"2013-11-28","1.0561","13.0779",,,' reject: [:each | each = $"].parts := noQuotes tokensBasedOn: $,.stringParts:= (parts at: 1) tokensBasedOn:$-.numberParts := stringParts collect: [:each | each asNumber].date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first)</do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise	1 to: 5		do: 			[:each |			self removeFirst.			self removeLast].	self reject: [:each | each = $"].</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.</do-it><do-it>noQuotes := '"2013-11-28","1.0561","13.0779",,,' reject: [:each | each = $"].parts := noQuotes tokensBasedOn: $,.</do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise	1 to: 5		do: 			[:each |			self removeFirst.			self removeLast].	self do: [:index | index reject: [:each | each = $"]].</body></methods><do-it>Transcript clear.a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'."	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'."	^instance</body></methods><do-it>a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'.</do-it><do-it>a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. Transcript clear;show: a printString.</do-it><do-it>a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index| index reject: [:each | each = $"]].Transcript clear; show: noQuotes printString.</do-it><do-it>a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index| index reject: [:each | each = $"]].Transcript  show: a printString. </do-it><do-it>Transcript clear.</do-it><do-it>a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index| Transcript show: index printString.].</do-it><do-it>Transcript clear. </do-it><do-it>a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index| Transcript cr;show:'***';show: index printString.]. </do-it><do-it>Transcript clear.a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index| index reject: [:each | each = $"]].Transcript cr;show:'***';show: noQuotes printString.</do-it><do-it>Transcript clear.a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index| index reject: [:each | each = $-]].Transcript cr;show:'***';show: noQuotes printString.</do-it><do-it>Transcript clear.a := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index | (index reject: [:each | each = $"])].Transcript cr;show:'***';show: noQuotes printString. </do-it><do-it>Transcript clear.b := OrderedCollection new.a add:'"2013-11-28","1.0561","13.0779",,,'.a add:'"2013-11-28","1.0561","13.0779",,,'. noQuotes := a do: [: index | b add: (index reject: [:each | each = $"])].Transcript cr;show:'***';show: b printString. </do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="clearNoise">clearNoise		| aOrderedCollection |	aOrderedCollection := OrderedCollection new.	1 to: 5		do: 			[:each |			self removeFirst.			self removeLast].	self do: [:index | aOrderedCollection add: (index reject: [:each | each = $"])].	^aOrderedCollection.</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection newCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.Transcript cr;cr;show: aCollection printString.			newCollection := aCollection clearNoise.Transcript cr;show: newCollection printString]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := aCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := aCollection].		aFilename = 'USD.csv' ifTrue: [usd := aCollection]</body></methods><do-it>Transcript clear.a := CurrencyConversion instance. </do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.														stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate							ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.														stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: parts printString.												stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection newCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf."Transcript cr;cr;show: aCollection printString."			newCollection := aCollection clearNoise."Transcript cr;show: newCollection printString"			]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := newCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := newCollection].		aFilename = 'USD.csv' ifTrue: [usd := newCollection]</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: each printString.												stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.  </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].Transcript cr; show:'####'; show: usd printString.				usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: each printString.												stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.a := CurrencyConversion instance.</do-it><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].Transcript cr; show:'####'; show: usd printString.				usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,."Transcript cr; show:'####'; show: each printString."										stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><do-it>Transcript clear.a := CurrencyConversion instance. a cad.</do-it><do-it>Transcript clear.a := CurrencyConversion instance. a usd.</do-it><do-it>Transcript clear.a := CurrencyConversion instance. a mxn.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].Transcript cr; show:'####'; show: usd printString.				"usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: each printString.									stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]"]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |Transcript cr; show:'####'; show: usd printString.		fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			"usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: each printString.									stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]"]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := d + p.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].Transcript cr; show:'####'; show: usd printString.				"usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: each printString.									stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]"]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := p + d</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.Transcript cr; show:'####'; show: each printString.									stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: aDate printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'. s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: aDate printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  "d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'.s := p + d </do-it><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).							date = aDate								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString; show: aDate printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date asString printString; show: aDate printString.							date asString= aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString; show: aDate printString.							date = aDate								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString; show: aDate printString.							(aDate contains: date)								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:countryCode:">newAmount: anAmount date: aDate countryCode: aCountryCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: aDate asDate.	aCurrency countryCode: aCountryCode.	aCurrency beImmutable.	^aCurrency</body></methods><do-it>Date readFromString: '01/02/1999'.</do-it><do-it>Date readFromString: 'November 30, 2013'.</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:countryCode:">newAmount: anAmount date: aDate countryCode: aCountryCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: (Date readFromString: aDate).	aCurrency countryCode: aCountryCode.	aCurrency beImmutable.	^aCurrency</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString; show: aDate printString.							aDate = date								ifTrue: [conversionFactor := parts at: index]		]]."Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString."	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.</do-it><do-it>a := Date today printString.b := Date readFromString: a.</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) copyFrom: 2 to: ((tokens at: 1) size).	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber date: Date today printString countryCode: aCountryCode.</body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromNumber:as:">fromNumber: aNumber as: aCountryCode	^Currency newAmount: aNumber date: Date today printString countryCode: aCountryCode.</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d.</do-it><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d.</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: [:each | Transcript cr; show:each printString.].			usd do: 							[:each |							| parts |							parts := each tokensBasedOn: $,.							stringParts := (parts at: 1) tokensBasedOn:$-.							numberParts := stringParts collect: [:a | a asNumber].							date := Date newDay: (numberParts last) monthNumber: (numberParts at: 2) year: (numberParts first).Transcript cr; show: date printString; show: aDate printString.							aDate = date								ifTrue: [conversionFactor := parts at: index]		]].Transcript cr; show: '******' printString;show: conversionFactor printString; show: date printString.	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '10:05:23 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 10:05:23 AM on December 7, 2013."</do-it><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 					[:each |					Transcript						cr;						show: each printString].			usd do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.					Transcript						cr;						show: date printString;						show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]]]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			usd do: 					[:each |					Transcript						cr;						show: each printString].			usd do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]]]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: 	[:each |	Transcript cr; show: each printString].			usd do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]]]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			convertedCurrency = aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			"^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode" ]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: 	[:each |	Transcript cr; show: each printString].			usd do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]]				]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: 	[:each |	Transcript cr; show: each printString].			usd do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]].				^conversionFactor]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><do-it>p := Currency fromString: '$2.00 MXN'.p amount.</do-it><do-it>a := Currency newAmount: (p amount * 13.0800) date:'November 30, 2013' countryCode:'USD'.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: conversionFactor printString.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: conversionFactor printString.			"convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode" ]</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString.			"convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode" ]</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d. </do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><do-it>p := Currency fromString: '$2.00 MXN'.p amount.a := Currency newAmount: (p amount * 13.0800) date:'November 30, 2013' countryCode:'USD'.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor asFloat) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><do-it>p := Currency fromString: '$2.00 MXN'.p amount.a := Currency newAmount: (p amount * 13.0800 asFloat) date:'November 30, 2013' countryCode:'USD'.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].usd do: 	[:each |	Transcript cr; show: each printString].			usd do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]].				^conversionFactor asNumber]	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"</body></methods><do-it>'13.0800' asNumber</do-it><do-it>'13.0807' asNumber</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: aCurrency date printString countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: self countryCode.			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).			^Currency newAmount: self amount + convertedCurrency amount countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).			^Currency newAmount: self amount + convertedCurrency date: (Date today printString) amount countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) amount countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date."Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: aCurrency amount printString."			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d. </do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: conversionFactor printString; show: convertedCurrency amount.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; in + conversion factor : ' ; show: conversionFactor printString; show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '11:27:29 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 11:27:29 AM on December 7, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '11:27:36 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 11:27:36 AM on December 7, 2013."</do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date aCollection|	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]"aCollection do: 	[:each |	Transcript cr; show: each printString].			aCollection do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]].				^conversionFactor asNumber</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d. </do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: aIndex| conversionFactor |	self do: 	[:each |	Transcript cr; show: each printString].			self do: 					[:each |					| parts stringParts numberParts date |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: aIndex]].</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: aIndex| conversionFactor |"self do: 	[:each |	Transcript cr; show: each printString]."			self do: 					[:each |					| parts stringParts numberParts date |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first."Transcript cr; show: date printString;	show: aDate printString."					aDate = date ifTrue: [conversionFactor := parts at: aIndex]].	^conversionFactor.</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: aIndex	"self do: 	[:each |	Transcript cr; show: each printString]."	| conversionFactor |	self do: 			[:each |			| parts stringParts numberParts date |			parts := each tokensBasedOn: $,.			stringParts := (parts at: 1) tokensBasedOn: $-.			numberParts := stringParts collect: [:a | a asNumber].			date := Date						newDay: numberParts last						monthNumber: (numberParts at: 2)						year: numberParts first.			"Transcript cr; show: date printString;	show: aDate printString."			aDate = date ifTrue: [conversionFactor := parts at: aIndex]].	^conversionFactor</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: aIndex"self do: 	[:each |	Transcript cr; show: each printString]."	| conversionFactor |	self do: 			[:each |			| parts stringParts numberParts date |			parts := each tokensBasedOn: $,.			stringParts := (parts at: 1) tokensBasedOn: $-.			numberParts := stringParts collect: [:a | a asNumber].			date := Date						newDay: numberParts last						monthNumber: (numberParts at: 2)						year: numberParts first."Transcript cr; show: date printString;	show: aDate printString."			aDate = date ifTrue: [conversionFactor := parts at: aIndex]].	^conversionFactor</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date aCollection|	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]""aCollection do: 	[:each |	Transcript cr; show: each printString].			aCollection do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]].				^conversionFactor asNumber"	aCollection getConversionFactor: aDate for: index</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: anIndex"self do: 	[:each |	Transcript cr; show: each printString]."	| conversionFactor |	self do: 			[:each |			| parts stringParts numberParts date |			parts := each tokensBasedOn: $,.			stringParts := (parts at: 1) tokensBasedOn: $-.			numberParts := stringParts collect: [:a | a asNumber].			date := Date						newDay: numberParts last						monthNumber: (numberParts at: 2)						year: numberParts first."Transcript cr; show: date printString;	show: aDate printString."			aDate = date ifTrue: [conversionFactor := parts at: anIndex]].	^conversionFactor</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date aCollection|	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]""aCollection do: 	[:each |	Transcript cr; show: each printString].			aCollection do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]].				^conversionFactor asNumber"	^aCollection getConversionFactor: aDate for: index</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index conversionFactor stringParts numberParts date aCollection|	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].	"	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3]]""aCollection do: 	[:each |	Transcript cr; show: each printString].			aCollection do: 					[:each |					| parts |					parts := each tokensBasedOn: $,.					stringParts := (parts at: 1) tokensBasedOn: $-.					numberParts := stringParts collect: [:a | a asNumber].					date := Date								newDay: numberParts last								monthNumber: (numberParts at: 2)								year: numberParts first.Transcript cr; show: date printString;	show: aDate printString.					aDate = date ifTrue: [conversionFactor := parts at: index]].				^conversionFactor asNumber"	^(aCollection getConversionFactor: aDate for: index) asNumber.</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d. </do-it><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index aCollection|	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].		fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := cad].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := mxn].	^(aCollection getConversionFactor: aDate for: index) asNumber.</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index aCollection|	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].		fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := cad].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := mxn].	^(aCollection getConversionFactor: aDate for: index) asNumber.</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index aCollection |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := cad].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := mxn].	^(aCollection getConversionFactor: aDate for: index) asNumber</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'USD'.p := Currency fromString: '$2.00 MXN'."d := Currency fromString:'$1.00 USD'. p := Currency newAmount:2 date:'November 30, 2013' countryCode:'MXN'."s := p + d.  </do-it><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'CAD'.p := Currency fromString: '$2.00 MXN'.s := p + d. </do-it><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: anIndex	| conversionFactor |	self do: 			[:each |			| parts stringParts numberParts date |			parts := each tokensBasedOn: $,.			stringParts := (parts at: 1) tokensBasedOn: $-.			numberParts := stringParts collect: [:a | a asNumber].			date := Date						newDay: numberParts last						monthNumber: (numberParts at: 2)						year: numberParts first.			aDate = date ifTrue: [conversionFactor := parts at: anIndex]].	^conversionFactor</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection newCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.			newCollection := aCollection clearNoise.Transcript cr;show: newCollection printString			]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := newCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := newCollection].		aFilename = 'USD.csv' ifTrue: [usd := newCollection]</body></methods><do-it>Transcript clear.  d := Currency newAmount: 1 date:'November 30, 2013' countryCode:'CAD'.p := Currency fromString: '$2.00 MXN'.s := p + d.</do-it><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d.</do-it><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 2 date:'November 21, 2013' countryCode:'MXN'.s := p + d.</do-it><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d.</do-it><do-it>0.0770 truncateTo: 2</do-it><do-it>0.0770 truncated</do-it><do-it> 0</do-it><do-it>0.0770 truncateTo:2</do-it><do-it>0.0770 </do-it><do-it>0.0770  truncateTo:2</do-it><do-it>0.0770  * 1</do-it><do-it> 0.077</do-it><do-it>((0.0770  * 1 ) *100)rounded</do-it><do-it>((0.0770  * 1 ) *100)</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '12:38:51 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 12:38:51 PM on December 7, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '12:39:12 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 12:39:12 PM on December 7, 2013."</do-it><do-it>0.0770 * 1 truncated</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(aCurrency amount * conversionFactor) truncated date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d.</do-it><do-it>(1 * 0.0770 ) truncated </do-it><do-it>1 * 0.0770  truncated  </do-it><do-it>0.0770 * 1 truncated   </do-it><do-it>0.0770 * 1 truncateTo:2</do-it><do-it>0.0770 * 1 truncateTo:2 </do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(conversionFactor * aCurrency amount truncated) truncated date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d. </do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:((conversionFactor * aCurrency amount) truncated) truncated date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d. </do-it><do-it>(0.0770 * 1) truncated</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:(conversionFactor * aCurrency amount truncated) truncated date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d. </do-it><do-it>(0.0770 * 1) truncated </do-it><do-it>0.0770 * 1 truncated  </do-it><do-it>0.0770 * 1 truncateTo:2</do-it><do-it>0.0770 * 1 truncated</do-it><do-it>(0.0770 * 1) truncateTo:0.01</do-it><do-it>(0.0780 * 1) truncateTo:0.01</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			[aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:((aCurrency amount * conversionFactor)truncateTo: 0.01) date: (aCurrency date printString) countryCode: (self countryCode).Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d.</do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aCurrencyConversion convertedCurrency conversionFactor |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			["aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:((aCurrency amount * conversionFactor)truncateTo: 0.01) date: (aCurrency date printString) countryCode: (self countryCode)."			convertedCurrency := self convertCurrency: aCurrency.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion instance.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: (aCurrency amount * conversionFactor truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.	^convertedCurrency.</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| convertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			["aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:((aCurrency amount * conversionFactor)truncateTo: 0.01) date: (aCurrency date printString) countryCode: (self countryCode)."			convertedCurrency := self convertCurrency: aCurrency.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ]</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion instance.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: (aCurrency amount * conversionFactor truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.	^convertedCurrency.</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| convertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount countryCode: self countryCode]		ifFalse:			["aCurrencyConversion := CurrencyConversion instance.			conversionFactor := aCurrencyConversion convertFrom: (aCurrency countryCode) to: (self countryCode) on: aCurrency date.			convertedCurrency := Currency newAmount:((aCurrency amount * conversionFactor)truncateTo: 0.01) date: (aCurrency date printString) countryCode: (self countryCode)."			convertedCurrency := self convertCurrency: aCurrency.			^Currency newAmount: self amount + convertedCurrency amount date: (Date today printString) countryCode: self countryCode ].</body></methods><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d. </do-it><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| convertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount				countryCode: self countryCode]		ifFalse: 			[convertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount + convertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="-">- aCurrency	| convertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount - aCurrency amount				countryCode: self countryCode]		ifFalse: 			[convertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount - convertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;">&lt; aCurrency| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^self amount &lt; aCurrency amount]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^self amount &lt; aConvertedCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;">&lt; aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^self amount &lt; aCurrency amount]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^self amount &lt; aConvertedCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="-">- aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount - aCurrency amount				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount - aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="-">- aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount - aCurrency amount				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount - aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount + aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;=">&lt;= aCurrency| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &gt; aCurrency amount) not]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^(self amount &gt; aConvertedCurrency amount)not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;=">&lt;= aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &gt; aCurrency amount) not]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^(self amount &gt; aConvertedCurrency amount) not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&lt;=">&lt;= aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &gt; aCurrency amount) not]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^(self amount &gt; aConvertedCurrency amount) not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="=">= aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^self amount = aCurrency amount]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^self amount = aConvertedCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&gt;">&gt; aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^self amount &gt; aCurrency amount]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^self amount &gt; aConvertedCurrency amount]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="&gt;=">&gt;= aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^(self amount &lt; aCurrency amount) not]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^(self amount &lt; aConvertedCurrency amount) not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="~=">~= aCurrency| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^(self amount = aCurrency amount) not]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^(self amount = aConvertedCurrency amount)not]</body></methods><methods><class-id>Currency</class-id> <category>comparing</category><body package="Assignment6" selector="~=">~= aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: [^(self amount = aCurrency amount) not]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^(self amount = aConvertedCurrency amount) not]</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '10:46:28 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 10:46:28 PM on December 7, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im' 'December 7, 2013' '10:46:34 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6.im was created at 10:46:34 PM on December 7, 2013."</do-it><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balanceIn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balanceIn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>isValidWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>isValidWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeClearCheck:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeClearCheck:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>preferredWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>preferredWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCheck:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCheck:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeDeposit:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeDeposit:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeTransactions:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeTransactions:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>cancelWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>cancelWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionsFrom:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionsFrom:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalanceIn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalanceIn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCancelTransaction:collection:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCancelTransaction:collection:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processTransactions:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processTransactions:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>getTransactionToBeCanceld:collection:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>getTransactionToBeCanceld:collection:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCheckTransaction:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCheckTransaction:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCancel:collection:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCancel:collection:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>newName:type:balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>newName:type:balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>fromFile:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>fromFile:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>executeNewAccount:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>executeNewAccount:</selector> <definitionChange>added</definitionChange></component_selector_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>name</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>name</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>type:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>type:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>name:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>name:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>type</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>false</meta> <selector>type</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>true</meta> <selector>newName:type:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Customer</definitionName> <meta>true</meta> <selector>newName:type:</selector> <definitionChange>added</definitionChange></component_selector_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>requestTime:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>requestTime:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>totalBalance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>totalBalance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>availableBalance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>availableBalance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>totalBalance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>totalBalance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>availableBalance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>availableBalance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>requestTime</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>false</meta> <selector>requestTime</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>true</meta> <selector>newTimestamp:balance:availableBalance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>true</meta> <selector>newTimestamp:balance:availableBalance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountHistory</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>customer totalBalance availableBalance transactionHistory </inst-vars><class-inst-vars>count </class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><do-it>BankAccount organization addCategory: #accessing</do-it><do-it>BankAccount classifySymbol: #availableBalance under: #accessing</do-it><do-it>BankAccount organization addCategory: #accessing</do-it><do-it>BankAccount classifySymbol: #balance under: #accessing</do-it><do-it>BankAccount organization addCategory: #accessing</do-it><do-it>BankAccount classifySymbol: #transactionHistory under: #accessing</do-it><do-it>Customer organization addCategory: #private</do-it><do-it>Customer organization addCategory: #private</do-it><do-it>Customer classifySymbol: #name: under: #private</do-it><do-it>Customer organization addCategory: #private</do-it><do-it>Customer classifySymbol: #type: under: #private</do-it><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID customer totalBalance availableBalance transactionHistory </inst-vars><class-inst-vars>count </class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="accountID:">accountID: anObject	accountID := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="acountID">acountID	^accountID</body></methods><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="routingNumber">routingNumber	^routingNumber</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="routingNumber:">routingNumber: anObject	routingNumber := anObject</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="bankAccount">bankAccount	^bankAccount</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="bankAccount:">bankAccount: anObject	bankAccount := anObject</body></methods><methods><class-id>Core.Bank</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	routingNumber := nil.	bankAccount := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Core.Bank</class-id><body>""</body></comment><do-it>Bank organization addCategory: #private</do-it><do-it>Bank organization addCategory: #private</do-it><do-it>Bank classifySymbol: #bankAccount: under: #private</do-it><do-it>Bank organization addCategory: #private</do-it><do-it>Bank classifySymbol: #routingNumber: under: #private</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>transactionsFrom:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					a &lt;=b ].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: [:a :b | a &lt;= b].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].			transactionType = 'Cancel'				ifTrue: 					[modifiedTransaction := self processCancelTransaction: transaction								collection: modifiedTransactions.					deleteTransaction := self getTransactionToBeCanceld: transaction								collection: modifiedTransactions.					modifiedTransactions remove: deleteTransaction.					modifiedTransactions add: modifiedTransaction]].	modifiedTransactions do: [:each | transactions add: each].	self executeTransactions: transactions</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>processTransactions:</selector></remove-selector><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^self shouldNotImplement</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	^aBank	</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	^aBank</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im' 'December 8, 2013' '1:12:32 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im was created at 1:12:32 AM on December 8, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im' 'December 8, 2013' '1:12:42 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im was created at 1:12:42 AM on December 8, 2013."</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment5" selector="getTokens">getTokens	^self tokensBasedOn: Character tab</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asCurrency</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>asCurrency</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>getTokens</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>getTokens</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>getAmount</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.String</definitionName> <meta>false</meta> <selector>getAmount</selector> <definitionChange>added</definitionChange></component_selector_change><remove-selector><class-id>Core.String</class-id> <selector>asCurrency</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>bankAccount</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>bankAccount</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccounts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	aBank bankAccount: (OrderedCollection new).	^aBank</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="bankAccounts">bankAccounts	^bankAccount</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>bankAccount</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>private</category><body package="Assignment6" selector="bankAccounts:">bankAccounts: anObject	bankAccount := anObject</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	aBank bankAccounts: (OrderedCollection new).	^aBank</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>bankAccount:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="bankAccounts">bankAccounts	^bankAccounts</body></methods><methods><class-id>Core.Bank</class-id> <category>private</category><body package="Assignment6" selector="bankAccounts:">bankAccounts: anObject	bankAccounts := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream transactions |	readStream := aFilename asFilename readStream.	transactions := SortedCollection sortBlock: 					[:a :b |					| t1 t2 timestamp1 timestamp2 |					t1 := a getTokens.					t2 := b getTokens.					timestamp1 := Timestamp readFromDateAndTime: (t1 at: 2) readStream.					timestamp2 := Timestamp readFromDateAndTime: (t2 at: 2) readStream.					timestamp1 &lt;= timestamp2].	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [transactions add: readStream nextLine].			self processTransactions: transactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="processTransactions:">processTransactions: transactions	| modifiedTransactions |	modifiedTransactions := SortedCollection new.	transactions do: 			[:aTransaction |			| transactionType transaction depositType modifiedTransaction deleteTransaction |			transaction := aTransaction getTokens.			transactionType := transaction at: 3.			transactionType = 'Deposit'				ifTrue: 					[depositType := transaction at: 4.					depositType = 'Check'						ifTrue: 							[modifiedTransaction := self processCheckTransaction: transaction.							modifiedTransactions add: modifiedTransaction]].			transactionType = 'Cancel'				ifTrue: 					[modifiedTransaction := self processCancelTransaction: transaction								collection: modifiedTransactions.					deleteTransaction := self getTransactionToBeCanceld: transaction								collection: modifiedTransactions.					modifiedTransactions remove: deleteTransaction.					modifiedTransactions add: modifiedTransaction]].	modifiedTransactions do: [:each | transactions add: each].	self executeTransactions: transactions</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>processTransactions:</selector></remove-selector><remove-selector><class-id>Core.Bank</class-id> <selector>transactionsFrom:</selector></remove-selector><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>accountID:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>accountID:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeDeposit:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeDeposit:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCancel:collection:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCancel:collection:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionsFrom:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionsFrom:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>withdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>isValidWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>isValidWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeTransactions:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeTransactions:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>deposit:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCancelTransaction:collection:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCancelTransaction:collection:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>preferredWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>preferredWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>acountID</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>acountID</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balanceIn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balanceIn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCheck:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeCheck:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCheckTransaction:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processCheckTransaction:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeClearCheck:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeClearCheck:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>customer:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>getTransactionToBeCanceld:collection:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>getTransactionToBeCanceld:collection:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>executeWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>cancelWithdrawal:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>cancelWithdrawal:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>transactionHistory</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalanceIn:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>availableBalanceIn:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processTransactions:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>false</meta> <selector>processTransactions:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>newName:type:balance:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>newName:type:balance:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>fromFile:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>fromFile:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>executeNewAccount:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccount</definitionName> <meta>true</meta> <selector>executeNewAccount:</selector> <definitionChange>added</definitionChange></component_selector_change><class><name>Transaction</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transactionID transactionTimestamp transactionType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Transaction</class-id> <category>accessing</category><body package="Assignment6" selector="transactionID">transactionID	^transactionID</body></methods><methods><class-id>Core.Transaction</class-id> <category>accessing</category><body package="Assignment6" selector="transactionID:">transactionID: anObject	transactionID := anObject</body></methods><methods><class-id>Core.Transaction</class-id> <category>accessing</category><body package="Assignment6" selector="transactionTimestamp">transactionTimestamp	^transactionTimestamp</body></methods><methods><class-id>Core.Transaction</class-id> <category>accessing</category><body package="Assignment6" selector="transactionTimestamp:">transactionTimestamp: anObject	transactionTimestamp := anObject</body></methods><methods><class-id>Core.Transaction</class-id> <category>accessing</category><body package="Assignment6" selector="transactionType">transactionType	^transactionType</body></methods><methods><class-id>Core.Transaction</class-id> <category>accessing</category><body package="Assignment6" selector="transactionType:">transactionType: anObject	transactionType := anObject</body></methods><methods><class-id>Core.Transaction</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	transactionID := nil.	transactionTimestamp := nil.	transactionType := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromBytes:">fromBytes: aByteObject	" *** This method was defined by String class as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>Core.Transaction</class-id><body>""</body></comment><do-it>Transaction organization addCategory: #private</do-it><do-it>Transaction organization addCategory: #private</do-it><do-it>Transaction classifySymbol: #transactionID: under: #private</do-it><do-it>Transaction organization addCategory: #private</do-it><do-it>Transaction classifySymbol: #transactionTimestamp: under: #private</do-it><do-it>Transaction organization addCategory: #private</do-it><do-it>Transaction classifySymbol: #transactionType: under: #private</do-it><class><name>NewAccount</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID name customerType amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="accountID">accountID	^accountID</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="accountID:">accountID: anObject	accountID := anObject</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="name">name	^name</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="customerType">customerType	^customerType</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="customerType:">customerType: anObject	customerType := anObject</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="amount">amount	^amount</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="amount:">amount: anObject	amount := anObject</body></methods><methods><class-id>Core.NewAccount</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	accountID := nil.	name := nil.	customerType := nil.	amount := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Core.NewAccount</class-id><body>""</body></comment><do-it>NewAccount organization addCategory: #private</do-it><do-it>NewAccount organization addCategory: #private</do-it><do-it>NewAccount classifySymbol: #accountID: under: #private</do-it><do-it>NewAccount organization addCategory: #private</do-it><do-it>NewAccount classifySymbol: #amount: under: #private</do-it><do-it>NewAccount organization addCategory: #private</do-it><do-it>NewAccount classifySymbol: #customerType: under: #private</do-it><do-it>NewAccount organization addCategory: #private</do-it><do-it>NewAccount classifySymbol: #name: under: #private</do-it><class><name>Deposit</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>depositType fromAccountInfo toAccountInfo checkNumber hold amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="depositType">depositType	^depositType</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="depositType:">depositType: anObject	depositType := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInfo">fromAccountInfo	^fromAccountInfo</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInfo:">fromAccountInfo: anObject	fromAccountInfo := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInfo">toAccountInfo	^toAccountInfo</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInfo:">toAccountInfo: anObject	toAccountInfo := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="checkNumber">checkNumber	^checkNumber</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="checkNumber:">checkNumber: anObject	checkNumber := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="hold">hold	^hold</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="hold:">hold: anObject	hold := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="amount">amount	^amount</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="amount:">amount: anObject	amount := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	depositType := nil.	fromAccountInfo := nil.	toAccountInfo := nil.	checkNumber := nil.	hold := nil.	amount := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Core.Deposit</class-id><body>""</body></comment><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit classifySymbol: #amount: under: #private</do-it><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit classifySymbol: #checkNumber: under: #private</do-it><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit classifySymbol: #depositType: under: #private</do-it><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit classifySymbol: #fromAccountInfo: under: #private</do-it><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit classifySymbol: #hold: under: #private</do-it><do-it>Deposit organization addCategory: #private</do-it><do-it>Deposit classifySymbol: #toAccountInfo: under: #private</do-it><class><name>Withdrawal</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>withdrawaltype fromAccountInfo toAccountInfo checkNumber amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawaltype">withdrawaltype	^withdrawaltype</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawaltype:">withdrawaltype: anObject	withdrawaltype := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInfo">fromAccountInfo	^fromAccountInfo</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInfo:">fromAccountInfo: anObject	fromAccountInfo := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInfo">toAccountInfo	^toAccountInfo</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInfo:">toAccountInfo: anObject	toAccountInfo := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="checkNumber">checkNumber	^checkNumber</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="checkNumber:">checkNumber: anObject	checkNumber := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="amount">amount	^amount</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="amount:">amount: anObject	amount := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	withdrawaltype := nil.	fromAccountInfo := nil.	toAccountInfo := nil.	checkNumber := nil.	amount := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Core.Withdrawal</class-id><body>""</body></comment><do-it>Withdrawal organization addCategory: #private</do-it><do-it>Withdrawal organization addCategory: #private</do-it><do-it>Withdrawal classifySymbol: #amount: under: #private</do-it><do-it>Withdrawal organization addCategory: #private</do-it><do-it>Withdrawal classifySymbol: #checkNumber: under: #private</do-it><do-it>Withdrawal organization addCategory: #private</do-it><do-it>Withdrawal classifySymbol: #fromAccountInfo: under: #private</do-it><do-it>Withdrawal organization addCategory: #private</do-it><do-it>Withdrawal classifySymbol: #toAccountInfo: under: #private</do-it><do-it>Withdrawal organization addCategory: #private</do-it><do-it>Withdrawal classifySymbol: #withdrawaltype: under: #private</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>withdrawaltype</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>withdrawaltype</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Withdrawal</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>withdrawalType fromAccountInfo toAccountInfo checkNumber amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawalType">withdrawalType	^withdrawaltype</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>withdrawaltype</selector></remove-selector><methods><class-id>Core.Withdrawal</class-id> <category>private</category><body package="Assignment6" selector="withdrawalType:">withdrawalType: anObject	withdrawaltype := anObject</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>withdrawaltype:</selector></remove-selector><class><name>Cancel</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountInfo transactionIDToCancel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="accountInfo">accountInfo	^accountInfo</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="accountInfo:">accountInfo: anObject	accountInfo := anObject</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="transactionIDToCancel">transactionIDToCancel	^transactionIDToCancel</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="transactionIDToCancel:">transactionIDToCancel: anObject	transactionIDToCancel := anObject</body></methods><methods><class-id>Core.Cancel</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	accountInfo := nil.	transactionIDToCancel := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Core.Cancel</class-id><body>""</body></comment><do-it>Cancel organization addCategory: #private</do-it><do-it>Cancel organization addCategory: #private</do-it><do-it>Cancel classifySymbol: #accountInfo: under: #private</do-it><do-it>Cancel organization addCategory: #private</do-it><do-it>Cancel classifySymbol: #transactionIDToCancel: under: #private</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>accountInfo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>accountInfo</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Cancel</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountInformation transactionIDToCancel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="accountInformation">accountInformation	^accountInfo</body></methods><remove-selector><class-id>Core.Cancel</class-id> <selector>accountInfo</selector></remove-selector><methods><class-id>Core.Cancel</class-id> <category>private</category><body package="Assignment6" selector="accountInformation:">accountInformation: anObject	accountInfo := anObject</body></methods><remove-selector><class-id>Core.Cancel</class-id> <selector>accountInfo:</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>fromAccountInfo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>fromAccountInfo</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>toAccountInfo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>toAccountInfo</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Deposit</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>depositType fromAccountInformation toAccountInformation checkNumber hold amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInformation">fromAccountInformation	^fromAccountInfo</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInformation">fromAccountInformation	^fromAccountInfo</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>fromAccountInfo</selector></remove-selector><remove-selector><class-id>Core.Deposit</class-id> <selector>fromAccountInfo</selector></remove-selector><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInformation">toAccountInformation	^toAccountInfo</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInformation">toAccountInformation	^toAccountInfo</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>toAccountInfo</selector></remove-selector><remove-selector><class-id>Core.Deposit</class-id> <selector>toAccountInfo</selector></remove-selector><methods><class-id>Core.Withdrawal</class-id> <category>private</category><body package="Assignment6" selector="fromAccountInformation:">fromAccountInformation: anObject	fromAccountInfo := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>private</category><body package="Assignment6" selector="fromAccountInformation:">fromAccountInformation: anObject	fromAccountInfo := anObject</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>fromAccountInfo:</selector></remove-selector><remove-selector><class-id>Core.Deposit</class-id> <selector>fromAccountInfo:</selector></remove-selector><methods><class-id>Core.Withdrawal</class-id> <category>private</category><body package="Assignment6" selector="toAccountInformation:">toAccountInformation: anObject	toAccountInfo := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>private</category><body package="Assignment6" selector="toAccountInformation:">toAccountInformation: anObject	toAccountInfo := anObject</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>toAccountInfo:</selector></remove-selector><remove-selector><class-id>Core.Deposit</class-id> <selector>toAccountInfo:</selector></remove-selector><remove-selector><class-id>Core.Transaction class</class-id> <selector>fromBytes:</selector></remove-selector><do-it>Transaction class organization removeCategory: #'instance creation'</do-it><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im' 'December 8, 2013' '3:35:02 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im was created at 3:35:02 AM on December 8, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im' 'December 8, 2013' '3:35:13 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im was created at 3:35:13 AM on December 8, 2013."</do-it><do-it>1.1572 truncateTo: 0.01</do-it><do-it>1.1572 truncateTo: 0.01 </do-it><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion instance.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: ((aCurrency amount * conversionFactor) truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.	^convertedCurrency.</body></methods><do-it>1 *1.1572 truncateTo: 0.01  </do-it><do-it>(1 *1.1572) truncateTo: 0.01  </do-it><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 1 date:'November 21, 2013' countryCode:'MXN'.s := p + d. </do-it><do-it>Transcript clear.  p := Currency fromString: '$1.00 USD'.d := Currency newAmount: 2 date:'November 21, 2013' countryCode:'MXN'.s := p + d. </do-it><component-created><name>AutoComplete</name> <type>package</type></component-created><parcel-loaded><name>AutoComplete</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'AutoComplete.pcl'))</filename></parcel-loaded><component-created><name>RBTabbedToolsets</name> <type>package</type></component-created><parcel-loaded><name>RBTabbedToolsets</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'RBTabbedToolsets.pcl'))</filename></parcel-loaded><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountID:name:customerType:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountID: anAccountID name: aName customerType: aCustomerType amount: anAmount	</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := super new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := super new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><methods><class-id>Core.Transaction</class-id> <category>private</category><body package="Assignment6" selector="transactionID:">transactionID: anObject	transactionID := anObject</body></methods><methods><class-id>Core.Transaction</class-id> <category>private</category><body package="Assignment6" selector="transactionID:">transactionID: anObject	transactionID := anObject</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := super new."	aTransaction transactionID: aTransactionID."	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := super new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><methods><class-id>Core.Transaction</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	transactionID := nil.	transactionTimestamp := nil.	transactionType := nil.	^self</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := Transaction new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><do-it>a := Transaction newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit'</do-it><methods><class-id>Core.Transaction</class-id> <category>private</category><body package="Assignment6" selector="transactionID:">transactionID: anObject	transactionID := anObject</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^self shouldNotImplement</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := super new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><do-it>a:= Customer newName:'hahaha' type: 'Normal'.</do-it><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := super new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><methods><class-id>Core.Transaction class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType	| aTransaction |	aTransaction := Transaction new.	aTransaction transactionID: aTransactionID.	aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType.	^aTransaction</body></methods><class><name>Transaction</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transactionID transactionTimestamp transactionType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><do-it>a := Transaction newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit'</do-it><do-it>a := Transaction newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit'.a transactionID.</do-it><do-it>a := Transaction newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit'.a transactionTimestamp</do-it><do-it>a := Transaction newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit'.a transactionType</do-it><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountID:name:customerType:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountID: anAccountID name: aName customerType: aCustomerType amount: anAmount</body></methods><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountID:name:customerType:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountID: anAccountID name: aName customerType: aCustomerType amount: anAmount| aNewAccount |	aNewAccount := NewAccount new.	aNewAccount transactionID: aTransactionID.	"aTransaction transactionTimestamp: aTransactionTimestamp.	aTransaction transactionType: aTransactionType."	^aNewAccount</body></methods><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountID:name:customerType:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountID: anAccountID name: aName customerType: aCustomerType amount: anAmount| aNewAccount |	aNewAccount := NewAccount new.	aNewAccount transactionID: aTransactionID.	aNewAccount transactionTimestamp: aTransactionTimestamp.	aNewAccount transactionType: aTransactionType.	aNewAccount accountID: anAccountID.	aNewAccount name: aName.	^aNewAccount</body></methods><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountID:name:customerType:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountID: anAccountID name: aName customerType: aCustomerType amount: anAmount| aNewAccount |	aNewAccount := NewAccount new.	aNewAccount transactionID: aTransactionID.	aNewAccount transactionTimestamp: aTransactionTimestamp.	aNewAccount transactionType: aTransactionType.	aNewAccount accountID: anAccountID.	aNewAccount name: aName.	aNewAccount customerType: aCustomerType.	aNewAccount amount: anAmount.	^aNewAccount</body></methods><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12.</do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a transactionType </do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a transactionID</do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a transactionTimestamp</do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a accountID</do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a name</do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a customerType</do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. a amount</do-it><methods><class-id>Core.Cancel class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Core.Deposit class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Core.Withdrawal class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Core.NewAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountID:name:customerType:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountID: anAccountID name: aName customerType: aCustomerType amount: anAmount	| aNewAccount |	aNewAccount := NewAccount new.	aNewAccount transactionID: aTransactionID.	aNewAccount transactionTimestamp: aTransactionTimestamp.	aNewAccount transactionType: aTransactionType.	aNewAccount accountID: anAccountID.	aNewAccount name: aName.	aNewAccount customerType: aCustomerType.	aNewAccount amount: anAmount.	^aNewAccount</body></methods><methods><class-id>Core.Cancel class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountInformation:transactionIDToCancel:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountInformation: anAccountInformation transactionIDToCancel: aTransactionIDToCancel	| aNewAccount |	aNewAccount := NewAccount new.	aNewAccount transactionID: aTransactionID.	aNewAccount transactionTimestamp: aTransactionTimestamp.	aNewAccount transactionType: aTransactionType.	aNewAccount accountInformation: anAccountInformation.	aNewAccount transactionIDToCancel: aTransactionIDToCancel.	^aNewAccount</body></methods><methods><class-id>Core.Cancel class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountInformation:transactionIDToCancel:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountInformation: anAccountInformation transactionIDToCancel: aTransactionIDToCancel	| aNewAccount |	aNewAccount := NewAccount new.	aNewAccount transactionID: aTransactionID.	aNewAccount transactionTimestamp: aTransactionTimestamp.	aNewAccount transactionType: aTransactionType.	aNewAccount accountInformation: anAccountInformation.	aNewAccount transactionIDToCancel: aTransactionIDToCancel.	^aNewAccount</body></methods><methods><class-id>Core.Cancel class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountInformation:transactionIDToCancel:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountInformation: anAccountInformation transactionIDToCancel: aTransactionIDToCancel	| aCancel |	aCancel := NewAccount new.	aCancel transactionID: aTransactionID.	aCancel transactionTimestamp: aTransactionTimestamp.	aCancel transactionType: aTransactionType.	aCancel accountInformation: anAccountInformation.	aCancel transactionIDToCancel: aTransactionIDToCancel.	^aCancel</body></methods><methods><class-id>Core.Cancel class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountInformation:transactionIDToCancel:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountInformation: anAccountInformation transactionIDToCancel: aTransactionIDToCancel	| aCancel |	aCancel := Cancel new.	aCancel transactionID: aTransactionID.	aCancel transactionTimestamp: aTransactionTimestamp.	aCancel transactionType: aTransactionType.	aCancel accountInformation: anAccountInformation.	aCancel transactionIDToCancel: aTransactionIDToCancel.	^aCancel</body></methods><do-it>a := Cancel newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountInformation: '12654656:345345' transactionIDToCancel: 234324</do-it><do-it>a := Cancel newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountInformation: '12654656:345345' transactionIDToCancel: 234324.a transactionID</do-it><do-it>a := Cancel newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountInformation: '12654656:345345' transactionIDToCancel: 234324.a transactionTimestamp</do-it><do-it>a := Cancel newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountInformation: '12654656:345345' transactionIDToCancel: 234324.a transactionType</do-it><do-it>a := Cancel newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountInformation: '12654656:345345' transactionIDToCancel: 234324.a accountInformation</do-it><do-it>a := Cancel newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountInformation: '12654656:345345' transactionIDToCancel: 234324.a transactionIDToCancel</do-it><methods><class-id>Core.Deposit class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:depositType:fromAccountInformation:toAccountInformation:checkNumber:hold:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType depositType: aDepositType fromAccountInformation: aFromAccountInformation toAccountInformation: aToAccountInformation checkNumber: aCheckNumber hold: aHold amount: anAmount	| aDeposit |	aDeposit := NewAccount new.	aDeposit transactionID: aTransactionID.	aDeposit transactionTimestamp: aTransactionTimestamp.	aDeposit transactionType: aTransactionType.	aDeposit depositType: aDepositType.	aDeposit fromAccountInformation: aFromAccountInformation.	aDeposit toAccountInformation: aToAccountInformation.	aDeposit checkNumber: aCheckNumber.	aDeposit hold: aHold.	aDeposit amount: anAmount.	^aDeposit</body></methods><methods><class-id>Core.Deposit class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:depositType:fromAccountInformation:toAccountInformation:checkNumber:hold:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType depositType: aDepositType fromAccountInformation: aFromAccountInformation toAccountInformation: aToAccountInformation checkNumber: aCheckNumber hold: aHold amount: anAmount	| aDeposit |	aDeposit := Deposit new.	aDeposit transactionID: aTransactionID.	aDeposit transactionTimestamp: aTransactionTimestamp.	aDeposit transactionType: aTransactionType.	aDeposit depositType: aDepositType.	aDeposit fromAccountInformation: aFromAccountInformation.	aDeposit toAccountInformation: aToAccountInformation.	aDeposit checkNumber: aCheckNumber.	aDeposit hold: aHold.	aDeposit amount: anAmount.	^aDeposit</body></methods><do-it>a := Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364.a transactionID</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364.a transactionTimestamp</do-it><do-it> '10.30.2013 19:31'</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364.a transactionType</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364.a depositType</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364.a fromAccountInformation</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber:124 hold:78 amount:364.a toAccountInformation </do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 hold:78 amount:364.a checkNumber </do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 hold:78 amount:364.a hold</do-it><do-it>a :=Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 hold:78 amount:364.a amount</do-it><methods><class-id>Core.Withdrawal class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:withdrawalType:fromAccountInformation:toAccountInformation:checkNumber:amount:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType withdrawalType: aWithdrawalType fromAccountInformation: aFromAccountInformation toAccountInformation: aToAccountInformation checkNumber: aCheckNumber amount: anAmount	| aWithdrawal |	aWithdrawal := Withdrawal new.	aWithdrawal transactionID: aTransactionID.	aWithdrawal transactionTimestamp: aTransactionTimestamp.	aWithdrawal transactionType: aTransactionType.	aWithdrawal withdrawalType: aWithdrawalType.	aWithdrawal fromAccountInformation: aFromAccountInformation.	aWithdrawal toAccountInformation: aToAccountInformation.	aWithdrawal checkNumber: aCheckNumber.	aWithdrawal amount: anAmount.	^aWithdrawal</body></methods><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a transactionID</do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a transactionTimestamp</do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a transactionType</do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a withdrawalType </do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a fromAccountInformation</do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a toAccountInformation </do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a checkNumber</do-it><do-it>a :=Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364.a amount</do-it><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccounts transactions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	aBank bankAccounts: (OrderedCollection new).aBank transactions:(SortedCollection sortBlock:[:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	^aBank</body></methods><methods><class-id>Core.Bank</class-id> <category>private</category><body package="Assignment6" selector="transactions:">transactions: anObject	transactions := anObject</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactions">transactions	^transactions</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	aBank bankAccounts: (OrderedCollection new).	aBank transactions:(SortedCollection sortBlock:[:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	^aBank</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="newRoutingNumber:">newRoutingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	^aBank</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].]"			self processTransactions: transactions]"					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction |	tokenisedTransaction := aTransaction getTokens.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.Transcript show: tokenisedTransaction printString.</body></methods><do-it>a:= Bank newRoutingNumber:111111111</do-it><do-it>a:= Bank newRoutingNumber:111111111.a routingNumber.</do-it><do-it>a:= Bank newRoutingNumber:111111111.a bankAccounts</do-it><do-it>a:= Bank newRoutingNumber:111111111.a transactions</do-it><do-it>a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt' </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = NewAccount 		ifTrue: [transactions add: (NewAccount newTransactionID: (tokenisedTransaction at:1) transactionTimestamp: (tokenisedTransaction at:2) transactionType:(tokenisedTransaction at:3) accountID: (tokenisedTransaction at:4) name:(tokenisedTransaction at:5) customerType:(tokenisedTransaction at:6) amount: (tokenisedTransaction at:7)). ]</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'  </do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = NewAccount 		ifTrue: [transactions add: (NewAccount newTransactionID: (tokenisedTransaction at:1) transactionTimestamp: (tokenisedTransaction at:2) transactionType:(tokenisedTransaction at:3) accountID: (tokenisedTransaction at:4) name:(tokenisedTransaction at:5) customerType:(tokenisedTransaction at:6) amount: (tokenisedTransaction at:7)).		Transcript show:'in addTransactions' ]</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.Transcript show:transactionType.	transactionType = NewAccount 		ifTrue: [transactions add: (NewAccount newTransactionID: (tokenisedTransaction at:1) transactionTimestamp: (tokenisedTransaction at:2) transactionType:(tokenisedTransaction at:3) accountID: (tokenisedTransaction at:4) name:(tokenisedTransaction at:5) customerType:(tokenisedTransaction at:6) amount: (tokenisedTransaction at:7)).		Transcript show:'in addTransactions' ]</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.Transcript show:transactionType.	transactionType = 'NewAccount' 		ifTrue: [transactions add: (NewAccount newTransactionID: (tokenisedTransaction at:1) transactionTimestamp: (tokenisedTransaction at:2) transactionType:(tokenisedTransaction at:3) accountID: (tokenisedTransaction at:4) name:(tokenisedTransaction at:5) customerType:(tokenisedTransaction at:6) amount: (tokenisedTransaction at:7)).		Transcript show:'in addTransactions' ]</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = 'NewAccount' 		ifTrue: [ self addNewAccountTransaction: tokenisedTransaction.transactions add: (NewAccount newTransactionID: (tokenisedTransaction at:1) transactionTimestamp: (tokenisedTransaction at:2) transactionType:(tokenisedTransaction at:3) accountID: (tokenisedTransaction at:4) name:(tokenisedTransaction at:5) customerType:(tokenisedTransaction at:6) amount: (tokenisedTransaction at:7))]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = 'NewAccount' 		ifTrue: [ self addNewAccountTransaction: tokenisedTransaction.]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addnewAccountTransactions:">addnewAccountTransactions: aTokenisedTransaction	transactions add: (NewAccount newTransactionID: (aTokenisedTransaction at:1) transactionTimestamp: (aTokenisedTransaction at:2) transactionType:(aTokenisedTransaction at:3) accountID: (aTokenisedTransaction at:4) name:(aTokenisedTransaction at:5) customerType:(aTokenisedTransaction at:6) amount: (aTokenisedTransaction at:7))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addnewAccountTransactions:">addnewAccountTransactions: aTokenisedTransaction	transactions add: (NewAccount				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountID: (aTokenisedTransaction at: 4)				name: (aTokenisedTransaction at: 5)				customerType: (aTokenisedTransaction at: 6)				amount: (aTokenisedTransaction at: 7))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addNewAccountTransactions:">addNewAccountTransactions: aTokenisedTransaction	transactions add: (NewAccount				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountID: (aTokenisedTransaction at: 4)				name: (aTokenisedTransaction at: 5)				customerType: (aTokenisedTransaction at: 6)				amount: (aTokenisedTransaction at: 7))</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>addnewAccountTransactions:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = 'NewAccount' 		ifTrue: [ self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositTransaction:">addDepositTransaction: aTokenisedTransaction	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositTransaction:">addDepositTransaction: aTokenisedTransaction	| depositType |	depositType := aTokenisedTransaction at: 4.	depositType = 'Cash'		ifTrue: [self addDepositCashTransaction: aTokenisedTransaction].	depositType = 'Check'		ifTrue: [self addDepositCheckTransaction: aTokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCashTransaction:">addDepositCashTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountID: (aTokenisedTransaction at: 4)				name: nil				customerType: (aTokenisedTransaction at: 5)				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCashTransaction:">addDepositCashTransaction: aTokenisedTransaction	transactions add: (Deposit newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' depositType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 hold:78 amount:364)</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCashTransaction:">addDepositCashTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:">addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = 'NewAccount' 		ifTrue: [ self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addDepositTransaction: tokenisedTransaction].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalTransaction:">addWithdrawalTransaction: aTokenisedTransaction	| withdrawalType |	withdrawalType := aTokenisedTransaction at: 4.	withdrawalType = 'Cash'		ifTrue: [self addWithdrawalCashTransaction: aTokenisedTransaction].	withdrawalType = 'Check'		ifTrue: [self addWithdrawalCheckTransaction: aTokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at:3.	transactionType = 'NewAccount' 		ifTrue: [ self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at: 3.	transactionType = 'NewAccount'		ifTrue: [self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at: 3.	transactionType = 'NewAccount'		ifTrue: [self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction].	transactionType = 'Cancel'		ifTrue: [self addCancelTransaction: tokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransactions:">addCancelTransactions: aTokenisedTransaction	transactions add: (NewAccount				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransactions:">addCancelTransactions: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addNewAccountTransaction:">addNewAccountTransaction: aTokenisedTransaction	transactions add: (NewAccount				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountID: (aTokenisedTransaction at: 4)				name: (aTokenisedTransaction at: 5)				customerType: (aTokenisedTransaction at: 6)				amount: (aTokenisedTransaction at: 7))</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>addNewAccountTransactions:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>addCancelTransactions:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' withdrawalType:'Cash' fromAccountInformation:'1:2' toAccountInformation:'3:4' checkNumber: 124 amount:364)</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: 123				transactionTimestamp: '10.30.2013 19:31'				transactionType: 'Deposit'				withdrawalType: 'Cash'				fromAccountInformation: '1:2'				toAccountInformation: '3:4'				checkNumber: 124				amount: 364)</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8))</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: 123				transactionTimestamp: '10.30.2013 19:31'				transactionType: 'Deposit'				withdrawalType: 'Cash'				fromAccountInformation: '1:2'				toAccountInformation: '3:4'				checkNumber: 124				amount: 364)</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8))</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6))</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions. </do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a transactions do: [:each | Transcript cr; show: each printString]</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im' 'December 8, 2013' '9:05:12 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im was created at 9:05:12 PM on December 8, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im' 'December 8, 2013' '9:05:18 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_1.im was created at 9:05:18 PM on December 8, 2013."</do-it><do-it>Core.BankAccount renameTo: #BankAccount_prev</do-it><comment><class-id>Core.BankAccount_prev</class-id><body>""</body></comment><methods><class-id>Core.BankAccount_prev class</class-id> <category>accessing</category><body package="Assignment5" selector="executeNewAccount:">executeNewAccount: aTransaction	| customerType amount customerName tokenizedTransaction |	tokenizedTransaction := aTransaction getTokens.	customerName := tokenizedTransaction at: 4.	customerType := tokenizedTransaction at: 5.	amount := ((tokenizedTransaction at: 6) getAmount).	^BankAccount_prev newName: customerName type: customerType balance: amount.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testName">testName	|test|	test:= BankAccount_prev name: 'Scott' balance:12.3474.	self assert: (test name) = 'Scott'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testProcessFile">testProcessFile	| test1 |	test1:= BankAccount_prev name: 'Scott' balance:0.	test1 transactionsFrom: 'transactions.txt'.	self assert: (test1 balance) =  102.31.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testBalance">testBalance	|test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	self assert: (test1 balance) = 12.34.	test2 := BankAccount_prev new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testDeposit">testDeposit	| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 deposit: 10.22.	self assert: (test1 balance) =  22.56.	test2 := BankAccount_prev new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22.	</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment4" selector="testWithdrawal">testWithdrawal	| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testFutureAction">testFutureAction	| account |	self createFile: 'futureAction'.	account := BankAccount_prev fromFile: 'futureAction'.	self		assert: (account balanceIn: -5 days) = 100 asCurrency;		assert: (account balanceIn: -2 days) = 120 asCurrency;		assert: (account balanceIn: -1 days + 1 minutes) = 105 asCurrency;		assert: (account balanceIn: 5 days ) = 105 asCurrency;		assert: account balance = 105 asCurrency.	self		assert: (account availableBalanceIn: -5 days) = 100 asCurrency;		assert: (account availableBalanceIn: -2 days) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days - 1 minutes) = 100 asCurrency;		assert: (account availableBalanceIn: -1 days) = 85 asCurrency;		assert: (account availableBalanceIn: 1 days + 1 minutes) = 105 asCurrency;		assert: account availableBalance = 85 asCurrency.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testPreferredWithdrawals">testPreferredWithdrawals	| a b |	a := BankAccount_prev newName: 'SDSU' type: 'Preferred' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	b := BankAccount_prev newName: 'SDSU' type: 'Preferred' balance: 250.	b withdrawal: 1255.	self assert: b balance printString = '$247.00'.</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testTwoAccounts">testTwoAccounts	| simpleAccount cashAccount |	self createFile: 'simpleCreate'.	self createFile: 'cashDepositsWithdrawals'.	simpleAccount := BankAccount_prev fromFile: 'simpleCreate'.	cashAccount := BankAccount_prev fromFile: 'cashDepositsWithdrawals'.	self		assert: simpleAccount balance = '10.00' asCurrency;		assert: simpleAccount availableBalance = '10.00' asCurrency.	self		assert: (cashAccount balanceIn: -3 days) = '10.00' asCurrency;		assert: (cashAccount balanceIn: -2 days) = '40.00' asCurrency;		assert: (cashAccount balanceIn: -1 days) = '25.00' asCurrency;		assert: cashAccount balance = '25.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testSimpleCreate">testSimpleCreate	| account |	self createFile: 'simpleCreate'.	account := BankAccount_prev fromFile: 'simpleCreate'.	self		assert: account balance = '10.00' asCurrency;		assert: account availableBalance = '10.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testCheckDeposits">testCheckDeposits	| account |	self createFile: 'checkDeposits'.	account := BankAccount_prev fromFile: 'checkDeposits'.	self		assert: (account balanceIn: -15 days) = 100 asCurrency;		assert: (account balanceIn: -9 days) = 110 asCurrency;		assert: (account balanceIn: -6 days + 1 minutes) = 130 asCurrency;		assert: (account balanceIn: -5 days + 1 minutes) = 160 asCurrency;		assert: account balance = 145 asCurrency.	self		assert: (account availableBalanceIn: -15 days) = 100 asCurrency;		assert: (account availableBalanceIn: -9 days) = 100 asCurrency;		assert: (account availableBalanceIn: -8 days) = 110 asCurrency;		assert: (account availableBalanceIn: -6 days + 1 minutes) = 110 asCurrency;		assert: (account availableBalanceIn: -5 days + 1 minutes) = 140 asCurrency;		assert: (account availableBalanceIn: -4 days + 1 minutes) = 125 asCurrency;		assert: account availableBalance = 145 asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testCashDepositsWithdrawals">testCashDepositsWithdrawals	| account |	self createFile: 'cashDepositsWithdrawals'.	account := BankAccount_prev fromFile: 'cashDepositsWithdrawals'.	self		assert: (account balanceIn: -3 days) = '10.00' asCurrency;		assert: (account balanceIn: -2 days) = '40.00' asCurrency;		assert: (account balanceIn: -1 days) = '25.00' asCurrency</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNormalWithdrawals">testNormalWithdrawals	| a b |	a := BankAccount_prev newName: 'SDSU' type: 'Normal' balance: 250.	a withdrawal: 250.	self assert: a balance printString = '$0.00'.	b := BankAccount_prev newName: 'SDSU' type: 'Normal' balance: 250.	b withdrawal: 255.	self assert: b balance printString = '$245.00'</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testCashDepositsWithdrawalsWrongOrder">testCashDepositsWithdrawalsWrongOrder	| account |	self createFile: 'wrongOrder'.	account := BankAccount_prev fromFile: 'wrongOrder'.	self		assert: (account balanceIn: -3 days) = '10.00' asCurrency;		assert: (account balanceIn: -2 days) = '40.00' asCurrency;		assert: (account balanceIn: -1 days) = '25.00' asCurrency;		assert: account balance = '25.00' asCurrency.	self		assert: (account availableBalanceIn: -3 days) = '10.00' asCurrency;		assert: (account availableBalanceIn: -2 days) = '40.00' asCurrency;		assert: (account availableBalanceIn: -1 days) = '25.00' asCurrency;		assert: account availableBalance = '25.00' asCurrency</body></methods><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="accountID">accountID	^accountID</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="accountID:">accountID: anObject	accountID := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	accountID := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Core.BankAccount</class-id><body>""</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BankAccount</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BankAccount</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Core.BankAccount removeFromSystem</do-it><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID cutomer totalBalance availableBalance transactionHistoy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="accountID">accountID	^accountID</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="accountID:">accountID: anObject	accountID := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="cutomer">cutomer	^cutomer</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="cutomer:">cutomer: anObject	cutomer := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="totalBalance">totalBalance	^totalBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="totalBalance:">totalBalance: anObject	totalBalance := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="availableBalance">availableBalance	^availableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="availableBalance:">availableBalance: anObject	availableBalance := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="transactionHistoy">transactionHistoy	^transactionHistoy</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="transactionHistoy:">transactionHistoy: anObject	transactionHistoy := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	accountID := nil.	cutomer := nil.	totalBalance := nil.	availableBalance := nil.	transactionHistoy := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Core.BankAccount</class-id><body>""</body></comment><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #accountID: under: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #availableBalance: under: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #cutomer: under: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #totalBalance: under: #private</do-it><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #transactionHistoy: under: #private</do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="new">new	"Answer a newly created and initialized instance."	^self shouldNotImplement.</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:name:type:balance:">newAccountID: anAccountID name: aName type: aType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].]"			self executeTransactions]"					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Customer</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Customer</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Customer removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cutomer</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cutomer</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID name customerType totalBalance availableBalance transactionHistoy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="name">name	^cutomer</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>cutomer</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="name:">name: anObject	cutomer := anObject</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>cutomer:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="name">name	^name</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="customerType">customerType	^customerType</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="cutomerType:">cutomerType: anObject	customerType := anObject</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:name:customerType:balance:">newAccountID: anAccountID name: aName customerType: aType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customer: (Customer newName: aName type: aType).	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>newAccountID:name:type:balance:</selector></remove-selector><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:name:customerType:balance:">newAccountID: anAccountID name: aName customerType: aCustomerType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount name: aName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:name:customerType:balance:">newAccountID: anAccountID name: aName customerType: aCustomerType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:name:customerType:balance:">newAccountID: anAccountID name: aCustomerName customerType: aCustomerType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory:(SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>newAccountID:name:customerType:balance:</selector></remove-selector><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID customerName customerType totalBalance availableBalance transactionHistoy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="customerName:">customerName: anObject	customerName := anObject</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>name:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="customerName">customerName	^customerName</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>name</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="customerType:">customerType: anObject	customerType := anObject</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>cutomerType:</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>totalBalance</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>totalBalance</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID customerName customerType balance availableBalance transactionHistoy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="balance">balance	^totalBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balance">balance	^totalBalance</body></methods><methods><class-id>Core.BankAccount_prev</class-id> <category>accessing</category><body package="Assignment5" selector="balanceIn:">balanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>totalBalance</selector></remove-selector><remove-selector><class-id>Core.BankAccount</class-id> <selector>totalBalance</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balance">balance	^balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="balance:">balance: anObject	totalBalance := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="balance:">balance: anObject	totalBalance := anObject</body></methods><methods><class-id>Core.BankAccountHistory class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTimestamp:balance:availableBalance:">newTimestamp: aTransactionTimestamp balance: aBalance availableBalance: anAvailableBalance	| anObject |	anObject := super new.	anObject requestTime: aTransactionTimestamp.	anObject balance: aBalance.	anObject availableBalance: anAvailableBalance.	^anObject</body></methods><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>totalBalance:</selector></remove-selector><remove-selector><class-id>Core.BankAccount</class-id> <selector>totalBalance:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="balance:">balance: anObject	balance := anObject</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistory: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency fromString: aBalance).	anAccount availableBalance: (Currency fromString: aBalance).	anAccount transactionHistoy: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD'.</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD'. a accountID</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD'. a customerName</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD'. a customerType</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD'. a balance</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD'. a availableBalance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: [:each | each transactionType = 'NewAccount'		ifTrue: [self executeNewAccount: each]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount newAccountID: (aTransaction accountID) customerName: (aTransaction name) customerType: (aTransaction customerType) balance: (aTransaction amount).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount' ifTrue: [self executeNewAccount: each]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount' ifTrue: [bankAccounts add: (self executeNewAccount: each)]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)]]</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.a bankAccounts </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransactionTranscript cr; show: aTransaction.	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransactionTranscript cr; show: aTransaction printString.	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. a bankAccounts </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. a bankAccounts </do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. a bankAccounts at:1</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) accountID</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) customerName </do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) customerType</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) balance</do-it><do-it>a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) balance </do-it><do-it>a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) availableBalance</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) accountID</do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:2) accountID </do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) customerName  </do-it><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) customerType</do-it><do-it>a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. (a bankAccounts at:1) balance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDeposit:">executeDeposit: aTransaction	aTransaction depositType = 'Cash'		ifTrue: [self executeDepositCash: aTransaction]."	aTransaction depositType = 'Check'		ifTrue: [self executeDepositCheck: aTransaction]."</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im' 'December 8, 2013' '11:06:29 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im was created at 11:06:29 PM on December 8, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im' 'December 8, 2013' '11:06:38 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im was created at 11:06:38 PM on December 8, 2013."</do-it><do-it>':055012581:000032451283' tokensBasedOn: $:</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	bankAccounts select: [:each | each ].</body></methods><do-it>(':055012581:000032451283' tokensBasedOn: $:) at:1</do-it><do-it>(':055012581:000032451283' tokensBasedOn: $:) </do-it><do-it>(':055012581:000032451283' tokensBasedOn: $:)  at: 2</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getRoutingNumber:">getRoutingNumber: aString	^(self tokensBasedOn: $:) at: 2</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getAccountNumber:">getAccountNumber: aString	^(self tokensBasedOn: $:) at: 3</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getAccountNumber">getAccountNumber	^(self tokensBasedOn: $:) at: 3</body></methods><remove-selector><class-id>Core.String</class-id> <selector>getAccountNumber:</selector></remove-selector><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getRoutingNumber">getRoutingNumber	^(self tokensBasedOn: $:) at: 2</body></methods><remove-selector><class-id>Core.String</class-id> <selector>getRoutingNumber:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber |	aRoutingNumber := (aTransaction toAccountInformation) getRoutingNumber.	bankAccounts select: [:each | each ].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber |	aRoutingNumber := (aTransaction toAccountInformation) getRoutingNumber.Transcript cr;show:aRoutingNumber printString."	bankAccounts select: [:each | each ]."</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. </do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getRoutingNumber">getRoutingNumber	^((self tokensBasedOn: $:) at: 2) asNumber.</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getAccountNumber">getAccountNumber	^((self tokensBasedOn: $:) at: 3) asNumber.</body></methods><do-it>Transcript clear.a:= Bank newRoutingNumber:111111111.a transactionsFrom: 'transactions.txt'. </do-it><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="routingNumber:">routingNumber: aRoutingNumber	| aBank |	aBank := super new.	aBank routingNumber: aRoutingNumber.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	^aBank</body></methods><remove-selector><class-id>Core.Bank class</class-id> <selector>newRoutingNumber:</selector></remove-selector><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="routingNumber:">routingNumber: aString	| aBank |	aBank := super new.	aBank routingNumber: aString.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	^aBank</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aStringbankAccounts select: [:each | each accountID = aString]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	bankAccounts select: [:each | each accountID = aString]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^bankAccounts select: [:each | each accountID = aString]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  a account: '000032451283'</do-it><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getRoutingNumber">getRoutingNumber	^(self tokensBasedOn: $:) at: 2</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getAccountNumber">getAccountNumber	^(self tokensBasedOn: $:) at: 3</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. (b at:1) accountID</do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. (b at:1) customerName</do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. (b at:1) customerType</do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. (b at:1) balance</do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. (b at:1) availableBalance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^bankAccounts select: [:each | each accountID = aString]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^(bankAccounts select: [:each | each accountID = aString]) at: 1</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. b availableBalance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^(bankAccounts select: [:each | each accountID = aString]) at: 1</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber |	aRoutingNumber := (aTransaction toAccountInformation) getRoutingNumber.	aAccountNumber := (aTransaction toAccountInformation) getAccountNumber.Transcript cr;show:aRoutingNumber printString.	self account: aAccountNumber</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber |	aRoutingNumber := (aTransaction toAccountInformation) getRoutingNumber.	aAccountNumber := (aTransaction toAccountInformation) getAccountNumber.	self account: aAccountNumber</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^(bankAccounts detect: [:each | each accountID = aString]) at: 1</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^(bankAccounts detect: [:each | each accountID = aString]) </body></methods><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. b availableBalance </do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. b accountID</do-it><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'. b customerName</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="account:">account: aString	^bankAccounts detect: [:each | each accountID = aString]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: [Transcript show: 'in executeDepositCash']	"	aAccountNumber := (aTransaction toAccountInformation) getAccountNumber.	self account: aAccountNumber"</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'.  </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.Transcript show: self routingNumber printString; show: aRoutingNumber printString.	self routingNumber = aRoutingNumber		ifTrue: [Transcript show: 'in executeDepositCash']	"	aAccountNumber := (aTransaction toAccountInformation) getAccountNumber.	self account: aAccountNumber"</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'111111111'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber anAccount |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	Transcript		show: self routingNumber printString;		show: aRoutingNumber printString.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber anAccount |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber anAccount |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="deposit:">deposit: anAmount	self balance: self balance + anAmount asCurrency.	self availableBalance: self availableBalance + anAmount asCurrency</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber anAccount |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			anAccount deposit: aTransaction amount]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="deposit:">deposit: anAmount	self balance: self balance + (Currency fromString: anAmount).	self availableBalance: self availableBalance + (Currency fromString: anAmount)</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>accessing</category><body package="Assignment6" selector="getConversionFactor:for:">getConversionFactor: aDate for: anIndex	| conversionFactor |	self do: 			[:each |			| parts stringParts numberParts date |			parts := each tokensBasedOn: $,.			stringParts := (parts at: 1) tokensBasedOn: $-.			numberParts := stringParts collect: [:a | a asNumber].			date := Date						newDay: numberParts last						monthNumber: (numberParts at: 2)						year: numberParts first.			aDate = date ifTrue: [conversionFactor := parts at: anIndex]].	^conversionFactor asNumber</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="convertFrom:to:on:">convertFrom: fromCountryCode to: toCountryCode on: aDate	| index aCollection |	fromCountryCode = 'USD'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'MXN' ifTrue: [index := 3].			aCollection := usd].	fromCountryCode = 'CAD'		ifTrue: 			[toCountryCode = 'MXN' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := cad].	fromCountryCode = 'MXN'		ifTrue: 			[toCountryCode = 'CAD' ifTrue: [index := 2].			toCountryCode = 'USD' ifTrue: [index := 3].			aCollection := mxn].	^(aCollection getConversionFactor: aDate for: index) </body></methods><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="fromString:">fromString: aString		| tokens anAmount aCountryCode |	tokens := aString tokensBasedOn: Character space.	anAmount := (tokens at: 1) copyFrom: 2 to: ((tokens at: 1) size).	aCountryCode := (tokens at: 2).	^Currency newAmount: anAmount asNumber date: Date today printString countryCode: aCountryCode.</body></methods><do-it>a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:">newAmount: anAmount date: aDate 	| aCurrency tokens |	aCurrency := super new.	tokens := anAmount tokensBasedOn: Character space.	aCurrency amount: (tokens at: 1) asNumber.	aCurrency date: (Date readFromString: aDate).	aCurrency countryCode: (tokens at: 2).	aCurrency beImmutable.	^aCurrency</body></methods><do-it>a:= Currency newAmount:'$12 USD' date:'10.15.2013'</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:">newAmount: anAmount date: aDate 	| aCurrency tokens |	aCurrency := super new.	tokens := anAmount tokensBasedOn: Character space.	aCurrency amount: (tokens at: 1) getAmount.	aCurrency date: (Date readFromString: aDate).	aCurrency countryCode: (tokens at: 2).	aCurrency beImmutable.	^aCurrency</body></methods><do-it>a:= Currency newAmount:'$12 USD' date:'10.15.2013' </do-it><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:date:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance date: aDate	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency newAmount: aBalance date: aDate).	anAccount availableBalance: (Currency newAmount: aBalance date: aDate).	anAccount transactionHistoy: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><remove-selector><class-id>Core.BankAccount class</class-id> <selector>newAccountID:customerName:customerType:balance:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	accountID := nil.	customerName := nil.	customerType := nil.	balance := nil.	availableBalance := nil.	transactionHistoy := nil.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="deposit:">deposit: aCurrency	self balance: self balance + aCurrency.	self availableBalance: self availableBalance + aCurrency</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount		date: aTransaction transactionTimestamp.</body></methods><do-it>('10.30.2013 19:31' tokensBasedOn: Character space) at: 1</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount		date: ((aTransaction transactionTimestamp tokensBasedOn: Character space) at: 1).</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aConvertedCurrency |	self countryCode = (aCurrency countryCode)		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount + aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: '2013.02.02'.			anAccount deposit: aCurrency]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount		date: aTransaction transaction getDate.		"date: ((aTransaction transactionTimestamp tokensBasedOn: Character space) at: 1)."</body></methods><methods><class-id>Core.String</class-id> <category>accessing</category><body package="Assignment6" selector="getDate">getDate	^(self tokensBasedOn: Character space) at: 1</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount		date: aTransaction transaction getDate.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	^BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount		date: aTransaction transactionTimestamp getDate.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount deposit: aCurrency]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. a account: '000032451283'</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each]]</body></methods><methods><class-id>Core.Bank</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	routingNumber := nil.	bankAccounts := nil.	^self</body></methods><methods><class-id>Core.Cancel</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	accountInformation := nil.	transactionIDToCancel := nil.	^self</body></methods><methods><class-id>Core.Deposit</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	depositType := nil.	fromAccountInformation := nil.	toAccountInformation := nil.	checkNumber := nil.	hold := nil.	amount := nil.	^self</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeDepositCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeDepositCheck: aTransaction]."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCash:">executeWithdrawalCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount withdrawal: aCurrency]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	self balance: self balance - aCurrency.	self availableBalance: self availableBalance - aCurrency</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."Transcript cr;cr;cr;show:'in executeWithdrawal'.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."Transcript cr;cr;cr;show:'in executeWithdrawal'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each. Transcript cr;cr; show:'in executeTransactions[withdrawal]']]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |Transcript cr;cr;show: each transactionType.			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each. Transcript cr;cr; show:'in executeTransactions[withdrawal]']]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im' 'December 9, 2013' '2:35:14 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im was created at 2:35:14 AM on December 9, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im' 'December 9, 2013' '2:36:46 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_2.im was created at 2:36:46 AM on December 9, 2013."</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCash:">executeWithdrawalCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.Transcript cr; show: 'in executewithdrawalcash'.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount withdrawal: aCurrency]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."Transcript cr;cr;cr;show:'in executeWithdrawal'.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."Transcript cr;cr;cr;show:'in executeWithdrawal'; show:aTransaction withdrawalType.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance .</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream aLine |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [aLine := readStream nextLine.self addTransactions: aLine.Transcript cr; show: aLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:">executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."Transcript cr;cr;cr;show:'in executeWithdrawal::'; show:aTransaction withdrawalType.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:"> executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."Transcript cr;cr;cr;show:'in executeWithdrawal::'; show:aTransaction withdrawalType.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="makeCollectionOfTransactions:">makeCollectionOfTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at: 3.	transactionType = 'NewAccount'		ifTrue: [self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction].	transactionType = 'Cancel'		ifTrue: [self addCancelTransaction: tokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream aLine |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [aLine := readStream nextLine.self makeCollectionOfTransactions: aLine.Transcript cr; show: aLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>addTransactions:</selector></remove-selector><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6))Transcript cr;show:'inaddWithdrawalCashTransaction::';show:aTokenisedTransaction printString.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8)).Transcript cr;show:'inaddWithdrawalCheckTransaction::';show:aTokenisedTransaction printString.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6)).Transcript cr;show:'inaddWithdrawalCashTransaction::';show:aTokenisedTransaction printString.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCash:">executeWithdrawalCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount withdrawal: aCurrency]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:"> executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction]."	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 5) withdrawalType.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) withdrawalType.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) fromAccountInformation.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) toAccountInformation.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) transactionID</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) transactionTimestamp</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) transactionType</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) withdrawalType</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) checkNumber</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) amount</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) amount</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: 'Cash'"(aTokenisedTransaction at: 4)"				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6)).</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'.b balance.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) withdrawalType.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6)).</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at: 3.	transactionType = 'NewAccount'		ifTrue: [self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction].	transactionType = 'Cancel'		ifTrue: [self addCancelTransaction: tokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream aLine |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [aLine := readStream nextLine.self addTransactions: aLine.Transcript cr; show: aLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>makeCollectionOfTransactions:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 4) withdrawalType.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  (a transactions at: 5) withdrawalType</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:"> executeWithdrawal: aTransaction	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction].	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCheck:">executeWithdrawalCheck: aTransaction	Transcript cr; show:'IN EXECUTEWITHDRAWALCHECK'.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCheck:">executeWithdrawalCheck: aTransaction	Transcript cr; show: 'EXECUTEWITHDRAWALCHECK'.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. (a transactions at: 5) withdrawalType</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. (a transactions at: 4) withdrawalType </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. (a transactions at: 4) transactionID </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Withdrawal</class-id> <category>private</category><body package="Assignment6" selector="withdrawalType:">withdrawalType: anObject	withdrawalType := anObject</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'.b balance.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCash:">executeWithdrawalCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount withdrawal: aCurrency.Transcript cr;cr;show:'[YYYYYYYYYYYYYYYYYYyy]executeWithdrawalCash:']</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.(a transactions at: 4) withdrawalType</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			"self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file']</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine]			"self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	self</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine]			"self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Deposit</class-id> <category>private</category><body package="Assignment6" selector="fromAccountInformation:">fromAccountInformation: anObject	fromAccountInformation := anObject</body></methods><methods><class-id>Core.Deposit</class-id> <category>private</category><body package="Assignment6" selector="toAccountInformation:">toAccountInformation: anObject	toAccountInformation := anObject</body></methods><methods><class-id>Core.Cancel</class-id> <category>private</category><body package="Assignment6" selector="accountInformation:">accountInformation: anObject	accountInformation := anObject</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCash:">executeWithdrawalCash: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount withdrawal: aCurrency.Transcript cr;cr;show:'[YYYYYYYYYYYYYY]executeWithdrawalCash:']</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawalType">withdrawalType	^withdrawalType</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'.b balance.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.  b := a account: '000032451283'.b balance.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCheck:">executeDepositCheck: aTransaction	aTransaction depositType = 'Cash'		ifTrue: [self executeDepositCash: aTransaction].	aTransaction depositType = 'Check'		ifTrue: [self executeDepositCheck: aTransaction].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDeposit:">executeDeposit: aTransaction	aTransaction depositType = 'Cash'		ifTrue: [self executeDepositCash: aTransaction].	aTransaction depositType = 'Check'		ifTrue: [self executeDepositCheck: aTransaction].	aTransaction depositType = 'ClearCheck'		ifTrue: [self executeDepositClearCheck: aTransaction].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCheck:">executeDepositCheck: aTransaction</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCheck:">executeDepositCheck: aTransaction	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCheck:">executeDepositCheck: aTransaction	self addDepositClearCheck: aTransaction</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheck:">addDepositClearCheck: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDeposit:">executeDeposit: aTransaction	aTransaction depositType = 'Cash'		ifTrue: [self executeDepositCash: aTransaction].	aTransaction depositType = 'Check'		ifTrue: [self addDepositClearCheck: aTransaction].	aTransaction depositType = 'ClearCheck'		ifTrue: [self executeDepositClearCheck: aTransaction].</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>executeDepositCheck:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction"| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction	aTransaction transactionTimestamp  &lt;= Timestamp now	ifTrue: []."| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		&amp; (aTransaction transactionTimestamp &lt;= Timestamp now)			ifTrue: 				[aAccountNumber := aTransaction toAccountInformation getAccountNumber.				anAccount := self account: aAccountNumber.				aCurrency := Currency newAmount: aTransaction amount							date: aTransaction transactionTimestamp getDate.				anAccount deposit: aCurrency]	"| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"	"aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount deposit: aCurrency]"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		&amp; (aTransaction transactionTimestamp &lt;= Timestamp now)			ifTrue: 				[aAccountNumber := aTransaction toAccountInformation getAccountNumber.				anAccount := self account: aAccountNumber.				aCurrency := Currency newAmount: aTransaction amount							date: aTransaction transactionTimestamp getDate.				anAccount deposit: aCurrency]	"| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		&amp; (aTransaction transactionTimestamp &lt;= Timestamp now)			ifTrue: 				[aAccountNumber := aTransaction toAccountInformation getAccountNumber.				anAccount := self account: aAccountNumber.				aCurrency := Currency newAmount: aTransaction amount							date: aTransaction transactionTimestamp getDate.				anAccount availableBalance: anAccount availableBalance + aCurrency.				"anAccount deposit: aCurrency"]	"| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheck:">addDepositClearCheck: aDeposit	transactions add: (Deposit				newTransactionID: (aDeposit transactionID)				transactionTimestamp: (aDeposit transactionTimestamp)				transactionType: (aDeposit transactionType)				depositType: 'ClearCheck'				fromAccountInformation: (aDeposit fromAccountInformation)				toAccountInformation: (aDeposit toAccountInformation)				checkNumber: (aDeposit checkNumber)				hold: 0				amount: (aDeposit amount))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheck:">addDepositClearCheck: aDeposit	transactions add: (Deposit				newTransactionID: aDeposit transactionID				transactionTimestamp: aDeposit transactionTimestamp				transactionType: aDeposit transactionType				depositType: 'ClearCheck'				fromAccountInformation: aDeposit fromAccountInformation				toAccountInformation: aDeposit toAccountInformation				checkNumber: aDeposit checkNumber				hold: 0				amount: aDeposit amount)</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>Transcript clear.</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_3.im' 'December 9, 2013' '10:56:12 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_3.im was created at 10:56:12 PM on December 9, 2013."</do-it><do-it>Date today printString </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_3.im' 'December 10, 2013' '1:52:16 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_3.im was created at 1:52:16 AM on December 10, 2013."</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each executeTransaction.			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><do-it>a:=SortedCollection new.a add:12.a add:34.a size.</do-it><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'deposit'</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'Deposit'</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="type">type 	^'NewAccount'</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'Withdrawal'</body></methods><methods><class-id>Core.NewAccount</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'NewAccount'</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'Deposit'</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'Cancel'</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="type">type	^'Cancel'</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each transactionType = 'NewAccount'			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each type = 'NewAccount'					ifTrue: [bankAccounts add: (self executeNewAccount: each)]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	transactions do: 			[:each |			each type = 'NewAccount'					ifTrue: [bankAccounts add: (self executeNewAccount: each)]					ifFalse: [].			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'					ifTrue: [bankAccounts add: (self executeNewAccount: aTransaction)]					ifFalse: [aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			anAccount process: aTransaction]].			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: aTransaction)]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	aTransaction evaluateOn: self</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aBankAccount deposit: aCurrency.</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	 depositType = 'Cash'		ifTrue: [aBankAccount deposit: aCurrency.].	</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	depositType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount deposit: aCurrency]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	withdrawalType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount withdrawal: aCurrency]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. b := a account: '000032451283'.b balance.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 13, 2013' '9:10:26 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 9:10:26 PM on December 13, 2013."</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	aTransaction evaluateOn: self</body></methods><comment><class-id>Core.Cancel</class-id><body>evaluateOn: aBankAccount</body></comment><comment><class-id>Core.Cancel</class-id><body>evaluateOn: aBankAccount"executeCancel: transaction collection: transactions	| transactionIDToCancel |	transactionIDToCancel := transaction at: 4.	transactions do: 			[:each |			| aTransaction transactionID depositType amount |			aTransaction := each getTokens.			transactionID := aTransaction at: 1.			depositType := aTransaction at: 4.			transactionID = transactionIDToCancel &amp; (depositType = 'Check')				ifTrue: 					[amount := (aTransaction at: 6) getAmount.					self balance: self balance - amount asCurrency.					^self]]"</body></comment><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion new.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: (aCurrency amount * conversionFactor truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.	^convertedCurrency.</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion new.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: (aCurrency amount * conversionFactor truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.	^convertedCurrency.</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion instance.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: (aCurrency amount * conversionFactor truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.	^convertedCurrency.</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new.	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.].	^instance</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new.].	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.	^instance</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.b := a account: '000032451283'.b balance.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new.	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.].	^instance</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.b := a account: '000032451283'.b balance. </do-it><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccounts transactions </inst-vars><class-inst-vars>count </class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="routingNumber:">routingNumber: aString	| aBank |	aBank := super new.	aBank routingNumber: aString.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	^aBank</body></methods><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccounts transactions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	depositType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount deposit: aCurrency]."	depositType = 'ClearCheck'		ifTrue: []."</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	depositType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount deposit: aCurrency]."	depositType = 'Check'		ifTrue: [].	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	depositType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount deposit: aCurrency]."	depositType = 'Check'		ifTrue: [balance incr].	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:">addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp |	newTransactionTimestamp := (aTokenisedTransaction at: 2) + (aTokenisedTransaction at: 8)	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp |	newTransactionTimestamp := (aTokenisedTransaction at: 2) + (aTokenisedTransaction at: 8).	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp |	newTransactionTimestamp := (aTokenisedTransaction at: 2) + (aTokenisedTransaction at: 8).	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) + (aTokenisedTransaction at: 8)).	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) )+ ((aTokenisedTransaction at: 8) asNumber days).	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheck:">addDepositClearCheck: aDeposit"remove it"	transactions add: (Deposit				newTransactionID: aDeposit transactionID				transactionTimestamp: aDeposit transactionTimestamp				transactionType: aDeposit transactionType				depositType: 'ClearCheck'				fromAccountInformation: aDeposit fromAccountInformation				toAccountInformation: aDeposit toAccountInformation				checkNumber: aDeposit checkNumber				hold: 0				amount: aDeposit amount)</body></methods><do-it> ('3') asNumber days.</do-it><do-it>(Timestamp readFromDateAndTime: ('10.30.2013 19.31') readStream)</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			"self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:">addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))."	self addDepositClearCheckTransaction: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:">addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine]."			self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19.31' readStream)				+ 3 asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19.31' readStream)				+ 3 asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp).</do-it><do-it>'''11.2.2013 19:00''' string</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19.31' readStream)				+ '3' asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp). </do-it><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19.31' readStream)				+ '3' asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp).	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' string.	newTransactionTimestamp := (pc formatStringFor: timestamp).	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := (PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm') string.	newTransactionTimestamp := (pc formatStringFor: timestamp).	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' string.	newTransactionTimestamp := (pc formatStringFor: timestamp).	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)				+ 3 asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' string.	newTransactionTimestamp := (pc formatStringFor: timestamp).</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)				+ 3 asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp)string. </do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp printString				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ ((aTokenisedTransaction at: 8) asNumber days).	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)				+ 3 asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp)string.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)				+ 3 asNumber days.</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)				+ '3' asNumber days.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><do-it>(Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc transactionTimestamp |transactionTimestamp := (aTokenisedTransaction at: 2).	timestamp := (Timestamp readFromDateAndTime: ( transactionTimestamp readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc transactionTimestamp |transactionTimestamp := (aTokenisedTransaction at: 2) readStream.	timestamp := (Timestamp readFromDateAndTime: transactionTimestamp)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 14, 2013' '1:25:28 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 1:25:28 AM on December 14, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 14, 2013' '1:25:33 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 1:25:33 AM on December 14, 2013."</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: '10.30.2013 19:31' readStream)				+ ('3') asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.</do-it><do-it>'10.30.2013 19:31' readStream</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:">addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction."	self addWithdrawalForDeposit: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawal:"> executeWithdrawal: aTransaction"remove	aTransaction withdrawalType = 'Cash'		ifTrue: [self executeWithdrawalCash: aTransaction].	aTransaction withdrawalType = 'Check'		ifTrue: [self executeWithdrawalCheck: aTransaction]."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDeposit:">executeDeposit: aTransaction"remove	aTransaction depositType = 'Cash'		ifTrue: [self executeDepositCash: aTransaction].	aTransaction depositType = 'Check'		ifTrue: [self addDepositClearCheck: aTransaction].	aTransaction depositType = 'ClearCheck'		ifTrue: [self executeDepositClearCheck: aTransaction]."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositCash:">executeDepositCash: aTransaction"remove	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount deposit: aCurrency]"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeDepositClearCheck:">executeDepositClearCheck: aTransaction"remove	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		&amp; (aTransaction transactionTimestamp &lt;= Timestamp now)			ifTrue: 				[aAccountNumber := aTransaction toAccountInformation getAccountNumber.				anAccount := self account: aAccountNumber.				aCurrency := Currency newAmount: aTransaction amount							date: aTransaction transactionTimestamp getDate.				anAccount availableBalance: anAccount availableBalance + aCurrency.remove"				"anAccount deposit: aCurrency]"	"| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCash:">executeWithdrawalCash: aTransaction"remove	| aRoutingNumber aAccountNumber anAccount aCurrency |	aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.	self routingNumber = aRoutingNumber		ifTrue: 			[aAccountNumber := aTransaction toAccountInformation getAccountNumber.			anAccount := self account: aAccountNumber.			aCurrency := Currency newAmount: aTransaction amount date: aTransaction transactionTimestamp getDate.			anAccount withdrawal: aCurrency.Transcript cr;cr;show:'[YYYYYYYYYYYYYY]executeWithdrawalCash:']"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeWithdrawalCheck:">executeWithdrawalCheck: aTransaction"remove	Transcript cr; show: 'EXECUTEWITHDRAWALCHECK'."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheck:">addDepositClearCheck: aDeposit"remove it	transactions add: (Deposit				newTransactionID: aDeposit transactionID				transactionTimestamp: aDeposit transactionTimestamp				transactionType: aDeposit transactionType				depositType: 'ClearCheck'				fromAccountInformation: aDeposit fromAccountInformation				toAccountInformation: aDeposit toAccountInformation				checkNumber: aDeposit checkNumber				hold: 0				amount: aDeposit amount)"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalForDeposit:">addWithdrawalForDeposit: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: 'Withdrawal'				withdrawalType: 'Cash'				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: aTransaction)]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse:							[]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccounts transactions outgoingTransactions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: aTransaction)]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse:							[outgoingTransactions add: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="routingNumber:">routingNumber: aString	| aBank |	aBank := super new.	aBank routingNumber: aString.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	aBank transactions: OrderedCollection new.	^aBank</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="routingNumber:">routingNumber: aString	| aBank |	aBank := super new.	aBank routingNumber: aString.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	"aBank outgoingTransactions: OrderedCollection new."	^aBank</body></methods><methods><class-id>Core.Bank</class-id> <category>private</category><body package="Assignment6" selector="outgoingTransactions:">outgoingTransactions: anObject	outgoingTransactions := anObject</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="outgoingTransactions">outgoingTransactions	^outgoingTransactions</body></methods><methods><class-id>Core.Bank class</class-id> <category>instance creation</category><body package="Assignment6" selector="routingNumber:">routingNumber: aString	| aBank |	aBank := super new.	aBank routingNumber: aString.	aBank bankAccounts: OrderedCollection new.	aBank transactions: (SortedCollection				sortBlock: [:a :b | a transactionTimestamp &lt;= b transactionTimestamp]).	aBank outgoingTransactions: OrderedCollection new.	^aBank</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	depositType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount deposit: aCurrency]."	depositType = 'Check'		ifTrue: [balance incr].	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash'		ifTrue: 			[			aBankAccount deposit: aCurrency]."	depositType = 'Check'		ifTrue: [balance incr].	depositType = 'ClearCheck'		ifTrue: [availablebal incr].""executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency]	"	depositType = 'Check'		ifTrue: [balance incr].	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."	"executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency]	"	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."	"executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].		depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency]."	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."	"executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency]	"	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."	"executeCheck: aTransaction	| amount |	amount := (aTransaction at: 6) getAmount.	self balance: self balance + amount asCurrency"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency]	"	depositType = 'ClearCheck'		ifTrue: [availablebal incr]."</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].		depositType = 'ClearCheck'		ifTrue: []."executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck' ifTrue: []	"executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck' ifTrue: [transactionTimestamp := Timestamp				readFromDateAndTime: (transactionTimestamp) readStream.]	"executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream]	"executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.transactionTimestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: aBankAccount availableBalance + aCurrency].]	"executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency].					"add to histroy"]	"executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency]			"add to histroy"]	"executeClearCheck: aTransaction	| transactionTimestamp amount newAvailableBalance aHistory |	transactionTimestamp := Timestamp				readFromDateAndTime: (aTransaction at: 2) readStream.	amount := (aTransaction at: 6) getAmount.	newAvailableBalance := self availableBalance + amount asCurrency.	transactionTimestamp &lt;= Timestamp now		ifTrue: [self availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency]			"add to histroy"]	"executeClearCheck: aTransaction	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"</body></methods><component_definition_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Base64Encoding</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testCurrency</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Base64Encoding</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testCurrency</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment5</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testMagnitudeOfCurrency</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Base64Encoding</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testMagnitudeOfCurrency</selector> <definitionChange>added</definitionChange></component_selector_change><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					"transactionHistory add: aHistory"]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					"transactionHistoy add: aHistory"]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistoy add: aHistory]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>transactionHistoy</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>transactionHistoy</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID customerName customerType balance availableBalance transactionHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="transactionHistory:">transactionHistory: anObject	transactionHistoy := anObject</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:date:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance date: aDate	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency newAmount: aBalance date: aDate).	anAccount availableBalance: (Currency newAmount: aBalance date: aDate).	anAccount transactionHistory: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	^anAccount</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>transactionHistoy:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="transactionHistory:">transactionHistory: anObject	transactionHistory := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	accountID := nil.	customerName := nil.	customerType := nil.	balance := nil.	availableBalance := nil.	transactionHistory := nil.	^self</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="transactionHistory">transactionHistory	^transactionHistoy</body></methods><remove-selector><class-id>Core.BankAccount</class-id> <selector>transactionHistoy</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="transactionHistory">transactionHistory	^transactionHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency."			aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: newAvailableBalance.	transactionHistory add: aHistory"]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency."			aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: self balance				availableBalance: self availableBalance.	transactionHistory add: aHistory"]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					aBankAccount transactionHistory add: aHistory]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction transactionType = 'Deposit' &amp; aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	(aTransaction transactionType = 'Deposit' &amp; aTransaction depositType)		= 'ClearCheck'			ifFalse: 				[aHistory := BankAccountHistory							newTimestamp: aTransaction transactionTimestamp							balance: self balance							availableBalance: self availableBalance.				transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	(aTransaction transactionType = 'Deposit' &amp; aTransaction depositType		= 'ClearCheck')			ifFalse: 				[aHistory := BankAccountHistory							newTimestamp: aTransaction transactionTimestamp							balance: self balance							availableBalance: self availableBalance.				transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	(aTransaction transactionType = 'Deposit' &amp; aTransaction depositType)		= 'ClearCheck'			ifFalse: 				[aHistory := BankAccountHistory							newTimestamp: aTransaction transactionTimestamp							balance: self balance							availableBalance: self availableBalance.				transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]		ifFalse:			[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: aTransaction transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| aHistory |	aTransaction evaluateOn: self.	aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: aTransaction transactionTimestamp 						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.				bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction."anAccount "					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]			"each transactionType = 'NewAccount'				ifTrue: [bankAccounts add: (self executeNewAccount: each)].			each transactionType = 'Deposit'				ifTrue: [self executeDeposit: each].			each transactionType = 'Withdrawal'				ifTrue: [self executeWithdrawal: each.]"]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency			"aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory"].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency			"aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory"].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.					"aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory"]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory historyTimestamp |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency.			historyTimestamp := transactionTimestamp			"aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory"].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.					"aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory"]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency.			"aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory"].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.					"aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory"].					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory]</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>addDepositClearCheck:</selector></remove-selector><remove-selector><class-id>Core.Bank</class-id> <selector>executeDepositCash:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>executeWithdrawal:</selector></remove-selector><remove-selector><class-id>Core.Bank</class-id> <selector>executeDeposit:</selector></remove-selector><remove-selector><class-id>Core.Bank</class-id> <selector>executeDepositClearCheck:</selector></remove-selector><remove-selector><class-id>Core.Bank</class-id> <selector>executeWithdrawalCash:</selector></remove-selector><remove-selector><class-id>Core.Bank</class-id> <selector>executeWithdrawalCheck:</selector></remove-selector><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.].					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory historyTimestamp |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency.			historyTimestamp := Timestamp readFromDateAndTime: transactionTimestamp readStream.].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.].					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency.]].					aHistory := BankAccountHistory								newTimestamp: transactionTimestamp								balance: aBankAccount balance								availableBalance: aBankAccount availableBalance.					aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[transactionTimestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			transactionTimestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency]].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	| |	aTransaction evaluateOn: self.	"aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: aTransaction transactionTimestamp 						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	aTransaction evaluateOn: self	"aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: aTransaction transactionTimestamp 						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	withdrawalType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount withdrawal: aCurrency.			aHistory := BankAccountHistory						newTimestamp:  transactionTimestamp						balance: self balance						availableBalance: self availableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			timestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency]].	aHistory := BankAccountHistory				newTimestamp: transactionTimestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			timestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency]].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency.				timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			timestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: aBankAccount availableBalance + aCurrency]].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency.				timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency			timestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: newAvailableBalance]].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency.				timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: newAvailableBalance]].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency.				timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: 					[aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory.]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency.			timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency.			timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: 			[aBankAccount balance: aBankAccount balance + aCurrency.			aHistory := BankAccountHistory						newTimestamp: (Timestamp	readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	withdrawalType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount withdrawal: aCurrency.			aHistory := BankAccountHistory						newTimestamp:  (Timestamp readFromDateAndTime: transactionTimestamp readStream)						balance: self balance						availableBalance: self availableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					aHistory := BankAccountHistory								newTimestamp: (Transaction readFromDateAndTime: aTransaction transactionTimestamp readStream)								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					aHistory := BankAccountHistory								newTimestamp: (Transaction readFromDateAndTime: (aTransaction transactionTimestamp) readStream)								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					aHistory := BankAccountHistory								newTimestamp: (Timestamp readFromDateAndTime: (aTransaction transactionTimestamp) readStream)								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount aHistory |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					aHistory := BankAccountHistory								newTimestamp: (Timestamp readFromDateAndTime: (aTransaction transactionTimestamp) readStream)								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	withdrawalType = 'Cash'		ifTrue: 			[aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount withdrawal: aCurrency.			aHistory := BankAccountHistory						newTimestamp:  (Timestamp readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash' | depositType) = 'Check'		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new.	"instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'."].	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	usd := OrderedCollection new.	cad := OrderedCollection new.	mxn := OrderedCollection new.self readData: 'CAD.csv'.	self readData: 'MXN.csv'.	self readData: 'USD.csv'.	^self</body></methods><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	usd := OrderedCollection new.	cad := OrderedCollection new.	mxn := OrderedCollection new.	self readData: 'CAD.csv'.	self readData: 'MXN.csv'.	self readData: 'USD.csv'.	^self</body></methods><do-it>Transcript clear.a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'.</do-it><do-it>b := Currency newAmount:'$12 USD' date:'10.15.2013'.</do-it><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new.	instance readData: 'CAD.csv'.	instance readData: 'MXN.csv'.	instance readData: 'USD.csv'.].	^instance</body></methods><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	usd := OrderedCollection new.	cad := OrderedCollection new.	mxn := OrderedCollection new.	"self readData: 'CAD.csv'.	self readData: 'MXN.csv'.	self readData: 'USD.csv'."	^self</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aConvertedCurrency |	self countryCode = (aCurrency countryCode)		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount				date: Date today string				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount + aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="+">+ aCurrency	| aConvertedCurrency |	self countryCode = (aCurrency countryCode)		ifTrue: 			[^Currency newAmount: self amount + aCurrency amount				date: Date today printString				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount + aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><do-it>a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'. b := Currency newAmount:'$12 USD' date:'10.15.2013'. c := a + b.</do-it><do-it>a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'10.15.2013'. c := a + b.</do-it><methods><class-id>CurrencyConversion</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	usd := OrderedCollection new.	cad := OrderedCollection new.	mxn := OrderedCollection new.	self readData: 'CAD.csv'.	self readData: 'MXN.csv'.	self readData: 'USD.csv'.	^self</body></methods><methods><class-id>CurrencyConversion class</class-id> <category>instance creation</category><body package="Assignment6" selector="instance">instance	instance ifNil: [instance := CurrencyConversion new].	^instance</body></methods><do-it>a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'10.15.2013'. c := a + b.</do-it><do-it>| dollars pesos sum |dollars := Currency newAmount:1.00  date:'November 21, 2013' countryCode:'USD'.pesos := Currency  newAmount:2.00 date:'November 21, 2013' countryCode:'MXN' .sum := dollars + pesos.</do-it><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion instance.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: ((aCurrency amount * conversionFactor) truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.Transcript cr; show: '[in Currency+] conversion factor : ' ; show: conversionFactor printString; show: (aCurrency date printString);show: convertedCurrency amount printString.	^convertedCurrency.</body></methods><do-it>| dollars pesos sum |dollars := Currency newAmount:1.00  date:'November 21, 2013' countryCode:'USD'.pesos := Currency  newAmount:2.00 date:'November 21, 2013' countryCode:'MXN' .sum := dollars + pesos.</do-it><component_definition_change><name>Base64Encoding</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Base64Encoding</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testCurrency</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testCurrency</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Base64Encoding</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testMagnitudeOfCurrency</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.CurrencyTest</definitionName> <meta>false</meta> <selector>testMagnitudeOfCurrency</selector> <definitionChange>added</definitionChange></component_selector_change><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - 1.00 asCurrency.	self assert: d = b.	self assert: a printString = '$1.00'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	"d := c - 1.00 asCurrency.	self assert: d = b.	self assert: a printString = '$1.00'"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - (Currency fromNumber: 1 as: 'CAD').	self assert: d = b.	self assert: a printString = '$1.00'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - (Currency fromNumber: 3.12 as: 'CAD').	self assert: d = b.	self assert: a printString = '$1.00'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - (Currency fromNumber: 3.12 as: 'CAD').	self assert: d = b.	"self assert: a printString = '$1.00'"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	"self assert: a printString = '$1.00'"</body></methods><methods><class-id>Currency</class-id> <category>arithmetic</category><body package="Assignment6" selector="-">- aCurrency	| aConvertedCurrency |	self countryCode = aCurrency countryCode		ifTrue: 			[^Currency newAmount: self amount - aCurrency amount				date: Date today printString				countryCode: self countryCode]		ifFalse: 			[aConvertedCurrency := self convertCurrency: aCurrency.			^Currency				newAmount: self amount - aConvertedCurrency amount				date: Date today printString				countryCode: self countryCode]</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString = '$1.00 CAD'</body></methods><do-it>a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	d := c - a.a printString</do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString = '$3.12 CAD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - 1.00 asCurrency.	self assert: d &gt;= b.	self assert: a &lt; b.	self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &lt; b.	self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	"d := c - a.	self assert: d &gt;= b.	self assert: a &lt; b.	self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	"self assert: a &lt; b.	self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &lt; b.	"self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &gt; b.	"self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &gt; b.	self assert: b &lt; a.	"self assert: sum &gt; (2.12 asCurrency).	self assert: d ~= (Currency fromNumber: 4.87)"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &gt; b.	self assert: b &lt; a.	self assert: sum &gt; b."	self assert: d ~= (Currency fromNumber: 4.87)"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &gt; b.	self assert: b &lt; a.	self assert: sum &gt; b.	self assert: d ~= a</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromNumber: 2.12 as: 'CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString = '$3.12 CAD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c |	a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'10.15.2013'. c := a + b.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c</body></methods><do-it>a := Currency newAmount:12 date:'10.15.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'10.15.2013'. c := a + b.</do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'</body></methods><do-it>| dollars pesos |dollars := Currency newAmount:1.00  date:'November 21, 2013' countryCode:'USD'.pesos := Currency  newAmount:2.00 date:'November 21, 2013' countryCode:'MXN' .dollars + pesos.</do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c  dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'.dollars := Currency newAmount:1.00  date:'November 21, 2013' countryCode:'USD'.pesos := Currency  newAmount:2.00 date:'November 21, 2013' countryCode:'MXN' .sum := dollars + pesos.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c  dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'.dollars := Currency newAmount:1.00  date:'November 21, 2013' countryCode:'USD'.pesos := Currency  newAmount:2.00 date:'November 21, 2013' countryCode:'MXN' .sum := dollars + pesos.self assert: sum printString = '$1.15 USD'.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c &gt; a.	"dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c &gt; a.	self assert: a &gt; b.	"dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'"</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c &gt; a.	self assert: a &gt; b.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum &gt;= dollars.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c &gt; a.	self assert: a &gt; b.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum &gt;= dollars.	self assert: pesos &lt;= dollars.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c &gt; a.	self assert: b &lt; a.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum &gt;= dollars.	self assert: pesos &lt;= dollars.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentMagnitudes">testDifferentMagnitudes	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c &gt; a.	self assert: b &lt; a.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum &gt;= dollars.	self assert: pesos &lt;= dollars.	self assert: dollars ~= pesos.</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString:'$2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString = '$3.12 CAD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString: '$2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString = '$3.12 CAD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString: '2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &gt; b.	self assert: b &lt; a.	self assert: sum &gt; b.	self assert: d ~= a</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testMagnitudeOfCurrency">testMagnitudeOfCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString: '$2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum &lt;= c.	d := c - a.	self assert: d &gt;= b.	self assert: a &gt; b.	self assert: b &lt; a.	self assert: sum &gt; b.	self assert: d ~= a</body></methods><class><name>BankAccount</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accountID customerName customerType balance availableBalance transactionHistory balanceLimit overDraftFee </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="balanceLimit:">balanceLimit: anObject	balanceLimit := anObject</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceLimit">balanceLimit	^balanceLimit</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="overDraftFee">overDraftFee	^overDraftFee</body></methods><methods><class-id>Core.BankAccount</class-id> <category>private</category><body package="Assignment6" selector="overDraftFee:">overDraftFee: anObject	overDraftFee := anObject</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:date:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance date: aDate	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency newAmount: aBalance date: aDate).	anAccount availableBalance: (Currency newAmount: aBalance date: aDate).	anAccount transactionHistory: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	anAccount assignLimitAndFee.	^anAccount</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:date:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance date: aDate	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency newAmount: aBalance date: aDate).	anAccount availableBalance: (Currency newAmount: aBalance date: aDate).	anAccount transactionHistory: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	"anAccount assignLimitAndFee."	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue:[ self balanceLimit: 0.				self overDraftFee: 5].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue:[ self balanceLimit: (Currency fromString: '$0 USD').				self overDraftFee: (Currency fromString: '$0 USD')].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue:[ self balanceLimit: (Currency fromString: '$0 USD').				self overDraftFee: (Currency fromString: '$5 USD')].</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	|newBalance|	newBalance := self balance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: [self balance: (self balance - overDraftFee).				self  availableBalance: (self availableBalance - overDraftFee).]		ifFalse: [self balance: newBalance.	self availableBalance: newBalance].	"self balance: self balance - aCurrency.	self availableBalance: self availableBalance - aCurrency"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self balance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]	"self balance: self balance - aCurrency.	self availableBalance: self availableBalance - aCurrency"</body></methods><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: 12. </do-it><do-it>a := NewAccount newTransactionID: 123 transactionTimestamp: '10.30.2013 19:31' transactionType:'Deposit' accountID: 000032 name:'hihi' customerType:'Normal' amount: '$12 USD'. </do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '11.07.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '11.07.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'</body></methods><do-it>a := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'11.07.2013'. c := a + b.</do-it><do-it>a := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'11.07.2013'. c := a + b.</do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '11.07.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '11.07.2013'.	c := a + b.	self assert: c printString = '$12.91 USD'.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.91 USD'.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testDifferentCurrencies">testDifferentCurrencies	| a b c dollars pesos sum |	a := Currency newAmount: 12 date: '10.15.2013' countryCode: 'USD'.	b := Currency newAmount: '$12 MXN' date: '10.15.2013'.	c := a + b.	self assert: c printString = '$12.92 USD'.	dollars := Currency				newAmount: 1.00				date: 'November 21, 2013'				countryCode: 'USD'.	pesos := Currency				newAmount: 2.00				date: 'November 21, 2013'				countryCode: 'MXN'.	sum := dollars + pesos.	self assert: sum printString = '$1.15 USD'</body></methods><methods><class-id>Core.BankAccount class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAccountID:customerName:customerType:balance:date:">newAccountID: anAccountID customerName: aCustomerName customerType: aCustomerType balance: aBalance date: aDate	| anAccount |	anAccount := super new.	anAccount accountID: anAccountID.	anAccount customerName: aCustomerName.	anAccount customerType: aCustomerType.	anAccount balance: (Currency newAmount: aBalance date: aDate).	anAccount availableBalance: (Currency newAmount: aBalance date: aDate).	anAccount transactionHistory: (SortedCollection sortBlock:[:a :b | a requestTime &lt;= b requestTime]).	anAccount assignLimitAndFee.	^anAccount</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. </do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a availableBalance</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$45 USD').a availableBalance </do-it><component_definition_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testName</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testName</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testProcessFile</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testProcessFile</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testBalance</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testBalance</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testDeposit</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testDeposit</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Assignment4</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testWithdrawal</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>Assignment6</name> <type>package</type><definitionName>Root.Smalltalk.Core.BankAccountTest</definitionName> <meta>false</meta> <selector>testWithdrawal</selector> <definitionChange>added</definitionChange></component_selector_change><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 14, 2013' '11:07:43 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 11:07:43 PM on December 14, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 14, 2013' '11:08:02 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 11:08:02 PM on December 14, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 14, 2013' '11:08:10 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 11:08:10 PM on December 14, 2013."</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	|test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	self assert: (test1 balance) = 12.34.	test2 := BankAccount_prev new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$45 USD').</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$45 USD'). a availableBalance </do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal| a |	a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$45 USD').self assert: (a balance) = '$0.00 USD'	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: a balance = '$0.00 USD'	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) = '$0.00 USD'	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$45 USD'). a balance </do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString= '$0.00 USD'	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString = '$0.00 USD'	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString: '$2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a = '$3.12 CAD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString: '$2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString= '$3.12 CAD'</body></methods><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testCurrency">testCurrency	| a b c d sum |	a := Currency fromNumber: 3.12 as: 'CAD'.	b := Currency fromString: '$2.12 CAD'.	sum := Currency fromNumber: 5.24 as: 'CAD'.	c := a + b.	self assert: sum = c.	d := c - a.	self assert: d = b.	self assert: a printString = '$3.12 CAD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: a balance printString = '$0.00 USD'	"|test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	self assert: (test1 balance) = 12.34.	test2 := BankAccount_prev new.	self assert: (test2 balance) = 0.	test2 balance: 12.3474.	self assert: (test2 balance) = 12.34"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	self assert: a balance printString = '$45.00 USD'.	self assert: a availableBalance printString = '$45.00 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD'). 	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'"	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString = '$0.00 USD'"	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD'). a balance </do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Normal' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD'). a balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD'). 	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'"	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString = '$0.00 USD'"	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD'). 	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.b := BankAccount newAccountID: 12 customerName: 'Scott' customerType: 'Normal' balance: '$45 USD' date: Date today printString. b withdrawal: (Currency fromString: '$50 USD'). self assert: b availableBalance printString = '$40.00 USD'."	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString = '$0.00 USD'"	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawal">testWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'	"	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString = '$0.00 USD'"	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'	"	a := BankAccount				newAccountID: 12				customerName: 'hihi'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: (a balance) printString = '$0.00 USD'"	"| test1 test2 |	test1:= BankAccount_prev name: 'Scott' balance:12.3474.	test1 withdrawal: 10.22.	self assert: (test1 balance) =  2.12.	test2 := BankAccount_prev new.	self assert: (test2 withdrawal: 10.222) = test2 error."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'	</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	self assert: a balance printString = '$45.00 USD'.	self assert: a availableBalance printString = '$45.00 USD'</body></methods><remove-selector><class-id>Core.BankAccountTest</class-id> <selector>testWithdrawal</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$-1000 USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$-1000 USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD'). </do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balance.</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balance.</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balance. </do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self balance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]	</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a overDraftFee.</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$(-1000) USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$-1000 USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: 1000 as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -1000 as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').  a balanceLimit</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: (1000 negative) as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>(Currency fromString: '$-10050 USD').</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: (-1000) as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')]</body></methods><do-it>Currency fromString: '$-10050 USD'</do-it><do-it>Currency fromString: '$-10050 USD'</do-it><do-it>Currency fromString: '$-10050 USD'</do-it><do-it>Currency fromString: '$-10050 USD'</do-it><do-it>Currency fromString: '$-10050 USD'</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: (-1000) as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')].self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: (-10000) as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: (-100000) as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -1000 as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')].	self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -10000 as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].	self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -100000 as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self balance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -1000 as: 'USD').			self overDraftFee: (Currency fromString: '$3 USD')].	"self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -10000 as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].	self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -100000 as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]"</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$-10050 USD').a balanceLimit</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: ((Currency fromString: '$0 USD') - (Currency fromString: '1000 USD')).			self overDraftFee: (Currency fromString: '$3 USD')].	"self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -10000 as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].	self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -100000 as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]"</body></methods><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$-10050 USD').a balanceLimit</do-it><do-it>((Currency fromString: '$0 USD') - (Currency fromString: '1000 USD')).</do-it><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$-1000 USD').			self overDraftFee: (Currency fromString: '$3 USD')].	"self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -10000 as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].	self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -100000 as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]"</body></methods><do-it>(Currency fromString: '$-1000 USD')</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:countryCode:">newAmount: anAmount date: aDate countryCode: aCountryCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: (Date readFromString: aDate).	aCurrency countryCode: aCountryCode."aCurrency beImmutable."	^aCurrency</body></methods><do-it>(Currency fromString: '$-1000 USD')</do-it><do-it>(Currency fromString: '$-1000 USD')</do-it><methods><class-id>Currency class</class-id> <category>instance creation</category><body package="Assignment6" selector="newAmount:date:countryCode:">newAmount: anAmount date: aDate countryCode: aCountryCode	| aCurrency |	aCurrency := super new.	aCurrency amount: anAmount.	aCurrency date: (Date readFromString: aDate).	aCurrency countryCode: aCountryCode.	aCurrency beImmutable.	^aCurrency</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 15, 2013' '12:20:30 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 12:20:30 AM on December 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 15, 2013' '12:20:38 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 12:20:38 AM on December 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im' 'December 15, 2013' '12:20:43 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_4.im was created at 12:20:43 AM on December 15, 2013."</do-it><do-it>(Currency fromString: '$-1000 USD') </do-it><do-it>a:=(Currency fromString: '$-1000 USD') .a amount</do-it><do-it>a:=(Currency fromString: '$-1000 USD') .</do-it><do-it>a:=(Currency fromString: '$-1000 USD') .a amount</do-it><do-it>a:=(Currency fromString: '$-1000 USD') .</do-it><do-it>a:=(Currency fromString: '$1000 USD') . </do-it><do-it>a:=(Currency fromString: '$-1000 USD') . </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: (self amount value printFormat: '$#,###.00;[RED]($#,###.00);$0.00');		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>a:=(Currency fromString: '$-1000 USD') . </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>a:=(Currency fromString: '$-1000 USD') .</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream"		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');"		nextPutAll: self amount;		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>a:=(Currency fromString: '$-1000 USD') . </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream"		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');"		nextPutAll: self amount printString;		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>a:=(Currency fromString: '$-1000 USD') . </do-it><do-it>a:=(Currency fromString: '$-1000 USD').</do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream"		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');"		nextPut: '$';		nextPutAll: self amount printString;		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>(Currency fromString: '$-1000 USD'). </do-it><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream"		nextPutAll: (self amount printFormat: '$#,###.00;[RED]($#,###.00);$0.00');"		nextPutAll: '$';		nextPutAll: self amount printString;		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>a:=(Currency fromString: '$-1000 USD'). </do-it><do-it>a := BankAccount newAccountID: 12 customerName: 'hihi' customerType: 'Preferred' balance: '$45 USD' date: Date today printString. a withdrawal: (Currency fromString: '$50 USD').a balance</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$12 USD'				date: Date today printString.	self assert: a balance printString = '$45.12 USD'.	self assert: a availableBalance printString = '$45.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	self assert: a balance printString = '$45.12 USD'.	self assert: a availableBalance printString = '$45.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'."	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.00 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'."	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a availableBalance printString = '$-1000 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a balance printString = '$0.0 USD'.	"a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000 USD'"</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$1000 USD').</do-it><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$1000 USD'). a balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a balance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$1000 USD'). 	a withdrawal: (Currency fromString: '$100 USD').a balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a balance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$-1000 USD').			self overDraftFee: (Currency fromString: '$3 USD')].	self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -10000 as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].	"self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -100000 as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	"a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premiun'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$10000 USD'). 	"a withdrawal: (Currency fromString: '$100 USD')."a balance. </do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premiun'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = ' $-10000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premiun'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	"self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = ' $-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	"a withdrawal: (Currency fromString: '$10000 USD'). 	a withdrawal: (Currency fromString: '$100 USD')."a balance.  </do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premiun'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	"self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = ' $-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	"self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = ' $-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	"self assert: a balance printString = ' $-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = ' $-10000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$10000 USD'). 	"a withdrawal: (Currency fromString: '$100 USD')."a balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10500.0 USD'</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$10000 USD'). 	a withdrawal: (Currency fromString: '$100 USD').a balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10700.0'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10700.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	"self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="assignLimitAndFee">assignLimitAndFee	self customerType = 'Normal'		ifTrue: 			[self balanceLimit: (Currency fromString: '$0 USD').			self overDraftFee: (Currency fromString: '$5 USD')].	self customerType = 'Preferred'		ifTrue: 			[self balanceLimit: (Currency fromString: '$-1000 USD').			self overDraftFee: (Currency fromString: '$3 USD')].	self customerType = 'Premium'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -10000 as: 'USD').			self overDraftFee: (Currency fromString: '$700 USD')].	self customerType = 'Gold'		ifTrue: 			[self balanceLimit: (Currency fromNumber: -100000 as: 'USD').			self overDraftFee: (Currency fromString: '$5000 USD')]</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	"a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-100000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.0 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	self assert: a balance printString = '$45.12 USD'.	self assert: a availableBalance printString = '$45.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10700.0 USD'</body></methods><remove-selector><class-id>Core.BankAccountTest</class-id> <selector>testName</selector></remove-selector><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b availableBalance printString = '$40.12 USD'.	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b balance printString = '$40.12 USD'.	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	self assert: a availableBalance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	self assert: a availableBalance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'.self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	self assert: a availableBalance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'.	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	self assert: a availableBalance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10700.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	self assert: a availableBalance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10700.0 USD'.	self assert: a availableBalance printString = '$-10700.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.0 USD'.	self assert: a availableBalance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.0 USD'.	self assert: a availableBalance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'.	self assert: a availableBalance printString = '$-105000.0 USD'.</body></methods><do-it>BankAccount organization addCategory: #private</do-it><do-it>BankAccount classifySymbol: #assignLimitAndFee under: #private</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.		a deposit: (Currency fromString: '$10.22 USD').	self assert: (a balance) =  '$22.56 USD'."	test2 := BankAccount_prev new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance = '$22.56 USD'	"	test2 := BankAccount_prev new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance = '$55.34 USD'	"	test2 := BankAccount_prev new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22."</body></methods><do-it>a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a deposit: (Currency fromString: '$10.22 USD').a balance.</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.	"	test2 := BankAccount_prev new.	test2 deposit: 10.222.	self assert: (test2 balance) = 10.22.	test2 deposit: 23.	self assert: (test2 balance) = 33.22."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.	a deposit: (Currency fromString: '$2 CAD')</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.	"a deposit: (Currency fromString: '$2 CAD')"</body></methods><do-it>Date today</do-it><do-it>Date today printString</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.	"a deposit: (Currency fromString: '$2 CAD')"</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.	a deposit: (Currency fromString: '$2 CAD').</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| a |	a := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	a deposit: (Currency fromString: '$10.22 USD').	self assert: a balance printString = '$55.34 USD'.	self assert: a availableBalance printString = '$55.34 USD'.</body></methods><remove-selector><class-id>Core.BankAccountTest</class-id> <selector>testBalance</selector></remove-selector><remove-selector><class-id>Core.BankAccountTest</class-id> <selector>testProcessFile</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	aTransaction evaluateOn: self"aTransaction transactionType = 'Deposit'		ifTrue: 			[aTransaction depositType = 'ClearCheck'				ifFalse: 					[aHistory := BankAccountHistory								newTimestamp: aTransaction transactionTimestamp								balance: self balance								availableBalance: self availableBalance.					transactionHistory add: aHistory]]		ifFalse: 			[aHistory := BankAccountHistory						newTimestamp: aTransaction transactionTimestamp 						balance: self balance						availableBalance: self availableBalance.			transactionHistory add: aHistory]"</body></methods><methods><class-id>Currency</class-id> <category>accessing</category><body package="Assignment6" selector="convertCurrency:">convertCurrency: aCurrency	| aCurrencyConversion conversionFactor convertedCurrency |	aCurrencyConversion := CurrencyConversion instance.	conversionFactor := aCurrencyConversion				convertFrom: aCurrency countryCode				to: self countryCode				on: aCurrency date.	convertedCurrency := Currency				newAmount: ((aCurrency amount * conversionFactor) truncateTo: 0.01)				date: aCurrency date printString				countryCode: self countryCode.	^convertedCurrency.</body></methods><methods><class-id>CurrencyConversion</class-id> <category>accessing</category><body package="Assignment6" selector="readData:">readData: aFilename	| readStream fileContents aCollection newCollection |	readStream := aFilename asFilename readStream.	aCollection := OrderedCollection new.	readStream isNil		ifFalse: 			[fileContents := (readStream upTo: Character cr) printString.			aCollection := fileContents tokensBasedOn: Core.Character lf.			newCollection := aCollection clearNoise.			]		ifTrue: [^self error: 'Can not open file'].		aFilename = 'CAD.csv' ifTrue: [cad := newCollection].		aFilename = 'MXN.csv' ifTrue: [mxn := newCollection].		aFilename = 'USD.csv' ifTrue: [usd := newCollection]</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| aBankAccount aCurrency |	aBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	aBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: aBankAccount balance printString = '$55.34 USD'.	self assert: aBankAccount availableBalance printString = '$55.34 USD'.	</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| aBankAccount aCurrency |	aBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	aBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: aBankAccount balance printString = '$55.34 USD'.	self assert: aBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'. </body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'.	anBankAccount deposit: aCurrency.</body></methods><do-it>anBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	aCurrency := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'.	anBankAccount deposit: aCurrency.anBankAccount balance</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'.	anBankAccount deposit: aCurrency.self assert: anBankAccount balance printString = '$67.34 USD'.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'.	anBankAccount deposit: aCurrency.self assert: anBankAccount balance printString = '$67.34 USD'.self assert: anBankAccount availableBalance printString = '$67.34 USD'.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount: 12 date: '11.07.2013' countryCode: 'USD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$67.34 USD'.	self assert: anBankAccount availableBalance printString = '$67.34 USD'</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalForDeposit:">addWithdrawalForDeposit: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: 'Withdrawal'				withdrawalType: 'Check'				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalForDeposit:">addWithdrawalForDeposit: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: 'Withdrawal'				withdrawalType: 'Check'				fromAccountInformation: (aTokenisedTransaction at: 6)				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			"self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| newTransactionTimestamp timestamp pc |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction."	self addCancelForDeposit: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 1))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: 'Cance'				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 1))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: 'Cance'				accountInformation: (aTokenisedTransaction at: 6)				transactionIDToCancel: (aTokenisedTransaction at: 1))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction.	self addCancelForDeposit: aTokenisedTransaction.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: 'Cancel'				accountInformation: (aTokenisedTransaction at: 6)				transactionIDToCancel: (aTokenisedTransaction at: 1))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelForDeposit:">addCancelForDeposit: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: 'Cancel'				accountInformation: (aTokenisedTransaction at: 6)				transactionIDToCancel: (aTokenisedTransaction at: 1))</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount: 12 date: '11.07.2013' countryCode: 'USD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$67.34 USD'.	self assert: anBankAccount availableBalance printString = '$67.34 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.0 USD'.	self assert: a availableBalance printString = '$-100000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.0 USD'.	self assert: a availableBalance printString = '$-105000.0 USD'.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccount">testNewAccount	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	self assert: a balance printString = '$45.12 USD'.	self assert: a availableBalance printString = '$45.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b balance printString = '$40.12 USD'.	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1000.0 USD'.	self assert: a availableBalance printString = '$-1000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1003.0 USD'.	self assert: a balance printString = '$-1003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.0 USD'.	self assert: a availableBalance printString = '$0.0 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10000.0 USD'.	self assert: a availableBalance printString = '$-10000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10700.0 USD'.	self assert: a availableBalance printString = '$-10700.0 USD'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im' 'December 15, 2013' '3:05:00 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im was created at 3:05:00 AM on December 15, 2013."</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount: 12 date: '11.07.2013' countryCode: 'CAD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$67.34 USD'.	self assert: anBankAccount availableBalance printString = '$67.34 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount: 10.12 date: '11.07.2013' countryCode: 'CAD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$67.34 USD'.	self assert: anBankAccount availableBalance printString = '$67.34 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	"anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'."	aCurrency := Currency newAmount: 10.12 date: '11.07.2013' countryCode: 'CAD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$67.34 USD'.	self assert: anBankAccount availableBalance printString = '$67.34 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount: 10.12 date: '11.07.2013' countryCode: 'CAD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$67.34 USD'.	self assert: anBankAccount availableBalance printString = '$67.34 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testDeposit">testDeposit	| anBankAccount aCurrency |	anBankAccount := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: '11.07.2013'.	anBankAccount deposit: (Currency fromString: '$10.22 USD').	self assert: anBankAccount balance printString = '$55.34 USD'.	self assert: anBankAccount availableBalance printString = '$55.34 USD'.	aCurrency := Currency newAmount: 10.12 date: '11.07.2013' countryCode: 'CAD'.	anBankAccount deposit: aCurrency.	self assert: anBankAccount balance printString = '$65.03 USD'.	self assert: anBankAccount availableBalance printString = '$65.03 USD'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im' 'December 15, 2013' '3:11:57 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im was created at 3:11:57 AM on December 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im' 'December 15, 2013' '3:12:00 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im was created at 3:12:00 AM on December 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im' 'December 15, 2013' '3:12:49 AM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_5.im was created at 3:12:49 AM on December 15, 2013."</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			"self executeTransactions"]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency aHistory |	withdrawalType = 'Cash'		ifTrue: 			["self evaluateWithdrawalCashOn: aBankAccount.""aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount withdrawal: aCurrency.			aHistory := BankAccountHistory						newTimestamp:  (Timestamp readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory"]</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency aHistory |aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.			aBankAccount withdrawal: aCurrency.			aHistory := BankAccountHistory						newTimestamp:  (Timestamp readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| |	withdrawalType = 'Cash'		ifTrue: 			[self evaluateWithdrawalCashOn: aBankAccount.]</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	withdrawalType = 'Cash'		ifTrue: 			[self evaluateWithdrawalCashOn: aBankAccount.]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount		depositType = 'Check'		ifTrue: [self evaluateDepositCheckOn: aBankAccount.]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCashOn:">evaluateDepositCashOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount deposit: aCurrency.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount		depositType = 'Check'		ifTrue: [self evaluateDepositCashOn: aBankAccount.]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount		depositType = 'Cash'		ifTrue: [self evaluateDepositCashOn: aBankAccount.]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCheckOn:">evaluateDepositCheckOn: aBankAccount			| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.aBankAccount balance: aBankAccount balance + aCurrency.			aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCheckOn:">evaluateDepositCheckOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount balance: aBankAccount balance + aCurrency.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount		depositType = 'Cash'		ifTrue: [self evaluateDepositCashOn: aBankAccount.].depositType = 'Check'		ifTrue: [self evaluateDepositCheckOn: aBankAccount.]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	depositType = 'Cash' ifTrue: [self evaluateDepositCashOn: aBankAccount].	depositType = 'Check' ifTrue: [self evaluateDepositCheckOn: aBankAccount]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	depositType = 'Cash' ifTrue: [self evaluateDepositCashOn: aBankAccount].	depositType = 'Check' ifTrue: [self evaluateDepositCheckOn: aBankAccount].	depositType = 'ClearCheck' ifTrue: [self evaluateDepositCheckOn: aBankAccount]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCheckOn:">evaluateWithdrawalCheckOn: aBankAccount	| aCurrency aHistory |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>evaluateWithdrawalCheckOn:</selector></remove-selector><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	"withdrawalType = 'Cash'		ifTrue: "			self evaluateWithdrawalCashOn: aBankAccount.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| |	"timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string."	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	"timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string."	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: 0				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: ((transactionTimestamp getDate) - (hold asNumber days)).	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: transactionTimestamp getDate - hold asNumber days.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: transactionTimestamp getDate - (hold asNumber) days.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><do-it>'3' asNumber</do-it><do-it>'3' asNumber days</do-it><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: transactionTimestamp getDate - (hold asNumber) days.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: transactionTimestamp getDate - hold asNumber days.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: transactionTimestamp getDate - hold asNumber days.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self balance - aCurrency.self balance: newBalance.			self availableBalance: newBalance	"newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self balance - aCurrency.self balance: newBalance.self availableBalance: newBalance	"newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]"</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="ToAccountInformation">ToAccountInformation	^accountInfo</body></methods><remove-selector><class-id>Core.Cancel</class-id> <selector>accountInformation</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>accountInformation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>accountInformation</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Cancel</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>toAccountInformation transactionIDToCancel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="ToAccountInformation">ToAccountInformation	^toAccountInformation</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInformation">toAccountInformation	^toAccountInformation</body></methods><remove-selector><class-id>Core.Cancel</class-id> <selector>ToAccountInformation</selector></remove-selector><methods><class-id>Core.Cancel</class-id> <category>private</category><body package="Assignment6" selector="toAccountInformation:">toAccountInformation: anObject	accountInformation := anObject</body></methods><methods><class-id>Core.Cancel class</class-id> <category>instance creation</category><body package="Assignment6" selector="newTransactionID:transactionTimestamp:transactionType:accountInformation:transactionIDToCancel:">newTransactionID: aTransactionID transactionTimestamp: aTransactionTimestamp transactionType: aTransactionType accountInformation: anAccountInformation transactionIDToCancel: aTransactionIDToCancel	| aCancel |	aCancel := Cancel new.	aCancel transactionID: aTransactionID.	aCancel transactionTimestamp: aTransactionTimestamp.	aCancel transactionType: aTransactionType.	aCancel toAccountInformation: anAccountInformation.	aCancel transactionIDToCancel: aTransactionIDToCancel.	^aCancel</body></methods><remove-selector><class-id>Core.Cancel</class-id> <selector>accountInformation:</selector></remove-selector><methods><class-id>Core.Cancel</class-id> <category>private</category><body package="Assignment6" selector="toAccountInformation:">toAccountInformation: anObject	toAccountInformation := anObject</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	depositType = 'Cash' ifTrue: [self evaluateDepositCashOn: aBankAccount].	depositType = 'Check' ifTrue: [self evaluateDepositCheckOn: aBankAccount].	depositType = 'ClearCheck' ifTrue: [self evaluateDepositClearCheckOn: aBankAccount]	"| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	depositType = 'Cash' ifTrue: [aBankAccount deposit: aCurrency].	depositType = 'Check'		ifTrue: [aBankAccount balance: aBankAccount balance + aCurrency].	(depositType = 'Cash') | (depositType = 'Check')		ifTrue: 			[aHistory := BankAccountHistory						newTimestamp: (Timestamp								readFromDateAndTime: transactionTimestamp readStream)						balance: aBankAccount balance						availableBalance: aBankAccount availableBalance.			aBankAccount transactionHistory add: aHistory].	depositType = 'ClearCheck'		ifTrue: 			[timestamp := Timestamp						readFromDateAndTime: transactionTimestamp readStream.			newAvailableBalance := aBankAccount availableBalance + aCurrency.			timestamp &lt;= Timestamp now				ifTrue: [aBankAccount availableBalance: newAvailableBalance].			aHistory := BankAccountHistory						newTimestamp: timestamp						balance: aBankAccount balance						availableBalance: newAvailableBalance.			aBankAccount transactionHistory add: aHistory]"</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: (transactionTimestamp getDate - hold asNumber days).	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance |	aCurrency := Currency newAmount: amount				date: (transactionTimestamp getDate - hold asNumber days) printString.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><do-it>'10.30.2013 19:10' getDate</do-it><do-it>('3' asNumber days)</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: (('10.30.2013 19:10') readStream))				+ ('3') asNumber days.</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: (('10.30.2013 19:10') readStream))				+ ('3') asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: (('10.30.2013 19:10') readStream))				+ ('3') asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.</do-it><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance newTimestamp pc newTransactionTimestamp |newTimestamp := (Timestamp readFromDateAndTime: ((transactionTimestamp) readStream))				+ hold asNumber days.	pc := PrintConverter for: #newTimestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: newTimestamp) string. 	aCurrency := Currency newAmount: amount				date: newTransactionTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance newTimestamp pc newTransactionTimestamp |	newTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) + hold asNumber days.	pc := PrintConverter for: #newTimestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: newTimestamp) string.	aCurrency := Currency newAmount: amount date: newTransactionTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance newTimestamp pc newTransactionTimestamp |	newTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) + hold asNumber days.	pc := PrintConverter for: #newTimestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: newTimestamp) string.	aCurrency := Currency newAmount: amount date: newTransactionTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><do-it>timestamp := (Timestamp readFromDateAndTime: (('10.30.2013 19:10') readStream))				+ ('3') asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string. aCurrency := Currency newAmount: '$3 USD' date: newTransactionTimestamp.</do-it><do-it>timestamp := (Timestamp readFromDateAndTime: (('10.30.2013 19:10') readStream))				+ ('3') asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string. aCurrency := Currency newAmount: '$3 USD' date: newTransactionTimestamp. </do-it><do-it>newTimestamp := (Timestamp readFromDateAndTime: (('10.30.2013 19:10') readStream))				+ ('3') asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: newTimestamp) string. aCurrency := Currency newAmount: '$3 USD' date: newTransactionTimestamp. </do-it><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance newTimestamp pc newTransactionTimestamp |	newTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) + hold asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: newTimestamp) string.	aCurrency := Currency newAmount: amount date: newTransactionTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance newTimestamp pc newTransactionTimestamp |	newTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) - hold asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: newTimestamp) string.	aCurrency := Currency newAmount: amount date: newTransactionTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance pc currencyTimestamp newCurrencyTimestamp |	currencyTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) - hold asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newCurrencyTimestamp := (pc formatStringFor: currencyTimestamp) string.	aCurrency := Currency newAmount: amount date: newCurrencyTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory				newTimestamp: timestamp				balance: aBankAccount balance				availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency aHistory timestamp newAvailableBalance pc currencyTimestamp newCurrencyTimestamp |	currencyTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) - hold asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newCurrencyTimestamp := (pc formatStringFor: currencyTimestamp) string.	aCurrency := Currency newAmount: amount date: newCurrencyTimestamp.	timestamp := Timestamp readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aHistory := BankAccountHistory	newTimestamp: timestamp balance: aBankAccount balance availableBalance: newAvailableBalance.	aBankAccount transactionHistory add: aHistory</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount aHistory |	anAccount := BankAccount		newAccountID: aTransaction accountID		customerName: aTransaction name		customerType: aTransaction customerType		balance: aTransaction amount		date: aTransaction transactionTimestamp getDate.aHistory := BankAccountHistory								newTimestamp: (Timestamp readFromDateAndTime: (aTransaction transactionTimestamp) readStream)								balance: anAccount balance								availableBalance: anAccount availableBalance.					anAccount transactionHistory add: aHistory.					bankAccounts add: anAccount</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount aHistory |	anAccount := BankAccount				newAccountID: aTransaction accountID				customerName: aTransaction name				customerType: aTransaction customerType				balance: aTransaction amount				date: aTransaction transactionTimestamp getDate.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: aTransaction transactionTimestamp readStream)				balance: anAccount balance				availableBalance: anAccount availableBalance.	anAccount transactionHistory add: aHistory.	bankAccounts add: anAccount</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount aHistory |	anAccount := BankAccount				newAccountID: aTransaction accountID				customerName: aTransaction name				customerType: aTransaction customerType				balance: aTransaction amount				date: aTransaction transactionTimestamp getDate.	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: aTransaction transactionTimestamp readStream)				balance: anAccount balance				availableBalance: anAccount availableBalance.	anAccount transactionHistory add: aHistory.	^anAccount.		</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount aHistory |	anAccount := BankAccount				newAccountID: aTransaction accountID				customerName: aTransaction name				customerType: aTransaction customerType				balance: aTransaction amount				date: aTransaction transactionTimestamp getDate."	anAccount addHistory: (Timestamp readFromDateAndTime: aTransaction transactionTimestamp readStream) balance: anAccount balance availableBalance: anAccount availableBalance."	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: aTransaction transactionTimestamp readStream)				balance: anAccount balance				availableBalance: anAccount availableBalance.	anAccount transactionHistory add: aHistory.	^anAccount.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount |	anAccount := BankAccount				newAccountID: aTransaction accountID				customerName: aTransaction name				customerType: aTransaction customerType				balance: aTransaction amount				date: aTransaction transactionTimestamp getDate."	anAccount addHistory: (Timestamp readFromDateAndTime: aTransaction transactionTimestamp readStream) balance: anAccount balance availableBalance: anAccount availableBalance."	^anAccount.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="addHistory:balance:availableBalance:">addHistory: aTime balance: aBalance availableBalance: anAvailableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="addHistory:balance:availableBalance:">addHistory: aTime balance: aBalance availableBalance: anAvailableBalance	| aHistory |	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: aTime readStream)				balance: aBalance				availableBalance: anAvailableBalance.	self transactionHistory add: aHistory</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="addHistory:balance:availableBalance:">addHistory: aTime balance: aBalance availableBalance: anAvailableBalance	| aHistory |	aHistory := BankAccountHistory				newTimestamp: (Timestamp						readFromDateAndTime: aTime readStream)				balance: aBalance				availableBalance: anAvailableBalance.	self transactionHistory add: aHistory.</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount |	anAccount := BankAccount				newAccountID: aTransaction accountID				customerName: aTransaction name				customerType: aTransaction customerType				balance: aTransaction amount				date: aTransaction transactionTimestamp getDate.	anAccount addHistory: (Timestamp readFromDateAndTime: aTransaction transactionTimestamp readStream) balance: anAccount balance availableBalance: anAccount availableBalance.	^anAccount.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeNewAccount:">executeNewAccount: aTransaction	| anAccount |	anAccount := BankAccount				newAccountID: aTransaction accountID				customerName: aTransaction name				customerType: aTransaction customerType				balance: aTransaction amount				date: aTransaction transactionTimestamp getDate.	anAccount		addHistory: (Timestamp				readFromDateAndTime: aTransaction transactionTimestamp readStream)		balance: anAccount balance		availableBalance: anAccount availableBalance.	^anAccount</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="addHistory:balance:availableBalance:">addHistory: aTime balance: aBalance availableBalance: anAvailableBalance	| aHistory |	aHistory := BankAccountHistory				newTimestamp: aTime				balance: aBalance				availableBalance: anAvailableBalance.	self transactionHistory add: aHistory.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="addHistory:balance:availableBalance:">addHistory: aTime balance: aBalance availableBalance: anAvailableBalance	| aHistory |	aHistory := BankAccountHistory				newTimestamp: aTime				balance: aBalance				availableBalance: anAvailableBalance.	self transactionHistory add: aHistory</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCashOn:">evaluateDepositCashOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount deposit: aCurrency.	"aBankAccount addHistory				newTimestamp: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance."</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCashOn:">evaluateDepositCashOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount deposit: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCheckOn:">evaluateDepositCheckOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount balance: aBankAccount balance + aCurrency.	aBankAccount addHistory: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositCheckOn:">evaluateDepositCheckOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount balance: aBankAccount balance + aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency timestamp newAvailableBalance pc currencyTimestamp newCurrencyTimestamp |	currencyTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) - hold asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newCurrencyTimestamp := (pc formatStringFor: currencyTimestamp) string.	aCurrency := Currency newAmount: amount date: newCurrencyTimestamp.	timestamp := Timestamp				readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aBankAccount		addHistory: timestamp		balance: aBankAccount balance		availableBalance: newAvailableBalance</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateDepositClearCheckOn:">evaluateDepositClearCheckOn: aBankAccount	| aCurrency timestamp newAvailableBalance pc currencyTimestamp newCurrencyTimestamp |	currencyTimestamp := (Timestamp				readFromDateAndTime: transactionTimestamp readStream) - hold asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newCurrencyTimestamp := (pc formatStringFor: currencyTimestamp) string.	aCurrency := Currency newAmount: amount date: newCurrencyTimestamp.	timestamp := Timestamp readFromDateAndTime: transactionTimestamp readStream.	newAvailableBalance := aBankAccount availableBalance + aCurrency.	timestamp &lt;= Timestamp now		ifTrue: [aBankAccount availableBalance: newAvailableBalance].	aBankAccount addHistory: timestamp balance: aBankAccount balance availableBalance: newAvailableBalance</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount addHistory: (Timestamp						readFromDateAndTime: transactionTimestamp readStream)				balance: aBankAccount balance				availableBalance: aBankAccount availableBalance.</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction."	self addCancelForDeposit: aTokenisedTransaction."</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime |	searchTime := Timestamp now + aDuration."	transactionHistory getBalance: searchTime."	"transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance"</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getBalnce:">getBalnce: searchTime| transactions |	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getBalnce:">getBalnce: searchTime	| transactions |	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getBalance:">getBalance: searchTime	| transactions |	transactions := self transactionHistory				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getBalance:">getBalance: searchTime	| transactions |	transactions := self 				reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getBalance:">getBalance: searchTime	| transactions |	transactions := self reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getAvailableBalance:">getAvailableBalance: searchTime	| transactions |	transactions := self reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><methods><class-id>Core.BankAccountHistory</class-id> <category>accessing</category><body package="Assignment6" selector="getAvailableBalance:">getAvailableBalance: searchTime	| transactions |	transactions := self reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) availableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime |	searchTime := Timestamp now + aDuration.	transactionHistory getBalance: searchTime.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="availableBalanceIn:">availableBalanceIn: aDuration	| searchTime |	searchTime := Timestamp now + aDuration.	transactionHistory getAvailableBalance: searchTime.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime |	searchTime := Timestamp now + aDuration.	self transactionHistory getBalance: searchTime.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime |	searchTime := Timestamp now + aDuration.	^transactionHistory getBalance: searchTime.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime |	searchTime := Timestamp now + aDuration.	^transactionHistory getBalance: searchTime.</body></methods><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>getBalnce:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>getBalance:</selector></remove-selector><remove-selector><class-id>Core.BankAccountHistory</class-id> <selector>getAvailableBalance:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="availableBalanceIn:">availableBalanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := self reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) availableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="availableBalanceIn:">availableBalanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) availableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="balanceIn:">balanceIn: aDuration	| searchTime transactions |	searchTime := Timestamp now + aDuration.	transactions := transactionHistory reject: [:each | each requestTime &gt; searchTime].	^(transactions at: transactions size) balance</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.b := a account: '000032451283'.b balanceIn: -50 days.</do-it><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.b := a account: '000032451283'.b balanceIn: -45 days. </do-it><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><remove-selector><class-id>Core.Withdrawal</class-id> <selector>evaluateWithdrawalCashOn:</selector></remove-selector><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self balance - aCurrency.	self balance: newBalance.	self availableBalance: newBalance	"newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]"</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im' 'December 15, 2013' '12:59:44 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im was created at 12:59:44 PM on December 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im' 'December 15, 2013' '12:59:57 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im was created at 12:59:57 PM on December 15, 2013."</do-it><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount"	originalTransaction := aBankAccount transactionAt: transactionIDToCancel."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5)).	"self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: '$0 USD').</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5)).	self modifyDepositCheckTransaction: aTokenisedTransaction.	"self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction"	aTransaction := .	aTransaction amount:'$0 USD'."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction"	aTransaction := self getTransactionAt: (aTokenisedTransactio at: 1).	aTransaction amount:'$0 USD'."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction"	aTransaction := self getTransactionAt: (aTokenisedTransactio at: 1) asNumber.	aTransaction amount:'$0 USD'."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:">getTransactionAt: aTransactionID	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:for:">getTransactionAt: aTransactionID for: aTransaction	^bankAccounts detect: [:each | each transactionID = aTransactionID]</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>getTransactionAt:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:for:">getTransactionAt: aTransactionID for: aDepositType	^bankAccounts detect: [:each | each transactionID = aTransactionID]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:for:">getTransactionAt: aTransactionID for: aDepositType	| aTransaction |	aTransaction := bankAccounts detect: [:each | each transactionID = aTransactionID].	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:for:">getTransactionAt: aTransactionID for: aDepositType	| transaction |	transaction := bankAccounts select: [:each | each transactionID = aTransactionID].	^ transaction detect: [:each | each depositType = aDepositType]. </body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction"	aTransaction := self getTransactionAt: (aTokenisedTransactio at: 1) asNumber for: .	aTransaction amount:'$0 USD'."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction"	aTransaction := self getTransactionAt: (aTokenisedTransactio at: 1) asNumber for: 'Check'.	aTransaction amount:'$0 USD'."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction	| aTransaction |	aTransaction := self getTransactionAt: (aTokenisedTransaction at: 1) asNumber for: 'Check'.	aTransaction amount:'$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTokenisedTransaction	| aTransaction |	aTransaction := self getTransactionAt: (aTokenisedTransaction at: 5) asNumber for: 'Check'.	aTransaction amount:'$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:for:">getTransactionAt: aTransactionID for: aDepositType	| transaction |	transaction := transactions select: [:each | each transactionID = aTransactionID].	^ transaction detect: [:each | each depositType = aDepositType].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5)).	"self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine]."			self modityCancelTransactions."			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5)).	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions"	self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions		"	self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."	</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:">getTransactionAt: aTransactionID	^transactions detect: [:each | each transactionID = aTransactionID].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions select: [:each | each transactionType = 'Cancel'].	"	self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel']	"	self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="transactionsFrom:">transactionsFrom: aFilename	| readStream |	readStream := aFilename asFilename readStream.	readStream isNil		ifFalse: 			[			[[readStream atEnd] whileFalse: [self addTransactions: readStream nextLine].			self modifyCancelTransactions.			self executeTransactions]					valueNowOrOnUnwindDo: [readStream close]]		ifTrue: [^self error: 'Can not open file'].	^self</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions select: 					[:each |					each transactionType = 'Cancel'					"	self modifyDepositCheckTransaction: aTokenisedTransaction.	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions select: 					[:each |					each transactionType = 'Cancel'.].	cancelTransactions do: [:each | 						self modifyDepositCheckTransaction: each."	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."].</body></methods><methods><class-id>UI.TextEditorController</class-id> <category>private</category><body package="UIBasics-Controllers" selector="evaluateSelection">evaluateSelection	"Evaluate the current text selection as an expression and answer the result.	CompilationError may be signaled by #compileSelection."	| code result |	code := self compileSelection.	result := Cursor execute showWhile: [self evaluateCompiled: code].	self doItValue: result.	SourceFileManager default logChange: self selection string.	^result</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel'].	cancelTransactions do: 			[:each |			self modifyDepositCheckTransaction: each			"	self modifyWithdrawalTransaction: aTokenisedTransaction.	self modifyCancelTransaction: aTokenisedTransaction."]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel) asNumber for: 'Check'.	aTransactionToModify amount:'$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel)  for: 'Check'.	aTransactionToModify amount:'$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel'].	cancelTransactions do: 			[:each |			self modifyDepositCheckTransaction: each.	"		self modifyWithdrawalTransaction: each.	self modifyCancelTransaction: aTokenisedTransaction."]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyWithdrawalTransaction:">modifyWithdrawalTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel).	aTransactionToModify amount:'$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getWithdrawalTransactionAt:">getWithdrawalTransactionAt: aTransactionID	^transactions detect: [:each | each transactionID = aTransactionID].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyWithdrawalTransaction:">modifyWithdrawalTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getWithdrawalTransactionAt: (aTransaction transactionIDToCancel).	aTransactionToModify amount:'$0 USD'.</body></methods><remove-selector><class-id>Core.Bank</class-id> <selector>getTransactionAt:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyWithdrawalTransaction:">modifyWithdrawalTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getWithdrawalTransactionAt: (aTransaction transactionIDToCancel).	aTransactionToModify amount: '$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyWithdrawalTransaction:">modifyWithdrawalTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getWithdrawalTransactionAt: (aTransaction transactionIDToCancel).	aTransactionToModify amount: '$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getWithdrawalTransactionAt:">getWithdrawalTransactionAt: aTransactionID	^transactions detect: [:each | (each transactionID = aTransactionID) &amp; (each transactionType = 'Withdrawal')].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel'].	cancelTransactions do: 			[:each |			self modifyDepositCheckTransaction: each.			self modifyWithdrawalTransaction: each.	"self modifyCancelTransaction: aTokenisedTransaction."]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getWithdrawalTransactionAt:">getWithdrawalTransactionAt: aTransactionID	^transactions detect: [:each | (each transactionID = aTransactionID) &amp; (each type = 'Withdrawal')].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions depositChecktransaction |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel'].	cancelTransactions do: 			[:each |			depositChecktransaction := self modifyDepositCheckTransaction: each.			self modifyWithdrawalTransaction: each.	"self modifyCancelTransaction: aTokenisedTransaction."]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel)  for: 'Check'.	aTransactionToModify amount:'$0 USD'.	^aTransactionToModify.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions depositCheckTransaction |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel'].	cancelTransactions do: 			[:each |			depositCheckTransaction := self modifyDepositCheckTransaction: each.			self modifyWithdrawalTransaction: depositCheckTransaction.	"self modifyCancelTransaction: aTokenisedTransaction."]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getWithdrawalTransactionAt:">getWithdrawalTransactionAt: aTransaction	^transactions detect: [:each | (each transactionID = aTransaction transactionTimestamp) &amp; (each type = 'Withdrawal')].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getWithdrawalTransactionAt:">getWithdrawalTransactionAt: aTransaction	| searchedTransactions |	searchedTransactions := transactions select: [:each | (each transactionID = aTransaction transactionTimestamp) &amp; (each type = 'Withdrawal')].	^searchedTransactions detect: [:each | each withdrawalType = 'Check'].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyWithdrawalTransaction:">modifyWithdrawalTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getWithdrawalTransactionAt: aTransaction.	aTransactionToModify amount: '$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getWithdrawalTransactionAt:">getWithdrawalTransactionAt: aTransaction	| searchedTransactions |	searchedTransactions := transactions select: [:each | (each transactionTimestamp = aTransaction transactionTimestamp) &amp; (each type = 'Withdrawal')].	^searchedTransactions detect: [:each | each withdrawalType = 'Check'].</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTransaction	| aTransactionToModify |"	searchedTransactions := self getTransactionAt: (aTransaction transactionIDToCancel) . for: 'Check'.	searchedTransactions do: [:each | each amount:'$0 USD'.].	^searchedTransactions at: 1."</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositCheckTransaction:">modifyDepositCheckTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel) for: 'Check'.	aTransactionToModify amount:'$0 USD'.	^aTransactionToModify</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositClearCheckTransaction:">modifyDepositClearCheckTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel) for: 'ClearCheck'.	aTransactionToModify amount:'$0 USD'.	^aTransactionToModify</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyDepositClearCheckTransaction:">modifyDepositClearCheckTransaction: aTransaction	| aTransactionToModify |	aTransactionToModify := self getTransactionAt: (aTransaction transactionIDToCancel) for: 'ClearCheck'.	aTransactionToModify amount:'$0 USD'.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="modifyCancelTransactions">modifyCancelTransactions	| cancelTransactions depositCheckTransaction |	cancelTransactions := transactions				select: [:each | each transactionType = 'Cancel'].	cancelTransactions do: 			[:each |			depositCheckTransaction := self modifyDepositCheckTransaction: each.			self modifyWithdrawalTransaction: depositCheckTransaction.			self modifyDepositClearCheckTransaction: each.]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="getTransactionAt:for:">getTransactionAt: aTransactionID for: aDepositType	| transaction |	transaction := transactions select: [:each | ((each transactionID = aTransactionID) &amp; (each transactionType = 'Deposit'))].	^ transaction detect: [:each | each depositType = aDepositType].</body></methods><do-it>a:= Bank routingNumber:'055012581'.a transactionsFrom: 'transactions.txt'. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im' 'December 15, 2013' '4:22:52 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im was created at 4:22:52 PM on December 15, 2013."</do-it><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount"	evaluateWithdrawalCashOn: aBankAccount."	"| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance"</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount"	evaluateWithdrawalCashOn: aBankAccount."	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount"withdrawalType = 'Cash'	ifTrue: [evaluateWithdrawalCashOn: aBankAccount.]""		| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance"</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance.</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCashOn:">evaluateWithdrawalCashOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccountwithdrawalType = 'Cash'	ifTrue: [self evaluateWithdrawalCashOn: aBankAccount.]"		| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance"</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	withdrawalType = 'Cash'		ifTrue: [self evaluateWithdrawalCashOn: aBankAccount]	"		| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance"</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	withdrawalType = 'Cash'		ifTrue: [self evaluateWithdrawalCashOn: aBankAccount].	"withdrawalType = 'Check'		ifTrue: [self evaluateWithdrawalCheckOn: aBankAccount]."	</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCheckOn:">evaluateWithdrawalCheckOn: aBankAccount	| aCurrency |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	withdrawalType = 'Cash'		ifTrue: [self evaluateWithdrawalCashOn: aBankAccount].	withdrawalType = 'Check'		ifTrue: [self evaluateWithdrawalCheckOn: aBankAccount].</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCheckOn:">evaluateWithdrawalCheckOn: aBankAccount	| aCurrency balanceBeforeWithdrawal |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	balanceBeforeWithdrawal := aBankAccount availableBalance.	aBankAccount withdrawal: aCurrency.	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |self balance: self balance - aCurrency.self availableBalance: self availableBalance - aCurrency.	newBalance := self availableBalance - aCurrency.		"newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]"</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |self balance: self balance - aCurrency.self availableBalance: self availableBalance - aCurrency.	newBalance := self availableBalance - aCurrency.	"newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]"</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCheckOn:">evaluateWithdrawalCheckOn: aBankAccount	| aCurrency balanceBeforeWithdrawal |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	balanceBeforeWithdrawal := aBankAccount availableBalance.	aBankAccount withdrawal: aCurrency.	balanceBeforeWithdrawal - aBankAccount availableBalance		&lt; aBankAccount balanceLimit ifTrue: [aBankAccount deposit: aCurrency].	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateWithdrawalCheckOn:">evaluateWithdrawalCheckOn: aBankAccount	| aCurrency balanceBeforeWithdrawal |	aCurrency := Currency newAmount: amount date: transactionTimestamp getDate.	balanceBeforeWithdrawal := aBankAccount availableBalance.	aBankAccount withdrawal: aCurrency.	((balanceBeforeWithdrawal - aBankAccount availableBalance) 	&lt; aBankAccount balanceLimit)		 ifTrue: [aBankAccount deposit: aCurrency].	aBankAccount		addHistory: (Timestamp readFromDateAndTime: transactionTimestamp readStream)		balance: aBankAccount balance		availableBalance: aBankAccount availableBalance</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction.</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="process:">process: aTransaction	aTransaction evaluateOn: self</body></methods><methods><class-id>Core.Cancel</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="evaluateOn:">evaluateOn: aBankAccount	depositType = 'Cash' ifTrue: [self evaluateDepositCashOn: aBankAccount].	depositType = 'Check' ifTrue: [self evaluateDepositCheckOn: aBankAccount].	depositType = 'ClearCheck' ifTrue: [self evaluateDepositClearCheckOn: aBankAccount]</body></methods><methods><class-id>Core.NewAccount</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	accountID := nil.	name := nil.	customerType := nil.	amount := nil.	^self</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	withdrawalType := nil.	fromAccountInfo := nil.	toAccountInfo := nil.	checkNumber := nil.	amount := nil.	^self</body></methods><class><name>Withdrawal</name><environment>Core</environment><super>Core.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>withdrawalType fromAccountInformation toAccountInformation checkNumber amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.Withdrawal</class-id> <category>private</category><body package="Assignment6" selector="toAccountInformation:">toAccountInformation: anObject	toAccountInformation := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>private</category><body package="Assignment6" selector="fromAccountInformation:">fromAccountInformation: anObject	fromAccountInformation := anObject</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>initialize-release</category><body package="Assignment6" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	withdrawalType := nil.	fromAccountInformation := nil.	toAccountInformation := nil.	checkNumber := nil.	amount := nil.	^self</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInformation">toAccountInformation	^toAccountInformation</body></methods><methods><class-id>Core.Withdrawal</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInformation">fromAccountInformation	^fromAccountInformation</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 6)				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8)).</body></methods><class><name>Bank</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>routingNumber bankAccounts transactions outgoingTransactions </inst-vars><class-inst-vars>count </class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><do-it>count ifNil:[a:=10]</do-it><do-it>count isNil ifTrue: [a:=12].</do-it><remove-selector><class-id>Core.Bank</class-id> <selector>addCancelForDeposit:</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens."	self class count isNil		ifTrue: [(self class count) := 4728]."	transactionType := tokenisedTransaction at: 3.	transactionType = 'NewAccount'		ifTrue: [self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction].	transactionType = 'Cancel'		ifTrue: [self addCancelTransaction: tokenisedTransaction]</body></methods><do-it>Bank class organization addCategory: #accessing</do-it><methods><class-id>Core.Bank class</class-id> <category>accessing</category><body package="Assignment6" selector="getCount">getCount	count isNil 		ifTrue: [count := 4728]		ifFalse: [count := count + 1].	^count</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addTransactions:">addTransactions: aTransaction	| tokenisedTransaction transactionType |	tokenisedTransaction := aTransaction getTokens.	transactionType := tokenisedTransaction at: 3.	transactionType = 'NewAccount'		ifTrue: [self addNewAccountTransaction: tokenisedTransaction].	transactionType = 'Deposit'		ifTrue: [self addDepositTransaction: tokenisedTransaction].	transactionType = 'Withdrawal'		ifTrue: [self addWithdrawalTransaction: tokenisedTransaction].	transactionType = 'Cancel'		ifTrue: [self addCancelTransaction: tokenisedTransaction]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (self class getCount) printString				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalForDeposit:">addWithdrawalForDeposit: aTokenisedTransaction	transactions add: (Withdrawal				newTransactionID: (self class getCount) printString				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: 'Withdrawal'				withdrawalType: 'Check'				fromAccountInformation: (aTokenisedTransaction at: 6)				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 9)).</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: '$';		nextPutAll: self amount printString;		nextPut: Character space;		nextPutAll: self countryCode</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction"Cancel transaction format: transactionID transactionTimestamp Cancel AccountInformation transactionIDToCancel"	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCashTransaction:">addDepositCashTransaction: aTokenisedTransaction"Deposit Cash Transaction format: transactionID transactionTimestamp Deposit Cash AccountInformation amount"	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:"> addDepositCheckTransaction: aTokenisedTransaction"Deposit Check transaction format: transactionID transactionTimestamp Deposit Check FromAccountInformation ToAccountInformation checkNumber hold amount"	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction.</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction"Deposit ClearCheck transaction format: transactionID transactionTimestamp Deposit ClearCheck FromAccountInformation ToAccountInformation checkNumber hold amount"	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp readFromDateAndTime: ((aTokenisedTransaction at: 2) readStream))				+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm' .	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addNewAccountTransaction:">addNewAccountTransaction: aTokenisedTransaction"NewAccount Transaction format: transactionID transactionTimestamp NewAccount AccountID name customerType amount"	transactions add: (NewAccount				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountID: (aTokenisedTransaction at: 4)				name: (aTokenisedTransaction at: 5)				customerType: (aTokenisedTransaction at: 6)				amount: (aTokenisedTransaction at: 7))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction"Wthdrawal Cash Transaction format: transactionID transactionTimestamp Withdrawal Cash AccountInformation amount"	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCashTransaction:">addWithdrawalCashTransaction: aTokenisedTransaction	"Wthdrawal Cash Transaction format: transactionID transactionTimestamp Withdrawal Cash AccountInformation amount"	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction"Withdrawal Check Transaction format: transactionID transactionTimestamp Withdrawal Check FromAccountInformation ToAccountInformation chechNumber amount"	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 6)				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8)).</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalCheckTransaction:">addWithdrawalCheckTransaction: aTokenisedTransaction	"Withdrawal Check Transaction format: transactionID transactionTimestamp Withdrawal Check FromAccountInformation ToAccountInformation chechNumber amount"	transactions add: (Withdrawal				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				withdrawalType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 6)				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 8))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addWithdrawalForDeposit:">addWithdrawalForDeposit: aTokenisedTransaction	"Withdrawal Check Transaction format: transactionID transactionTimestamp Withdrawal Check FromAccountInformation ToAccountInformation chechNumber amount"	transactions add: (Withdrawal				newTransactionID: self class getCount printString				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: 'Withdrawal'				withdrawalType: 'Check'				fromAccountInformation: (aTokenisedTransaction at: 6)				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: (aTokenisedTransaction at: 7)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addNewAccountTransaction:">addNewAccountTransaction: aTokenisedTransaction	"NewAccount Transaction format: transactionID transactionTimestamp NewAccount AccountID name customerType amount"	transactions add: (NewAccount				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountID: (aTokenisedTransaction at: 4)				name: (aTokenisedTransaction at: 5)				customerType: (aTokenisedTransaction at: 6)				amount: (aTokenisedTransaction at: 7))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	"Deposit ClearCheck transaction format: transactionID transactionTimestamp Deposit ClearCheck FromAccountInformation ToAccountInformation checkNumber hold amount"	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp				readFromDateAndTime: (aTokenisedTransaction at: 2) readStream)					+ (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCheckTransaction:">addDepositCheckTransaction: aTokenisedTransaction	"Deposit Check transaction format: transactionID transactionTimestamp Deposit Check FromAccountInformation ToAccountInformation checkNumber hold amount"	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9)).	self addDepositClearCheckTransaction: aTokenisedTransaction.	self addWithdrawalForDeposit: aTokenisedTransaction</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositCashTransaction:">addDepositCashTransaction: aTokenisedTransaction	"Deposit Cash Transaction format: transactionID transactionTimestamp Deposit Cash AccountInformation amount"	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				depositType: (aTokenisedTransaction at: 4)				fromAccountInformation: nil				toAccountInformation: (aTokenisedTransaction at: 5)				checkNumber: nil				hold: nil				amount: (aTokenisedTransaction at: 6))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addCancelTransaction:">addCancelTransaction: aTokenisedTransaction	"Cancel transaction format: transactionID transactionTimestamp Cancel AccountInformation transactionIDToCancel"	transactions add: (Cancel				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: (aTokenisedTransaction at: 2)				transactionType: (aTokenisedTransaction at: 3)				accountInformation: (aTokenisedTransaction at: 4)				transactionIDToCancel: (aTokenisedTransaction at: 5))</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="addDepositClearCheckTransaction:">addDepositClearCheckTransaction: aTokenisedTransaction	"Deposit ClearCheck transaction format: transactionID transactionTimestamp Deposit ClearCheck FromAccountInformation ToAccountInformation checkNumber hold amount"	| timestamp pc newTransactionTimestamp |	timestamp := (Timestamp readFromDateAndTime: (aTokenisedTransaction at: 2) readStream) + (aTokenisedTransaction at: 8) asNumber days.	pc := PrintConverter for: #timestamp withFormatString: 'm.d.y hh:mm'.	newTransactionTimestamp := (pc formatStringFor: timestamp) string.	transactions add: (Deposit				newTransactionID: (aTokenisedTransaction at: 1)				transactionTimestamp: newTransactionTimestamp				transactionType: (aTokenisedTransaction at: 3)				depositType: 'ClearCheck'				fromAccountInformation: (aTokenisedTransaction at: 5)				toAccountInformation: (aTokenisedTransaction at: 6)				checkNumber: (aTokenisedTransaction at: 7)				hold: (aTokenisedTransaction at: 8)				amount: (aTokenisedTransaction at: 9))</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |"self balance: self balance - aCurrency.self availableBalance: self availableBalance - aCurrency."	newBalance := self availableBalance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]</body></methods><do-it>a:= Bank routingNumber:'055012581'. a transactionsFrom: 'transactions.txt'. </do-it><class><name>BankTest</name><environment>Core</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6</package></attributes></class><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testTwoAccounts">testTwoAccounts"	| simpleAccount cashAccount |	self createFile: 'simpleCreate'.	self createFile: 'cashDepositsWithdrawals'.	simpleAccount := BankAccount_prev fromFile: 'simpleCreate'.	cashAccount := BankAccount_prev fromFile: 'cashDepositsWithdrawals'.	self		assert: simpleAccount balance = '10.00' asCurrency;		assert: simpleAccount availableBalance = '10.00' asCurrency.	self		assert: (cashAccount balanceIn: -3 days) = '10.00' asCurrency;		assert: (cashAccount balanceIn: -2 days) = '40.00' asCurrency;		assert: (cashAccount balanceIn: -1 days) = '25.00' asCurrency;		assert: cashAccount balance = '25.00' asCurrency"</body></methods><do-it>BankTest organization addCategory: #'test data'</do-it><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD'</body></methods><methods><class-id>BankAccountSampleTests</class-id> <category>tests</category><body package="Assignment5" selector="testNewAccounts">testNewAccounts	| simpleAccount cashAccount |	self createFile: 'simpleCreate'.	self createFile: 'cashDepositsWithdrawals'.	simpleAccount := BankAccount_prev fromFile: 'simpleCreate'.	cashAccount := BankAccount_prev fromFile: 'cashDepositsWithdrawals'.	self		assert: simpleAccount balance = '10.00' asCurrency;		assert: simpleAccount availableBalance = '10.00' asCurrency.	self		assert: (cashAccount balanceIn: -3 days) = '10.00' asCurrency;		assert: (cashAccount balanceIn: -2 days) = '40.00' asCurrency;		assert: (cashAccount balanceIn: -1 days) = '25.00' asCurrency;		assert: cashAccount balance = '25.00' asCurrency</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts"	| simpleAccount cashAccount |	self createFile: 'simpleCreate'.	self createFile: 'cashDepositsWithdrawals'.	simpleAccount := BankAccount_prev fromFile: 'simpleCreate'.	cashAccount := BankAccount_prev fromFile: 'cashDepositsWithdrawals'.	self		assert: simpleAccount balance = '10.00' asCurrency;		assert: simpleAccount availableBalance = '10.00' asCurrency.	self		assert: (cashAccount balanceIn: -3 days) = '10.00' asCurrency;		assert: (cashAccount balanceIn: -2 days) = '40.00' asCurrency;		assert: (cashAccount balanceIn: -1 days) = '25.00' asCurrency;		assert: cashAccount balance = '25.00' asCurrency"</body></methods><remove-selector><class-id>BankAccountSampleTests</class-id> <selector>testTwoAccounts</selector></remove-selector><remove-selector><class-id>Core.BankTest</class-id> <selector>testTwoAccounts</selector></remove-selector><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank |	self createFile: 'transactions'.	aBank := Bank Bank routingNumber:'055012581'. 	aBank a transactionsFrom: 'transactions'."	cashAccount := BankAccount_prev fromFile: 'cashDepositsWithdrawals'.	self		assert: simpleAccount balance = '10.00' asCurrency;		assert: simpleAccount availableBalance = '10.00' asCurrency.	self		assert: (cashAccount balanceIn: -3 days) = '10.00' asCurrency;		assert: (cashAccount balanceIn: -2 days) = '40.00' asCurrency;		assert: (cashAccount balanceIn: -1 days) = '25.00' asCurrency;		assert: cashAccount balance = '25.00' asCurrency"</body></methods><do-it>BankTest organization addCategory: #private</do-it><methods><class-id>Core.BankTest</class-id> <category>private</category><body package="Assignment6" selector="createFile:">createFile: aStringName	| file fileWrite contents |	file := aStringName asFilename.	fileWrite := file writeStream.		[contents := self perform: aStringName asSymbol.	contents replaceAll: $\ with: Character tab.	fileWrite nextPutAll: contents]			ensure: [fileWrite close]</body></methods><do-it>BankTest organization addCategory: #'initialize-release'</do-it><methods><class-id>Core.BankTest</class-id> <category>initialize-release</category><body package="Assignment6" selector="tearDown">tearDown	self dataFiles do: 			[:each |			| file |			file := each asFilename.			file exists ifTrue: [file delete]]</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions	^'1\',  (self today - 3 days) printString ,'\NewAccount\Roger Whitney\Normal\$10.00'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>private</category><body package="Assignment6" selector="today">today	^Timestamp now</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank |	self createFile: 'transactions'.	aBank := Bank Bank routingNumber:'055012581'. 	aBank a transactionsFrom: 'transactions'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank |	self createFile: 'transactions'."	aBank := Bank Bank routingNumber:'055012581'. 	aBank a transactionsFrom: 'transactions'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| |	self createFile: 'transactions'."	aBank := Bank Bank routingNumber:'055012581'. 	aBank a transactionsFrom: 'transactions'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	self createFile: 'transactions'."	aBank := Bank Bank routingNumber:'055012581'. 	aBank a transactionsFrom: 'transactions'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	self createFile: 'transactions'	"	aBank := Bank Bank routingNumber:'055012581'. 	aBank a transactionsFrom: 'transactions'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="wrongOrder">wrongOrder	"The \ characters are converted to tabs when data is written to file"	^'9\',  (self today - 3 days) printString ,'\NewAccount\Roger Whitney\Normal\$10.004\',  (self today - 1 days) printString ,'\Withdrawal\$15.003\',  (self today - 2 days) printString ,'\Deposit\Cash\$30.00'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testCashDepositsWithdrawalsWrongOrder">testCashDepositsWithdrawalsWrongOrder	| |	self createFile: 'wrongOrder'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testCashDepositsWithdrawalsWrongOrder">testCashDepositsWithdrawalsWrongOrder	self createFile: 'wrongOrder'.</body></methods><remove-selector><class-id>Core.BankTest</class-id> <selector>testCashDepositsWithdrawalsWrongOrder</selector></remove-selector><remove-selector><class-id>Core.BankTest</class-id> <selector>wrongOrder</selector></remove-selector><do-it>Currency fromString:'$107716.15 USD'</do-it><do-it>Currency fromString:'$-1000.00 USD'</do-it><do-it>Currency fromString:'$-1000.00 USD'</do-it><methods><class-id>CurrencyTest</class-id> <category>tests</category><body package="Assignment6" selector="testAdd">testAdd| sum |       sum := Currency fromString: '$0.00 USD'.       1000 timesRepeat: [               sum := sum + (Currency fromString: '$0.33 USD')].       self assert: sum = (Currency fromString: '$330. USD')</body></methods><do-it>a:= Bank routingNumber:'055012581'. a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.Transcript show: aAccountNumber printString.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><do-it>a:= Bank routingNumber:'055012581'. a transactionsFrom: 'transactions.txt'.</do-it><methods><class-id>Core.BankTest</class-id> <category>initialize-release</category><body package="Assignment6" selector="tearDown">tearDown"	self dataFiles do: 			[:each |			| file |			file := each asFilename.			file exists ifTrue: [file delete]]"</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank |	aBank:= Bank routingNumber:'055012581'. 	aBank transactionsFrom: 'transactions.txt'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank:= Bank routingNumber:'055012581'. 	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.aBankAccount balance. </body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	aBankAccount balance</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	aBankAccount balanceIn: -14 days. </body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -15 days) = '$100.00 USD'.</body></methods><do-it>aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.</do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'. 	aBankAccount balanceIn: -14 days</do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) = '$100.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'.	</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$500.0 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'.	aBankAccount1 := aBank account: '000032451294'.	self assert: (aBankAccount1 balanceIn: -14 days) printString = '$500.0 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	"aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'."	aBankAccount1 := aBank account: '000032451294'.	self assert: (aBankAccount1 balanceIn: -14 days) printString = '$500.0 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	"aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'."	aBankAccount1 := aBank account: '000032451294'.	self assert: (aBankAccount1 balanceIn: -13 days) printString = '$500.0 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.0 USD'.	aBankAccount1 := aBank account: '000032451294'.	self assert: (aBankAccount1 balanceIn: -13 days) printString = '$500.0 USD'.</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: ((self amount asFixedPoint: 2) printFormat: '$#,###.00;[RED]($-#,###.00);$0.00');		nextPut: Character space;		nextPutAll: self countryCode</body></methods><methods><class-id>Currency</class-id> <category>printing</category><body package="Assignment6" selector="printOn:">printOn: aStream	aStream		nextPutAll: ((self amount asFixedPoint: 2) printFormat: '$#,###.00;[RED]$-#,###.00;$0.00');		nextPut: Character space;		nextPutAll: self countryCode</body></methods><do-it>Currency fromString:'$-1000 USD'</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.00 USD'.	self assert: a availableBalance printString = '$-100000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.00 USD'.	self assert: a availableBalance printString = '$-105000.00 USD'.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	"a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.00 USD'.	self assert: a availableBalance printString = '$-100000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.00 USD'.	self assert: a availableBalance printString = '$-105000.00 USD'."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.00 USD'.	self assert: a availableBalance printString = '$-100000.00 USD'.	"a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.00 USD'.	self assert: a availableBalance printString = '$-105000.00 USD'."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100000.00 USD'.	"self assert: a availableBalance printString = '$-100000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.00 USD'.	self assert: a availableBalance printString = '$-105000.00 USD'."</body></methods><do-it>a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	a withdrawal: (Currency fromString: '$100000 USD').      a balance printString</do-it><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100,000.00 USD'.	"self assert: a availableBalance printString = '$-100000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105000.00 USD'.	self assert: a availableBalance printString = '$-105000.00 USD'."</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testGoldWithdrawal">testGoldWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Gold'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$100000 USD').	self assert: a balance printString = '$-100,000.00 USD'.	self assert: a availableBalance printString = '$-100,000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-105,000.00 USD'.	self assert: a availableBalance printString = '$-105,000.00 USD'.</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testNormalWithdrawal">testNormalWithdrawal	| a b |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	b := BankAccount				newAccountID: 12				customerName: 'Scott'				customerType: 'Normal'				balance: '$45.12 USD'				date: Date today printString.	b withdrawal: (Currency fromString: '$50 USD').	self assert: b balance printString = '$40.12 USD'.	self assert: b availableBalance printString = '$40.12 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1,000.0 USD'.	self assert: a availableBalance printString = '$-1,000.0 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1,003.0 USD'.	self assert: a balance printString = '$-1,003.0 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPreferredWithdrawal">testPreferredWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Preferred'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$1000 USD').	self assert: a balance printString = '$-1,000.00 USD'.	self assert: a availableBalance printString = '$-1,000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-1,003.00 USD'.	self assert: a balance printString = '$-1,003.00 USD'</body></methods><methods><class-id>Core.BankAccountTest</class-id> <category>tests</category><body package="Assignment6" selector="testPremiumWithdrawal">testPremiumWithdrawal	| a |	a := BankAccount				newAccountID: 000032451283				customerName: 'Scott'				customerType: 'Premium'				balance: '$45.12 USD'				date: Date today printString.	a withdrawal: (Currency fromString: '$45.12 USD').	self assert: a balance printString = '$0.00 USD'.	self assert: a availableBalance printString = '$0.00 USD'.	a withdrawal: (Currency fromString: '$10000 USD').	self assert: a balance printString = '$-10,000.00 USD'.	self assert: a availableBalance printString = '$-10,000.00 USD'.	a withdrawal: (Currency fromString: '$100 USD').	self assert: a balance printString = '$-10,700.00 USD'.	self assert: a availableBalance printString = '$-10,700.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testNewAccounts">testNewAccounts	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.00 USD'.	aBankAccount1 := aBank account: '000032451294'.	self assert: (aBankAccount1 balanceIn: -13 days) printString = '$500.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -14 days) printString = '$100.00 USD'.	aBankAccount1 := aBank account: '000032451294'.	self assert: (aBankAccount1 balanceIn: -13 days) printString = '$500.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -12 days) printString = '$110.00 USD'.</body></methods><do-it>aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -12 days)</do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 availableBalanceIn: -12 days) </do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 availableBalanceIn: -13 days) </do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$110.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$110.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCash">testDepositCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$110.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$90.00 USD';		assert: (aBankAccount availableBalanceIn: -12 days) printString = '$110.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$90.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$110.00 USD'</body></methods><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 availableBalanceIn: -11 days) </do-it><remove-selector><class-id>Core.BankTest</class-id> <selector>testDepositCheck</selector></remove-selector><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCash">testWithdrawalCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$110.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCash">testWithdrawalCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -10 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -10 days) printString = '$110.00 USD'</body></methods><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 availableBalanceIn: -10 days)  </do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCash">testWithdrawalCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -10 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -10 days) printString = '$50.00 USD'</body></methods><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -10 days)  </do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCash">testWithdrawalCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -10 days) printString = '$50.00 USD';		assert: (aBankAccount availableBalanceIn: -10 days) printString = '$50.00 USD'</body></methods><do-it>Date today</do-it><do-it>Date today - 10 days</do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -11 days)  </do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -12 days)  </do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -11 days)  </do-it><remove-selector><class-id>Core.BankTest</class-id> <selector>testWithdrawalCash</selector></remove-selector><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := aTransaction toAccountInformation getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := (aTransaction toAccountInformation) getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := aTransaction toAccountInformation getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Bank</class-id> <category>accessing</category><body package="Assignment6" selector="executeTransactions">executeTransactions	| aRoutingNumber aAccountNumber anAccount |	transactions do: 			[:aTransaction |			aTransaction type = 'NewAccount'				ifTrue: 					[anAccount := self executeNewAccount: aTransaction.					bankAccounts add: anAccount]				ifFalse: 					[aRoutingNumber := (aTransaction toAccountInformation) getRoutingNumber.					self routingNumber = aRoutingNumber						ifTrue: 							[aAccountNumber := (aTransaction toAccountInformation) getAccountNumber.							anAccount := self account: aAccountNumber.							anAccount process: aTransaction]						ifFalse: [outgoingTransactions add: aTransaction]]]</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="fromAccountInformation">fromAccountInformation	^fromAccountInformation</body></methods><methods><class-id>Core.Deposit</class-id> <category>accessing</category><body package="Assignment6" selector="toAccountInformation">toAccountInformation	^toAccountInformation</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions"	^'111113	12.01.2013 17:30	NewAccount	000032451283	Roger Whitney	Normal	$100.00 USD111114	12.02.2013 17:30	NewAccount	000032451294	James Bond	Normal	$500.00 USD111118	12.02.2013 17:30	Deposit	Cash	:055012581:000032451283	$10.00 USD111116	12.03.2013 1:30	Deposit	Check	:055012581:000032451283	:055012581:000032451294	100	3	$20.00 USD111117	12.04.2013 1:30	Withdrawal	Cash	:055012581:000032451283	$30.00 USD111122	12.04.2013 1:30	Withdrawal	Check	:055012581:000032451283	:995012581:000077451283	101	$10.00 USD111119	12.05.2013 1:30	Deposit	Check	:995012581:000077451299	:055012581:000032451283	100	3	$20.00 USD111121	12.06.2013 1:30	Cancel	:055012581:000032451283	111119'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions"	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD111114\12.02.2013 17:30\NewAccount\000032451294\James Bond\Normal\$500.00 USD111118\12.02.2013 17:30\Deposit\Cash\:055012581:000032451283\$10.00 USD111116\12.03.2013 1:30\Deposit\Check\:055012581:000032451283\:055012581:000032451294\100\3\$20.00 USD111117\12.04.2013 1:30\Withdrawal\Cash\:055012581:000032451283\$30.00 USD111122\12.04.2013 1:30\Withdrawal\Check\:055012581:000032451283\:995012581:000077451283\101\$10.00 USD111119\12.05.2013 1:30\Deposit\Check\:995012581:000077451299\:055012581:000032451283\100\3\$20.00 USD111121\12.06.2013 1:30\Cancel\:055012581:000032451283\111119'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$110.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$110.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$110.00 USD'</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self availableBalance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]</body></methods><methods><class-id>Core.BankAccount</class-id> <category>accessing</category><body package="Assignment6" selector="withdrawal:">withdrawal: aCurrency	| newBalance |	newBalance := self availableBalance - aCurrency.	newBalance &lt; self balanceLimit		ifTrue: 			[self balance: self balance - overDraftFee.			self availableBalance: self availableBalance - overDraftFee]		ifFalse: 			[self balance: newBalance.			self availableBalance: newBalance]</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -13 days) printString = '$520.00 USD';		assert: (aBankAccount availableBalanceIn: -13 days) printString = '$500.00 USD'</body></methods><do-it>aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451294'.	 (aBankAccount1 balanceIn: -11 days)</do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451294'.	 (aBankAccount1 availableBalanceIn: -11 days) </do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -11 days) printString = '$520.00 USD'";		assert: (aBankAccount availableBalanceIn: -11 days) printString = '$500.00 USD'"</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -11 days) printString = '$520.00 USD';		assert: (aBankAccount availableBalanceIn: -11 days) printString = '$500.00 USD'</body></methods><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 availableBalanceIn: -11 days) </do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -11 days)  </do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testDepositCheck">testDepositCheck	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -11 days) printString = '$520.00 USD';		assert: (aBankAccount availableBalanceIn: -11 days) printString = '$500.00 USD'.	aBankAccount1 := aBank account: '000032451283'.	self assert: (aBankAccount1 balanceIn: -11 days) printString = '$50.00 USD';		assert: (aBankAccount1 availableBalanceIn: -11 days) printString = '$50.00 USD'.</body></methods><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -10 days)   </do-it><do-it>Date today - 10 days</do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 balanceIn: -9 days)   </do-it><do-it> aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount1 := aBank account: '000032451283'.	 (aBankAccount1 availableBalanceIn: -9 days)   </do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCash">testWithdrawalCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD';		assert: (aBankAccount availableBalanceIn: -9 days) printString = '$5.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCash">testWithdrawalCash	| aBank aBankAccount |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD';		assert: (aBankAccount availableBalanceIn: -9 days) printString = '$50.00 USD'</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testWithdrawalCheck">testWithdrawalCheck	| aBank aBankAccount aBankAccount1 |	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451294'.	self assert: (aBankAccount balanceIn: -11 days) printString = '$520.00 USD';		assert: (aBankAccount availableBalanceIn: -11 days) printString = '$500.00 USD'.	aBankAccount1 := aBank account: '000032451283'.	self assert: (aBankAccount1 balanceIn: -11 days) printString = '$50.00 USD';		assert: (aBankAccount1 availableBalanceIn: -11 days) printString = '$50.00 USD'.</body></methods><remove-selector><class-id>Core.BankTest</class-id> <selector>testWithdrawalCheck</selector></remove-selector><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD111114\12.02.2013 17:30\NewAccount\000032451294\James Bond\Normal\$500.00 USD111118\12.02.2013 17:30\Deposit\Cash\:055012581:000032451283\$10.00 USD111116\12.03.2013 1:30\Deposit\Check\:055012581:000032451283\:055012581:000032451294\100\3\$20.00 USD111117\12.04.2013 1:30\Withdrawal\Cash\:055012581:000032451283\$30.00 USD111122\12.04.2013 1:30\Withdrawal\Check\:055012581:000032451283\:995012581:000077451283\101\$10.00 USD111119\12.05.2013 1:30\Deposit\Check\:995012581:000077451299\:055012581:000032451283\100\3\$20.00 USD111121\12.06.2013 1:30\Cancel\:055012581:000032451283\111119'.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im' 'December 15, 2013' '11:54:29 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im was created at 11:54:29 PM on December 15, 2013."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im' 'December 15, 2013' '11:54:35 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_6.im was created at 11:54:35 PM on December 15, 2013."</do-it><do-it>a := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'.</do-it><do-it>a := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'. b := Currency newAmount:'$12 MXN' date:'11.07.2013'. c := a + b.</do-it><do-it>a := Currency newAmount:12 date:'11.07.2013' countryCode:'USD'. </do-it><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactionsData">transactionsData	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD111114\12.02.2013 17:30\NewAccount\000032451294\James Bond\Normal\$500.00 USD111118\12.02.2013 17:30\Deposit\Cash\:055012581:000032451283\$10.00 USD111116\12.03.2013 1:30\Deposit\Check\:055012581:000032451283\:055012581:000032451294\100\3\$20.00 USD111117\12.04.2013 1:30\Withdrawal\Cash\:055012581:000032451283\$30.00 USD111122\12.04.2013 1:30\Withdrawal\Check\:055012581:000032451283\:995012581:000077451283\101\$10.00 USD111119\12.05.2013 1:30\Deposit\Check\:995012581:000077451299\:055012581:000032451283\100\3\$20.00 USD111121\12.06.2013 1:30\Cancel\:055012581:000032451283\111119'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| account |	self createFile: 'transactionData'.	"account := BankAccount fromFile: 'transactionData'.	self		assert: account balance = '10.00' asCurrency;		assert: account availableBalance = '10.00' asCurrency"</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| account |	self createFile: 'transactionsData'.	"account := BankAccount fromFile: 'transactionsData'.	self		assert: account balance = '10.00' asCurrency;		assert: account availableBalance = '10.00' asCurrency"</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactionsData">transactionsData	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD'replaceAll: $\with: Character tab</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactionsData">transactionsData	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD' replaceAll: $\with: Character tab.</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactionsData">transactionsData	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	self createFile: 'transactionsData'.	"account := BankAccount fromFile: 'transactionsData'.	self		assert: account balance = '10.00' asCurrency;		assert: account availableBalance = '10.00' asCurrency"</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	self createFile: 'transactionsData'.	</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	self createFile: 'transactionsData'</body></methods><methods><class-id>Core.BankTest</class-id> <category>private</category><body package="Assignment6" selector="createFile:">createFile: aStringName	| file fileWrite contents |	file := aStringName asFilename.	fileWrite := file writeStream.		[contents := self perform: aStringName asSymbol.	contents beMutable.	contents replaceAll: $\ with: Character tab.	fileWrite nextPutAll: contents]			ensure: [fileWrite close]</body></methods><component-created><name>Assignment6Tests</name> <type>package</type></component-created><component-property><name>Assignment6Tests</name> <type>package</type><property>packageName</property> <value>'Assignment6Tests'</value></component-property><component-property><name>Assignment6Tests</name> <type>package</type><property>parcelName</property> <value>'Assignment5Tests'</value></component-property><class><name>Assignment6TestsREW</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bank </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Assignment6Tests</package></attributes></class><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="premiumOverDraftBad">premiumOverDraftBad	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Premium\$1.00 USD11113\',   (self today - 19 days) printString ,'\Withdrawal\Cash\:055012581:000032451289\$10002.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="mexicanAddTwo">mexicanAddTwo	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Deposit\Cash\:055012581:000032451289\$4.00 MXN11114\December 22, 2013 2:04:29\Deposit\Cash\:055012581:000032451289\$4.00 MXN'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="dataFiles">dataFiles	^#( 'currencyAdd' 'basicCreateAccount' 'basicAdd' 'mexicanAdd' 'mexicanAddTwo' 'normalOverDraftAdd' 'premiumOverDraftBad' 'premiumOverDraftOk' 'goldOverDraftBad' 'canadianAdd' 'twoAccounts' 'depositCheckInBank' 'withdrawalCheckOtherBankOk' 'depositCheckOtherBank' 'withdrawalCheckOtherBankBad' 'depositCheckCanceled' 'wrongOrder' )</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="goldOverDraftBad">goldOverDraftBad	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Gold\$1.00 USD11113\',   (self today - 19 days) printString ,'\Withdrawal\Cash\:055012581:000032451289\$100002.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="withdrawalCheckOtherBankBad">withdrawalCheckOtherBankBad	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$10.00 USD11114\',  (self today - 20 days) printString ,'\NewAccount\000032451299\Foo\Normal\$10.00 USD11115\',   (self today - 18 days) printString ,'\Withdrawal\Check\:055012581:000032451299\:955912581:000032451289\10\$18.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="twoAccounts">twoAccounts	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Deposit\Cash\:055012581:000032451289\$2.00 USD11114\',  (self today - 20 days) printString ,'\NewAccount\000032451299\Foo\Normal\$1.00 USD11115\',   (self today - 18 days) printString ,'\Deposit\Cash\:055012581:000032451299\$3.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="withdrawalCheckOtherBankOk">withdrawalCheckOtherBankOk	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$10.00 USD11114\',  (self today - 20 days) printString ,'\NewAccount\000032451299\Foo\Normal\$10.00 USD11115\',   (self today - 18 days) printString ,'\Withdrawal\Check\:055012581:000032451299\:955912581:000032451289\10\$5.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="depositCheckInBank">depositCheckInBank	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$10.00 USD11114\',  (self today - 20 days) printString ,'\NewAccount\000032451299\Foo\Normal\$10.00 USD11115\',   (self today - 18 days) printString ,'\Deposit\Check\:055012581:000032451289\:055012581:000032451299\10\3\$5.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="orderTest">orderTest	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11114\',   (self today - 14 days) printString ,'\Deposit\Cash\:055012581:000032451289\$4.00 USD11115\',   (self today - 16 days) printString ,'\Deposit\Cash\:055012581:000032451289\$3.00 USD11113\',   (self today - 18 days) printString ,'\Deposit\Cash\:055012581:000032451289\$2.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="depositCheckOtherBank">depositCheckOtherBank	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$10.00 USD11114\',  (self today - 20 days) printString ,'\NewAccount\000032451299\Foo\Normal\$10.00 USD11115\',   (self today - 15 days) printString ,'\Deposit\Check\:955912581:000032451289\:055012581:000032451299\10\3\$5.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="basicCreateAccount">basicCreateAccount	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="premiumOverDraftOk">premiumOverDraftOk	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Premium\$1.00 USD11113\',   (self today - 19 days) printString ,'\Withdrawal\Cash\:055012581:000032451289\$10000.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="mexicanAdd">mexicanAdd	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Deposit\Cash\:055012581:000032451289\$4.00 MXN'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="currencyAdd">currencyAdd	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 18 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 17 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 16 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 15 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 14 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 13 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 12 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 11 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 10 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD11113\',   (self today - 9 days) printString ,'\Deposit\Cash\:055012581:000032451289\$5.99 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="canadianAdd">canadianAdd	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Deposit\Cash\:055012581:000032451289\$4.00 CAD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="normalOverDraftAdd">normalOverDraftAdd	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Withdrawal\Cash\:055012581:000032451289\$2.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="basicAdd">basicAdd	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$1.00 USD11113\',   (self today - 19 days) printString ,'\Deposit\Cash\:055012581:000032451289\$2.00 USD'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>test data</category><body package="Assignment6Tests" selector="depositCheckCanceled">depositCheckCanceled	"The \ characters are converted to tabs when data is written to file"	^'11112\',  (self today - 20 days) printString ,'\NewAccount\000032451289\Roger Whitney\Normal\$10.00 USD11114\',  (self today - 20 days) printString ,'\NewAccount\000032451299\Foo\Normal\$10.00 USD11115\',   (self today - 15 days) printString ,'\Deposit\Check\:955912581:000032451289\:055012581:000032451299\10\4\$5.00 USD11116\',   (self today - 13 days) printString ,'\Cancel\:055012581:000032451299\11115'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>currency data</category><body package="Assignment6Tests" selector="cad">cad	^'"Daily BID rates @ +/- 0%""www.oanda.com/currency/historical-rates/""""""End Date","CAD/MXN","CAD/USD","","","""2013-12-25","12.4514","0.9563",,,"2013-12-24","12.4514","0.9563",,,"2013-12-23","12.4514","0.9563",,,"2013-12-22","12.4514","0.9563",,,"2013-12-21","12.4514","0.9563",,,"2013-12-20","12.4514","0.9563",,,"2013-12-19","12.4514","0.9563",,,"2013-12-18","12.4514","0.9563",,,"2013-12-17","12.4514","0.9563",,,"2013-12-16","12.4514","0.9563",,,"2013-12-15","12.4514","0.9563",,,"2013-12-14","12.4514","0.9563",,,"2013-12-13","12.4514","0.9563",,,"2013-12-12","12.4514","0.9563",,,"2013-12-11","12.4514","0.9563",,,"2013-12-10","12.4514","0.9563",,,"2013-12-09","12.4514","0.9563",,,"2013-12-08","12.4514","0.9563",,,"2013-12-07","12.4514","0.9563",,,"2013-12-06","12.4514","0.9563",,,"2013-12-05","12.4514","0.9563",,,"2013-12-04","12.4514","0.9563",,,"2013-12-03","12.4514","0.9563",,,"2013-12-02","12.4514","0.9563",,,"2013-12-01","12.4514","0.9563",,,"2013-11-30","12.4514","0.9563",,,"2013-11-29","12.4514","0.9563",,,"2013-11-28","12.4514","0.9563",,,"2013-11-27","12.4514","0.9563",,,"2013-11-26","12.4514","0.9563",,,"2013-11-25","12.4514","0.9563",,,"2013-11-24","12.4514","0.9563",,,"2013-11-23","12.4514","0.9563",,,"2013-11-22","12.4514","0.9563",,,"2013-11-21","12.4514","0.9563",,,"2013-11-20","12.4514","0.9563",,,"2013-11-19","12.4514","0.9563",,,"2013-11-18","12.4514","0.9563",,,"2013-11-17","12.4514","0.9563",,,"2013-11-16","12.4514","0.9563",,,"2013-11-15","12.4514","0.9563",,,"2013-11-14","12.4514","0.9563",,,"2013-11-13","12.4514","0.9563",,,"2013-11-12","12.4514","0.9563",,,"2013-11-11","12.4514","0.9563",,,"2013-11-10","12.4514","0.9563",,,"2013-11-09","12.4514","0.9563",,,"2013-11-08","12.4514","0.9563",,,"2013-11-07","12.4514","0.9563",,,"2013-11-06","12.4514","0.9563",,,"2013-11-05","12.4514","0.9563",,,"2013-11-04","12.4514","0.9563",,,"2013-11-03","12.4514","0.9563",,,"2013-11-02","12.4514","0.9563",,,"2013-11-01","12.4514","0.9563",,,"2013-10-31","12.4514","0.9563",,,"2013-10-30","12.4514","0.9563",,,"2013-10-29","12.4514","0.9563",,,"2013-10-28","12.4514","0.9563",,,"2013-10-27","12.4514","0.9563",,,"2013-10-26","12.4514","0.9563",,,"2013-10-25","12.4514","0.9563",,,"2013-10-24","12.4514","0.9563",,,"2013-10-23","12.4514","0.9563",,,"2013-10-22","12.4514","0.9563",,,"2013-10-21","12.4514","0.9563",,,"2013-10-20","12.4514","0.9563",,,"2013-10-19","12.4514","0.9563",,,"2013-10-18","12.4514","0.9563",,,"2013-10-17","12.4514","0.9563",,,"2013-10-16","12.4514","0.9563",,,"2013-10-15","12.4514","0.9563",,,"2013-10-14","12.4514","0.9563",,,"2013-10-13","12.4514","0.9563",,,"2013-10-12","12.4514","0.9563",,,"2013-10-11","12.4514","0.9563",,,"2013-10-10","12.4514","0.9563",,,"2013-10-09","12.4514","0.9563",,,"2013-10-08","12.4514","0.9563",,,"2013-10-07","12.4514","0.9563",,,"2013-10-06","12.4514","0.9563",,,"2013-10-05","12.4514","0.9563",,,"2013-10-04","12.4514","0.9563",,,"2013-10-03","12.4514","0.9563",,,"2013-10-02","12.4514","0.9563",,,"2013-10-01","12.4514","0.9563",,,"""Period Average","12.4514","0.9563","","","""Period Low","12.4514","0.9563","","","""Period High","12.4514","0.9563","","",""'</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>currency data</category><body package="Assignment6Tests" selector="usd">usd	^'"Daily BID rates @ +/- 0%""www.oanda.com/currency/historical-rates/""""""End Date","USD/CAD","USD/MXN","","","""2013-12-22","1.0634","12.9616",,,"2013-12-21","1.0634","12.9616",,,"2013-12-20","1.0634","12.9616",,,"2013-12-19","1.0634","12.9616",,,"2013-12-18","1.0634","12.9616",,,"2013-12-17","1.0634","12.9616",,,"2013-12-16","1.0634","12.9616",,,"2013-12-15","1.0634","12.9616",,,"2013-12-14","1.0634","12.9616",,,"2013-12-13","1.0600","13.0201",,,"2013-12-12","1.0602","12.8854",,,"2013-12-11","1.0628","12.8421",,,"2013-12-10","1.0650","12.8762",,,"2013-12-09","1.0634","12.9263",,,"2013-12-08","1.0635","12.9262",,,"2013-12-07","1.0654","13.0388",,,"2013-12-06","1.0666","13.0378",,,"2013-12-05","1.0661","13.1100",,,"2013-12-04","1.0648","13.2113",,,"2013-12-03","1.0628","13.1445",,,"2013-12-02","1.0610","13.1008",,,"2013-12-01","1.0610","13.1008",,,"2013-11-30","1.0592","13.0800",,,"2013-11-29","1.0585","13.0998",,,"2013-11-28","1.0561","13.0779",,,"2013-11-27","1.0539","13.0594",,,"2013-11-26","1.0551","12.9998",,,"2013-11-25","1.0513","12.9619",,,"2013-11-24","1.0513","12.9621",,,"2013-11-23","1.0536","13.0244",,,"2013-11-22","1.0476","13.0892",,,"2013-11-21","1.0459","12.9799",,,"2013-11-20","1.0442","12.8982",,,"2013-11-19","1.0429","12.8988",,,"2013-11-18","1.0433","12.9281",,,"2013-11-17","1.0433","12.9284",,,"2013-11-16","1.0464","12.9561",,,"2013-11-15","1.0477","13.0264",,,"2013-11-14","1.0483","13.1537",,,"2013-11-13","1.0485","13.2196",,,"2013-11-12","1.0475","13.1777",,,"2013-11-11","1.0475","13.1632",,,"2013-11-10","1.0475","13.1634",,,"2013-11-09","1.0465","13.2206",,,"2013-11-08","1.0426","13.1690",,,"2013-11-07","1.0440","13.1335",,,"2013-11-06","1.0437","13.0474",,,"2013-11-05","1.0414","13.0185",,,"2013-11-04","1.0418","13.0541",,,"2013-11-03","1.0418","13.0541",,,"2013-11-02","1.0430","13.0398",,,"2013-11-01","1.0458","12.9641",,,"2013-10-31","1.0462","12.8965",,,"2013-10-30","1.0446","12.8963",,,"2013-10-29","1.0442","12.8599",,,"2013-10-28","1.0443","12.8745",,,"2013-10-27","1.0443","12.8745",,,"2013-10-26","1.0434","12.9443",,,"2013-10-25","1.0396","12.9755",,,"2013-10-24","1.0329","12.9083",,,"2013-10-23","1.0296","12.9386",,,"2013-10-22","1.0295","12.8797",,,"2013-10-21","1.0281","12.8501",,,"2013-10-20","1.0281","12.8501",,,"2013-10-19","1.0292","12.7908",,,"2013-10-18","1.0307","12.8162",,,"2013-10-17","1.0363","12.9362",,,"2013-10-16","1.0355","12.9792",,,"2013-10-15","1.0354","13.0136",,,"2013-10-14","1.0345","12.9891",,,"2013-10-13","1.0345","12.9891",,,"2013-10-12","1.0389","13.0577",,,"2013-10-11","1.0395","13.1331",,,"2013-10-10","1.0377","13.1812",,,"2013-10-09","1.0328","13.1326",,,"2013-10-08","1.0310","13.1262",,,"2013-10-07","1.0294","13.0773",,,"2013-10-06","1.0294","13.0773",,,"2013-10-05","1.0321","13.1363",,,"2013-10-04","1.0326","13.1503",,,"2013-10-03","1.0338","13.1632",,,"2013-10-02","1.0316","13.1038",,,"2013-10-01","1.0303","13.1811",,,"""Period Average","1.0454","13.0202","","","""Period Low","1.0281","12.7908","","","""Period High","1.0666","13.2206","","",""'</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>currency data</category><body package="Assignment6Tests" selector="mxn">mxn	^'"Daily BID rates @ +/- 0%""www.oanda.com/currency/historical-rates/""""""End Date","MXN/CAD","MXN/USD","","","""2013-12-25","0.0802","0.0767",,,"2013-12-24","0.0802","0.0767",,,"2013-12-23","0.0802","0.0767",,,"2013-12-22","0.0802","1.0000",,,"2013-12-21","0.0802","0.0767",,,"2013-12-20","0.0802","0.0767",,,"2013-12-19","0.0802","0.0767",,,"2013-12-18","0.0802","0.0767",,,"2013-12-17","0.0802","0.0767",,,"2013-12-16","0.0802","0.0767",,,"2013-12-15","0.0802","0.0767",,,"2013-12-14","0.0802","0.0767",,,"2013-12-14","0.0802","0.0767",,,"2013-12-13","0.0802","0.0767",,,"2013-12-12","0.0802","0.0767",,,"2013-12-11","0.0802","0.0767",,,"2013-12-10","0.0802","0.0767",,,"2013-12-09","0.0802","0.0767",,,"2013-12-08","0.0802","0.0767",,,"2013-12-07","0.0802","0.0767",,,"2013-12-06","0.0802","0.0767",,,"2013-12-05","0.0802","0.0767",,,"2013-12-04","0.0802","0.0767",,,"2013-12-03","0.0802","0.0767",,,"2013-12-02","0.0802","0.0767",,,"2013-12-01","0.0802","0.0767",,,"2013-11-30","0.0802","0.0767",,,"2013-11-29","0.0802","0.0767",,,"2013-11-28","0.0802","0.0767",,,"2013-11-27","0.0802","0.0767",,,"2013-11-26","0.0802","0.0767",,,"2013-11-25","0.0802","0.0767",,,"2013-11-24","0.0802","0.0767",,,"2013-11-23","0.0802","0.0767",,,"2013-11-22","0.0802","0.0767",,,"2013-11-21","0.0802","0.0767",,,"2013-11-20","0.0802","0.0767",,,"2013-11-19","0.0802","0.0767",,,"2013-11-18","0.0802","0.0767",,,"2013-11-17","0.0802","0.0767",,,"2013-11-16","0.0802","0.0767",,,"2013-11-15","0.0802","0.0767",,,"2013-11-14","0.0802","0.0767",,,"2013-11-13","0.0802","0.0767",,,"2013-11-12","0.0802","0.0767",,,"2013-11-11","0.0802","0.0767",,,"2013-11-10","0.0802","0.0767",,,"2013-11-09","0.0802","0.0767",,,"2013-11-08","0.0802","0.0767",,,"2013-11-07","0.0802","0.0767",,,"2013-11-06","0.0802","0.0767",,,"2013-11-05","0.0802","0.0767",,,"2013-11-04","0.0802","0.0767",,,"2013-11-03","0.0802","0.0767",,,"2013-11-02","0.0802","0.0767",,,"2013-11-01","0.0802","0.0767",,,"2013-10-31","0.0802","0.0767",,,"2013-10-30","0.0802","0.0767",,,"2013-10-29","0.0802","0.0767",,,"2013-10-28","0.0802","0.0767",,,"2013-10-27","0.0802","0.0767",,,"2013-10-26","0.0802","0.0767",,,"2013-10-25","0.0802","0.0767",,,"2013-10-24","0.0802","0.0767",,,"2013-10-23","0.0802","0.0767",,,"2013-10-22","0.0802","0.0767",,,"2013-10-21","0.0802","0.0767",,,"2013-10-20","0.0802","0.0767",,,"2013-10-19","0.0802","0.0767",,,"2013-10-18","0.0802","0.0767",,,"2013-10-17","0.0802","0.0767",,,"2013-10-16","0.0802","0.0767",,,"2013-10-15","0.0802","0.0767",,,"2013-10-14","0.0802","0.0767",,,"2013-10-13","0.0802","0.0767",,,"2013-10-12","0.0802","0.0767",,,"2013-10-11","0.0802","0.0767",,,"2013-10-10","0.0802","0.0767",,,"2013-10-09","0.0802","0.0767",,,"2013-10-08","0.0802","0.0767",,,"2013-10-07","0.0802","0.0767",,,"2013-10-06","0.0802","0.0767",,,"2013-10-05","0.0802","0.0767",,,"2013-10-04","0.0802","0.0767",,,"2013-10-03","0.0802","0.0767",,,"2013-10-02","0.0802","0.0767",,,"2013-10-01","0.0802","0.0767",,,"""Period Average","0.0802","0.0767","","","""Period Low","0.0802","0.0767","","","""Period High","0.0802","0.0767","","",""'</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>currency data</category><body package="Assignment6Tests" selector="writeCurrencyFiles">writeCurrencyFiles	"Assignment6TestsREW new writeCurrencyFiles"	| cad mxn usd |	cad := 'CAD.csv' asFilename writeStream.	cad		nextPutAll: self cad;		close.	mxn := 'MXN.csv' asFilename writeStream.	mxn		nextPutAll: self mxn;		close.	usd := 'USD.csv' asFilename writeStream.	usd		nextPutAll: self usd;		close</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>initialize-release</category><body package="Assignment6Tests" selector="tearDown">tearDown	self dataFiles do: 			[:each |			| file |			file := each asFilename.			file exists ifTrue: [file delete]]</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>initialize-release</category><body package="Assignment6Tests" selector="setUp">setUp	self writeCurrencyFiles.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testGoldOverDraftBad">testGoldOverDraftBad	| account  |	account := self accountFromFile: 'goldOverDraftBad'.	self assert: account balance = '$-4999.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testDepositCheckNotCanceledBalance">testDepositCheckNotCanceledBalance	| secondAccount |	self accountFromFile: 'depositCheckOtherBank'.	secondAccount := self secondAccount.	self		assert: (secondAccount balanceIn: -18 days) = '$10.00 USD' asCurrency;		assert: (secondAccount balanceIn: -14 days) = '$15.00 USD' asCurrency;		assert: (secondAccount balanceIn: -5 days) = '$15.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testDepositCheckCanceledAvaliableBalance">testDepositCheckCanceledAvaliableBalance	| secondAccount |	self accountFromFile: 'depositCheckCanceled'.	secondAccount := self secondAccount.	self		assert: (secondAccount availableBalanceIn: -18 days) = '$10.00 USD' asCurrency;		assert: (secondAccount availableBalanceIn: -14 days) = '$10.00 USD' asCurrency;		assert: (secondAccount availableBalanceIn: -5 days) = '$10.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testTwoAccounts">testTwoAccounts	| account secondAccount |	account := self accountFromFile: 'twoAccounts'.	self assert: account balance = '$3.00 USD' asCurrency.	secondAccount := self secondAccount.	self assert: secondAccount balance = '$4.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testWithdrawalCheckOtherBankBad">testWithdrawalCheckOtherBankBad	| account secondAccount |	account := self accountFromFile: 'withdrawalCheckOtherBankBad'.	secondAccount := self secondAccount.	self assert: account balance = '$10.00 USD' asCurrency.	self assert: secondAccount balance = '$5.00 USD' asCurrency.	self assert: bank outgoingTransactions size = 1</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testDepositCheckInBank">testDepositCheckInBank	| account secondAccount |	account := self accountFromFile: 'depositCheckInBank'.	secondAccount := self secondAccount.	self assert: account balance = '$5.00 USD' asCurrency.	self assert: secondAccount balance = '$15.00 USD' asCurrency.	self assert: bank outgoingTransactions isEmpty</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testCanadianAdd">testCanadianAdd	| account  |	account := self accountFromFile: 'canadianAdd'.	self assert: account balance = '$4.82 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testPremiumOverDraftOk">testPremiumOverDraftOk	| account  |	account := self accountFromFile: 'premiumOverDraftOk'.	self assert: account balance = '$-9999.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testWithdrawalCheckOtherBankOk">testWithdrawalCheckOtherBankOk	| account secondAccount |	account := self accountFromFile: 'withdrawalCheckOtherBankOk'.	secondAccount := self secondAccount.	self assert: account balance = '$10.00 USD' asCurrency.	self assert: secondAccount balance = '$5.00 USD' asCurrency.	self assert: bank outgoingTransactions size = 0</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testDepositCheckOtherBank">testDepositCheckOtherBank	| account secondAccount |	account := self accountFromFile: 'depositCheckOtherBank'.	secondAccount := self secondAccount.	self assert: account balance = '$10.00 USD' asCurrency.	self assert: secondAccount balance = '$15.00 USD' asCurrency.	self assert: bank outgoingTransactions size = 1</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testNormalOverDraft">testNormalOverDraft	| account  |	account := self accountFromFile: 'normalOverDraftAdd'.	self assert: account balance = '$-4.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testBasicCreate">testBasicCreate	| account  |	account := self accountFromFile: 'basicCreateAccount'.	self assert: account balance = '$1.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="secondAccount">secondAccount	^self account: '000032451299'</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testMultipleAdd">testMultipleAdd	| account  |	account := self accountFromFile: 'currencyAdd'.	self assert: account balance = '$66.89 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testOrder">testOrder	| account |	account := self accountFromFile: 'orderTest'.	self		assert: (account balanceIn: -19 days) = '$1.00 USD' asCurrency;		assert: (account balanceIn: -17 days) = '$3.00 USD' asCurrency;		assert: (account balanceIn: -15 days) = '$6.00 USD' asCurrency;		assert: (account balanceIn: -13 days) = '$10.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testDepositCheckNotCanceledAvaliableBalance">testDepositCheckNotCanceledAvaliableBalance	| secondAccount |	self accountFromFile: 'depositCheckOtherBank'.	secondAccount := self secondAccount.	self		assert: (secondAccount availableBalanceIn: -18 days) = '$10.00 USD' asCurrency;		assert: (secondAccount availableBalanceIn: -14 days) = '$10.00 USD' asCurrency;		assert: (secondAccount availableBalanceIn: -5 days) = '$15.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testBasicAdd">testBasicAdd	| account  |	account := self accountFromFile: 'basicAdd'.	self assert: (account balance) = '$3.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="account:">account: aString	^bank account: aString.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="accountFromFile:">accountFromFile: aString	self createFile: aString.	bank := self bank.	bank transactionsFrom: aString asFilename.	^bank account: '000032451289'.</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testMexicanAdd">testMexicanAdd	| account  |	account := self accountFromFile: 'mexicanAdd'.	self assert: account balance = '$1.30 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testMexicanAddTwo">testMexicanAddTwo	| account  |	account := self accountFromFile: 'mexicanAddTwo'.	self assert: account balance = '$5.30 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testDepositCheckCanceledBalance">testDepositCheckCanceledBalance	| secondAccount |	self accountFromFile: 'depositCheckCanceled'.	secondAccount := self secondAccount.	self		assert: (secondAccount balanceIn: -18 days) = '$10.00 USD' asCurrency;		assert: (secondAccount balanceIn: -14 days) = '$15.00 USD' asCurrency;		assert: (secondAccount balanceIn: -5 days) = '$10.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testPremiumOverDraftBad">testPremiumOverDraftBad	| account  |	account := self accountFromFile: 'premiumOverDraftBad'.	self assert: account balance = '$-699.00 USD' asCurrency</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="bank">bank	^bank ifNil: [Bank routingNumber: '055012581']</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>private</category><body package="Assignment6Tests" selector="today">today	^Timestamp now</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>private</category><body package="Assignment6Tests" selector="createFile:">createFile: aStringName	| file fileWrite contents |	file := aStringName asFilename.	fileWrite := file writeStream.		[contents := self perform: aStringName asSymbol.	contents replaceAll: $\ with: Character tab.	fileWrite nextPutAll: contents]			ensure: [fileWrite close.]</body></methods><methods><class-id>Core.String</class-id> <category>error handling</category><body package="Assignment6Tests" selector="removeQuotesREW">removeQuotesREW	^self reject: [:each | each = $"]</body></methods><methods><class-id>Core.String</class-id> <category>error handling</category><body package="Assignment6Tests" selector="doesNotUnderstand:">doesNotUnderstand: aMessage	aMessage selector = #asCurrency ifTrue: [^Currency fromString: self].	aMessage selector = #lines ifTrue: [^self tokensBasedOn: Character cr].	aMessage selector = #asTimestamp ifTrue: [^Timestamp readFrom: self readStream].	aMessage selector = #notContainingCharacter ifTrue: [^nil].	aMessage selector = #onlyDecimal ifTrue: [^nil].	aMessage selector = #upTo: ifTrue: [^self readStream upTo: aMessage arguments first].	super doesNotUnderstand: aMessage.	^self</body></methods><methods><class-id>Core.Stream</class-id> <category>error handling</category><body package="Assignment6Tests" selector="doesNotUnderstand:">doesNotUnderstand: aMessage 	aMessage selector = #lines ifTrue: [^self contents lines].	aMessage selector = #nextLine ifTrue: [^self upTo: Character cr].	aMessage selector = #nextLf ifTrue: [^self upTo: Character cr].	aMessage selector = #blocks ifTrue:[^self contents lines].	super doesNotUnderstand: aMessage.	^self</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>private</category><body package="Assignment6Tests" selector="today">today	^Timestamp readFromDateAndTime: ('12/20/2013 11:04pm' readStream)</body></methods><do-it>Assignment6TestsREW new writeCurrencyFiles</do-it><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testBasicAdd">testBasicAdd	| account  |	account := self accountFromFile: 'basicAdd'.	"self assert: (account balance) = '$3.00 USD' asCurrency"</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testBasicCreate">testBasicCreate	| account  |	account := self accountFromFile: 'basicCreateAccount'."	self assert: account balance = '$1.00 USD' asCurrency"</body></methods><methods><class-id>Assignment6TestsREW</class-id> <category>tests Assignment6</category><body package="Assignment6Tests" selector="testBasicAdd">testBasicAdd	| account  |	account := self accountFromFile: 'basicAdd'.	self assert: (account balance) = '$3.00 USD' asCurrency</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	self createFile: 'transactions'</body></methods><shared-variable><name>aBankAccount1</name><environment>Core.BankTest</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Assignment6</package></attributes></shared-variable><do-it>Core.BankTest addClassVarName: #aBankAccount1</do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank |	self createFile: 'transactions'.	aBankAccount1 := aBank account: '000032451283'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>test data</category><body package="Assignment6" selector="transactions">transactions	^'111113\12.01.2013 17:30\NewAccount\000032451283\Roger Whitney\Normal\$100.00 USD111114\12.02.2013 17:30\NewAccount\000032451294\James Bond\Normal\$500.00 USD111118\12.02.2013 17:30\Deposit\Cash\:055012581:000032451283\$10.00 USD111116\12.03.2013 1:30\Deposit\Check\:055012581:000032451283\:055012581:000032451294\100\3\$20.00 USD111117\12.04.2013 1:30\Withdrawal\Cash\:055012581:000032451283\$30.00 USD111122\12.04.2013 1:30\Withdrawal\Check\:055012581:000032451283\:995012581:000077451283\101\$10.00 USD111119\12.05.2013 1:30\Deposit\Check\:995012581:000077451299\:055012581:000032451283\100\3\$20.00 USD111121\12.06.2013 1:30\Cancel\:055012581:000032451283\111119'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBankAccount := aBank account: '000032451283'.	"self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'."</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_7.im' 'February 21, 2014' '12:16:28 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_7.im was created at 12:16:28 PM on February 21, 2014."</do-it><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions.txt'.	aBankAccount := aBank account: '000032451283'.	"self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions'.	aBankAccount := aBank account: '000032451283'.	"self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions'.	"aBankAccount := aBank account: '000032451283'."	"self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions'.	aBankAccount := aBank account: '000032451283'.	"self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'."</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'.</body></methods><methods><class-id>Core.BankTest</class-id> <category>tests</category><body package="Assignment6" selector="testSimpleCreate">"created on 2/21/14"testSimpleCreate	| aBank aBankAccount |	self createFile: 'transactions'.	aBank := Bank routingNumber: '055012581'.	aBank transactionsFrom: 'transactions'.	aBankAccount := aBank account: '000032451283'.	self assert: (aBankAccount balanceIn: -9 days) printString = '$50.00 USD'.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_7.im' 'February 21, 2014' '12:35:33 PM')""An image file c:\Users\Disha\Documents\VisualWorks Projects\Assignment6\OOP Assignment6_7.im was created at 12:35:33 PM on February 21, 2014."</do-it>